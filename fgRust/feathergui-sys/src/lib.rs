#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

// automatically generated by rust-bindgen

pub type size_t = ::std::os::raw::c_ulonglong;
pub type ssize_t = ::std::os::raw::c_longlong;
pub type rsize_t = size_t;
pub type intptr_t = ::std::os::raw::c_longlong;
pub type uintptr_t = ::std::os::raw::c_ulonglong;
pub type ptrdiff_t = ::std::os::raw::c_longlong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
pub enum Struct_threadmbcinfostruct { }
pub type pthreadlocinfo = *mut Struct_threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut Struct_threadmbcinfostruct;
pub enum Struct___lc_time_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
impl ::std::clone::Clone for Struct_localeinfo_struct {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_localeinfo_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type _locale_tstruct = Struct_localeinfo_struct;
pub type _locale_t = *mut Struct_localeinfo_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct_tagLC_ID {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tagLC_ID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type LC_ID = Struct_tagLC_ID;
pub type LPLC_ID = *mut Struct_tagLC_ID;
pub enum Struct_lconv { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [Struct_Unnamed1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut Struct_lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut Struct___lc_time_data,
}
impl ::std::clone::Clone for Struct_threadlocaleinfostruct {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_threadlocaleinfostruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut wchar_t,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type threadlocinfo = Struct_threadlocaleinfostruct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __max_align_ll: ::std::os::raw::c_longlong,
    pub __max_align_ld: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type max_align_t = Struct_Unnamed2;
pub type FREL = ::std::os::raw::c_float;
pub type FABS = ::std::os::raw::c_float;
pub type FG_UINT = ::std::os::raw::c_uint;
pub type fgFlag = ::std::os::raw::c_uint;
pub type fgAsset = *mut ::std::os::raw::c_void;
pub type fgFont = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub abs: FABS,
    pub rel: FREL,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Coord = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub x: FREL,
    pub y: FREL,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type RelVec = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub x: FABS,
    pub y: FABS,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AbsVec = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub x: Coord,
    pub y: Coord,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CVec = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgIntVec = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub _bindgen_data_1_: [u32; 4usize],
}
impl Struct_Unnamed8 {
    pub unsafe fn left(&mut self) -> *mut FREL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn top(&mut self) -> *mut FREL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn right(&mut self) -> *mut FREL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn bottom(&mut self) -> *mut FREL {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(12))
    }
    pub unsafe fn topleft(&mut self) -> *mut RelVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bottomright(&mut self) -> *mut RelVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type RelRect = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub _bindgen_data_1_: [u32; 4usize],
}
impl Struct_Unnamed9 {
    pub unsafe fn left(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn top(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn right(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn bottom(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(12))
    }
    pub unsafe fn topleft(&mut self) -> *mut AbsVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bottomright(&mut self) -> *mut AbsVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AbsRect = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub _bindgen_data_1_: [u32; 8usize],
}
impl Struct_Unnamed10 {
    pub unsafe fn left(&mut self) -> *mut Coord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn top(&mut self) -> *mut Coord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn right(&mut self) -> *mut Coord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(16))
    }
    pub unsafe fn bottom(&mut self) -> *mut Coord {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(24))
    }
    pub unsafe fn topleft(&mut self) -> *mut CVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn bottomright(&mut self) -> *mut CVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(16))
    }
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CRect = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__void {
    pub p: *mut ::std::os::raw::c_void,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__void {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__void {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVector = Struct___VECTOR__void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub area: CRect,
    pub rotation: FABS,
    pub center: CVec,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgTransform = Struct_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn color(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn colors(&mut self) -> *mut [::std::os::raw::c_uchar; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn r(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn g(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(1))
    }
    pub unsafe fn b(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn a(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(3))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgColor = Union_Unnamed12;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGMOVE {
    FGMOVE_PROPAGATE = 1,
    FGMOVE_RESIZEX = 2,
    FGMOVE_RESIZEY = 4,
    FGMOVE_RESIZE = 6,
    FGMOVE_MOVEX = 8,
    FGMOVE_MOVEY = 16,
    FGMOVE_MOVE = 24,
    FGMOVE_CENTERX = 32,
    FGMOVE_CENTERY = 64,
    FGMOVE_CENTER = 96,
    FGMOVE_ROTATION = 128,
    FGMOVE_PADDING = 256,
    FGMOVE_MARGIN = 512,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGTEXTFMT {
    FGTEXTFMT_UTF8 = 0,
    FGTEXTFMT_UTF16 = 1,
    FGTEXTFMT_UTF32 = 2,
    FGTEXTFMT_PLACEHOLDER_UTF8 = 4,
    FGTEXTFMT_PLACEHOLDER_UTF16 = 5,
    FGTEXTFMT_PLACEHOLDER_UTF32 = 6,
    FGTEXTFMT_MASK = 7,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGSETSTYLE {
    FGSETSTYLE_NAME = 0,
    FGSETSTYLE_INDEX = 1,
    FGSETSTYLE_POINTER = 2,
    FGSETSTYLE_SETFLAG = 3,
    FGSETSTYLE_REMOVEFLAG = 4,
    FGSETSTYLE_SETFLAGINDEX = 5,
    FGSETSTYLE_REMOVEFLAGINDEX = 6,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGSETCOLOR {
    FGSETCOLOR_MAIN = 0,
    FGSETCOLOR_PLACEHOLDER = 1,
    FGSETCOLOR_CURSOR = 2,
    FGSETCOLOR_SELECT = 3,
    FGSETCOLOR_HOVER = 4,
    FGSETCOLOR_DRAG = 5,
    FGSETCOLOR_EDGE = 6,
    FGSETCOLOR_ROWEDGE = 7,
    FGSETCOLOR_COLUMNEDGE = 8,
    FGSETCOLOR_ROWEVEN = 9,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGDIM {
    FGDIM_MIN = 0,
    FGDIM_MAX = 1,
    FGDIM_FIXED = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGCHECKED {
    FGCHECKED_NONE = 0,
    FGCHECKED_CHECKED = 1,
    FGCHECKED_INDETERMINATE = 2,
}
pub const FGUNIT_LEFT_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_LEFT_SP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_SP;
pub const FGUNIT_LEFT_EM: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_EM;
pub const FGUNIT_LEFT_PX: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_PX;
pub const FGUNIT_LEFT_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_PX;
pub const FGUNIT_LEFT: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_TOP_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_TOP_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_TOP_PX;
pub const FGUNIT_TOP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_EM;
pub const FGUNIT_RIGHT_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_RIGHT_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_RIGHT_PX;
pub const FGUNIT_RIGHT: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_TOP_SP;
pub const FGUNIT_BOTTOM_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_BOTTOM_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_BOTTOM_PX;
pub const FGUNIT_X_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_X_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_X_PX;
pub const FGUNIT_X: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_TOP_EM;
pub const FGUNIT_Y_DP: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_DP;
pub const FGUNIT_Y_MASK: Enum_FGUNIT = Enum_FGUNIT::FGUNIT_Y_PX;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGUNIT {
    FGUNIT_DP = 0,
    FGUNIT_SP = 1,
    FGUNIT_EM = 2,
    FGUNIT_PX = 3,
    FGUNIT_TOP_SP = 4,
    FGUNIT_TOP_EM = 8,
    FGUNIT_TOP_PX = 12,
    FGUNIT_RIGHT_SP = 16,
    FGUNIT_RIGHT_EM = 32,
    FGUNIT_RIGHT_PX = 48,
    FGUNIT_BOTTOM_SP = 64,
    FGUNIT_BOTTOM_EM = 128,
    FGUNIT_BOTTOM_PX = 192,
    FGUNIT_BOTTOM = 6,
    FGUNIT_X_SP = 256,
    FGUNIT_X_EM = 512,
    FGUNIT_X_PX = 768,
    FGUNIT_Y_SP = 1024,
    FGUNIT_Y_EM = 2048,
    FGUNIT_Y_PX = 3072,
    FGUNIT_Y = 10,
    FGUNIT_RIGHT_WIDTH = 4096,
    FGUNIT_BOTTOM_HEIGHT = 8192,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGITEM {
    FGITEM_DEFAULT = 0,
    FGITEM_TEXT = 1,
    FGITEM_ELEMENT = 2,
    FGITEM_ROW = 3,
    FGITEM_COLUMN = 4,
    FGITEM_LOCATION = 5,
    FGITEM_COUNT = 6,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGVALUE {
    FGVALUE_UNKNOWN = 0,
    FGVALUE_INT64 = 1,
    FGVALUE_FLOAT = 2,
    FGVALUE_POINTER = 3,
    FGVALUE_ROW = 4,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_MSGTYPE {
    FG_UNKNOWN = 0,
    FG_CONSTRUCT = 1,
    FG_DESTROY = 2,
    FG_MOVE = 3,
    FG_SETALPHA = 4,
    FG_SETAREA = 5,
    FG_SETTRANSFORM = 6,
    FG_SETFLAG = 7,
    FG_SETFLAGS = 8,
    FG_SETMARGIN = 9,
    FG_SETPADDING = 10,
    FG_SETPARENT = 11,
    FG_ADDCHILD = 12,
    FG_REMOVECHILD = 13,
    FG_PARENTCHANGE = 14,
    FG_LAYOUTCHANGE = 15,
    FG_LAYOUTFUNCTION = 16,
    FG_LAYOUTLOAD = 17,
    FG_DRAGOVER = 18,
    FG_DROP = 19,
    FG_DRAW = 20,
    FG_INJECT = 21,
    FG_SETSKIN = 22,
    FG_GETSKIN = 23,
    FG_SETSTYLE = 24,
    FG_GETSTYLE = 25,
    FG_GETCLASSNAME = 26,
    FG_GETDPI = 27,
    FG_SETDPI = 28,
    FG_SETUSERDATA = 29,
    FG_GETUSERDATA = 30,
    FG_SETDIM = 31,
    FG_GETDIM = 32,
    FG_SETSCALING = 33,
    FG_GETSCALING = 34,
    FG_MOUSEDOWN = 35,
    FG_MOUSEDBLCLICK = 36,
    FG_MOUSEUP = 37,
    FG_MOUSEON = 38,
    FG_MOUSEOFF = 39,
    FG_MOUSEMOVE = 40,
    FG_MOUSESCROLL = 41,
    FG_TOUCHBEGIN = 42,
    FG_TOUCHEND = 43,
    FG_TOUCHMOVE = 44,
    FG_KEYUP = 45,
    FG_KEYDOWN = 46,
    FG_KEYCHAR = 47,
    FG_JOYBUTTONDOWN = 48,
    FG_JOYBUTTONUP = 49,
    FG_JOYAXIS = 50,
    FG_GOTFOCUS = 51,
    FG_LOSTFOCUS = 52,
    FG_SETNAME = 53,
    FG_GETNAME = 54,
    FG_SETCONTEXTMENU = 55,
    FG_GETCONTEXTMENU = 56,
    FG_NEUTRAL = 57,
    FG_HOVER = 58,
    FG_ACTIVE = 59,
    FG_ACTION = 60,
    FG_GETITEM = 61,
    FG_ADDITEM = 62,
    FG_REMOVEITEM = 63,
    FG_SETITEM = 64,
    FG_GETSELECTEDITEM = 65,
    FG_GETVALUE = 66,
    FG_SETVALUE = 67,
    FG_SETASSET = 68,
    FG_SETUV = 69,
    FG_SETCOLOR = 70,
    FG_SETOUTLINE = 71,
    FG_SETFONT = 72,
    FG_SETLINEHEIGHT = 73,
    FG_SETLETTERSPACING = 74,
    FG_SETTEXT = 75,
    FG_GETASSET = 76,
    FG_GETUV = 77,
    FG_GETCOLOR = 78,
    FG_GETOUTLINE = 79,
    FG_GETFONT = 80,
    FG_GETLINEHEIGHT = 81,
    FG_GETLETTERSPACING = 82,
    FG_GETTEXT = 83,
    FG_CUSTOMEVENT = 84,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_KEYS {
    FG_KEY_NULL = 0,
    FG_KEY_LBUTTON = 1,
    FG_KEY_RBUTTON = 2,
    FG_KEY_CANCEL = 3,
    FG_KEY_MBUTTON = 4,
    FG_KEY_XBUTTON1 = 5,
    FG_KEY_XBUTTON2 = 6,
    FG_KEY_BACK = 8,
    FG_KEY_TAB = 9,
    FG_KEY_CLEAR = 12,
    FG_KEY_RETURN = 13,
    FG_KEY_SHIFT = 16,
    FG_KEY_CONTROL = 17,
    FG_KEY_MENU = 18,
    FG_KEY_PAUSE = 19,
    FG_KEY_CAPITAL = 20,
    FG_KEY_KANA = 21,
    FG_KEY_JUNJA = 23,
    FG_KEY_FINAL = 24,
    FG_KEY_KANJI = 25,
    FG_KEY_ESCAPE = 27,
    FG_KEY_CONVERT = 28,
    FG_KEY_NONCONVERT = 29,
    FG_KEY_ACCEPT = 30,
    FG_KEY_MODECHANGE = 31,
    FG_KEY_SPACE = 32,
    FG_KEY_PAGEUP = 33,
    FG_KEY_PAGEDOWN = 34,
    FG_KEY_END = 35,
    FG_KEY_HOME = 36,
    FG_KEY_LEFT = 37,
    FG_KEY_UP = 38,
    FG_KEY_RIGHT = 39,
    FG_KEY_DOWN = 40,
    FG_KEY_SELECT = 41,
    FG_KEY_PRINT = 42,
    FG_KEY_SNAPSHOT = 44,
    FG_KEY_INSERT = 45,
    FG_KEY_DELETE = 46,
    FG_KEY_HELP = 47,
    FG_KEY_0 = 48,
    FG_KEY_1 = 49,
    FG_KEY_2 = 50,
    FG_KEY_3 = 51,
    FG_KEY_4 = 52,
    FG_KEY_5 = 53,
    FG_KEY_6 = 54,
    FG_KEY_7 = 55,
    FG_KEY_8 = 56,
    FG_KEY_9 = 57,
    FG_KEY_A = 65,
    FG_KEY_B = 66,
    FG_KEY_C = 67,
    FG_KEY_D = 68,
    FG_KEY_E = 69,
    FG_KEY_F = 70,
    FG_KEY_G = 71,
    FG_KEY_H = 72,
    FG_KEY_I = 73,
    FG_KEY_J = 74,
    FG_KEY_K = 75,
    FG_KEY_L = 76,
    FG_KEY_M = 77,
    FG_KEY_N = 78,
    FG_KEY_O = 79,
    FG_KEY_P = 80,
    FG_KEY_Q = 81,
    FG_KEY_R = 82,
    FG_KEY_S = 83,
    FG_KEY_T = 84,
    FG_KEY_U = 85,
    FG_KEY_V = 86,
    FG_KEY_W = 87,
    FG_KEY_X = 88,
    FG_KEY_Y = 89,
    FG_KEY_Z = 90,
    FG_KEY_LWIN = 91,
    FG_KEY_RWIN = 92,
    FG_KEY_APPS = 93,
    FG_KEY_SLEEP = 95,
    FG_KEY_NUMPAD0 = 96,
    FG_KEY_NUMPAD1 = 97,
    FG_KEY_NUMPAD2 = 98,
    FG_KEY_NUMPAD3 = 99,
    FG_KEY_NUMPAD4 = 100,
    FG_KEY_NUMPAD5 = 101,
    FG_KEY_NUMPAD6 = 102,
    FG_KEY_NUMPAD7 = 103,
    FG_KEY_NUMPAD8 = 104,
    FG_KEY_NUMPAD9 = 105,
    FG_KEY_MULTIPLY = 106,
    FG_KEY_ADD = 107,
    FG_KEY_SEPARATOR = 108,
    FG_KEY_SUBTRACT = 109,
    FG_KEY_DECIMAL = 110,
    FG_KEY_DIVIDE = 111,
    FG_KEY_F1 = 112,
    FG_KEY_F2 = 113,
    FG_KEY_F3 = 114,
    FG_KEY_F4 = 115,
    FG_KEY_F5 = 116,
    FG_KEY_F6 = 117,
    FG_KEY_F7 = 118,
    FG_KEY_F8 = 119,
    FG_KEY_F9 = 120,
    FG_KEY_F10 = 121,
    FG_KEY_F11 = 122,
    FG_KEY_F12 = 123,
    FG_KEY_F13 = 124,
    FG_KEY_F14 = 125,
    FG_KEY_F15 = 126,
    FG_KEY_F16 = 127,
    FG_KEY_F17 = 128,
    FG_KEY_F18 = 129,
    FG_KEY_F19 = 130,
    FG_KEY_F20 = 131,
    FG_KEY_F21 = 132,
    FG_KEY_F22 = 133,
    FG_KEY_F23 = 134,
    FG_KEY_F24 = 135,
    FG_KEY_NUMLOCK = 144,
    FG_KEY_SCROLL = 145,
    FG_KEY_OEM_NEC_EQUAL = 146,
    FG_KEY_LSHIFT = 160,
    FG_KEY_RSHIFT = 161,
    FG_KEY_LCONTROL = 162,
    FG_KEY_RCONTROL = 163,
    FG_KEY_LMENU = 164,
    FG_KEY_RMENU = 165,
    FG_KEY_OEM_1 = 186,
    FG_KEY_OEM_PLUS = 187,
    FG_KEY_OEM_COMMA = 188,
    FG_KEY_OEM_MINUS = 189,
    FG_KEY_OEM_PERIOD = 190,
    FG_KEY_OEM_2 = 191,
    FG_KEY_OEM_3 = 192,
    FG_KEY_OEM_4 = 219,
    FG_KEY_OEM_5 = 220,
    FG_KEY_OEM_6 = 221,
    FG_KEY_OEM_7 = 222,
    FG_KEY_OEM_8 = 223,
}
pub const FG_JOYSTICK_ID1: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON1;
pub const FG_JOYAXIS_X: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON1;
pub const FG_JOYAXIS_Y: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON2;
pub const FG_JOYAXIS_Z: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON3;
pub const FG_JOYAXIS_R: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON4;
pub const FG_JOYAXIS_U: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON5;
pub const FG_JOYAXIS_V: Enum_FG_JOYBUTTONS = Enum_FG_JOYBUTTONS::FG_JOYBUTTON6;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_JOYBUTTONS {
    FG_JOYBUTTON1 = 0,
    FG_JOYBUTTON2 = 1,
    FG_JOYBUTTON3 = 2,
    FG_JOYBUTTON4 = 3,
    FG_JOYBUTTON5 = 4,
    FG_JOYBUTTON6 = 5,
    FG_JOYBUTTON7 = 6,
    FG_JOYBUTTON8 = 7,
    FG_JOYBUTTON9 = 8,
    FG_JOYBUTTON10 = 9,
    FG_JOYBUTTON11 = 10,
    FG_JOYBUTTON12 = 11,
    FG_JOYBUTTON13 = 12,
    FG_JOYBUTTON14 = 13,
    FG_JOYBUTTON15 = 14,
    FG_JOYBUTTON16 = 15,
    FG_JOYBUTTON17 = 16,
    FG_JOYBUTTON18 = 17,
    FG_JOYBUTTON19 = 18,
    FG_JOYBUTTON20 = 19,
    FG_JOYBUTTON21 = 20,
    FG_JOYBUTTON22 = 21,
    FG_JOYBUTTON23 = 22,
    FG_JOYBUTTON24 = 23,
    FG_JOYBUTTON25 = 24,
    FG_JOYBUTTON26 = 25,
    FG_JOYBUTTON27 = 26,
    FG_JOYBUTTON28 = 27,
    FG_JOYBUTTON29 = 28,
    FG_JOYBUTTON30 = 29,
    FG_JOYBUTTON31 = 30,
    FG_JOYBUTTON32 = 31,
    FG_JOYSTICK_ID2 = 256,
    FG_JOYSTICK_ID3 = 512,
    FG_JOYSTICK_ID4 = 768,
    FG_JOYSTICK_ID5 = 1024,
    FG_JOYSTICK_ID6 = 1280,
    FG_JOYSTICK_ID7 = 1536,
    FG_JOYSTICK_ID8 = 1792,
    FG_JOYSTICK_ID9 = 2048,
    FG_JOYSTICK_ID10 = 2304,
    FG_JOYSTICK_ID12 = 2560,
    FG_JOYSTICK_ID13 = 2816,
    FG_JOYSTICK_ID14 = 3072,
    FG_JOYSTICK_ID15 = 3328,
    FG_JOYSTICK_ID16 = 3584,
    FG_JOYSTICK_INVALID = 65535,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_MOUSEBUTTON {
    FG_MOUSELBUTTON = 1,
    FG_MOUSERBUTTON = 2,
    FG_MOUSEMBUTTON = 4,
    FG_MOUSEXBUTTON1 = 8,
    FG_MOUSEXBUTTON2 = 16,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_CURSOR {
    FGCURSOR_NONE = 0,
    FGCURSOR_ARROW = 1,
    FGCURSOR_IBEAM = 2,
    FGCURSOR_CROSS = 3,
    FGCURSOR_WAIT = 4,
    FGCURSOR_HAND = 5,
    FGCURSOR_RESIZENS = 6,
    FGCURSOR_RESIZEWE = 7,
    FGCURSOR_RESIZENWSE = 8,
    FGCURSOR_RESIZENESW = 9,
    FGCURSOR_RESIZEALL = 10,
    FGCURSOR_NO = 11,
    FGCURSOR_HELP = 12,
    FGCURSOR_DRAG = 13,
    FGCURSOR_CUSTOM = 14,
    FGCURSOR_OVERRIDE = 64,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_CLIPBOARD {
    FGCLIPBOARD_NONE = 0,
    FGCLIPBOARD_TEXT = 1,
    FGCLIPBOARD_WAVE = 2,
    FGCLIPBOARD_BITMAP = 3,
    FGCLIPBOARD_FILE = 4,
    FGCLIPBOARD_ELEMENT = 5,
    FGCLIPBOARD_CUSTOM = 6,
    FGCLIPBOARD_ALL = 7,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FG_MOUSEFLAGS {
    FGMOUSE_INSIDE = 1,
    FGMOUSE_HOVER = 2,
    FGMOUSE_DRAG = 4,
    FGMOUSE_SEND_MOUSEMOVE = 32,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_MOUSESTATE {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub buttons: ::std::os::raw::c_uchar,
    pub state: ::std::os::raw::c_uchar,
}
impl ::std::clone::Clone for Struct__FG_MOUSESTATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_MOUSESTATE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgMouseState = Struct__FG_MOUSESTATE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_MSG {
    pub _bindgen_data_1_: [u64; 2usize],
    pub _type: ::std::os::raw::c_ushort,
    pub subtype: ::std::os::raw::c_ushort,
}
impl Struct__FG_MSG {
    pub unsafe fn x(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn y(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn button(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn allbtn(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(9))
    }
    pub unsafe fn scrolldelta(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn scrollhdelta(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(10))
    }
    pub unsafe fn touchindex(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn keychar(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn keycode(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn sigkeys(&mut self) -> *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(5))
    }
    pub unsafe fn joyvalue(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joyaxis(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn joydown(&mut self) -> *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joybutton(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(1))
    }
    pub unsafe fn p(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut ptrdiff_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u(&mut self) -> *mut size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn e(&mut self) -> *mut *mut Struct__FG_ELEMENT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn p2(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn i2(&mut self) -> *mut ptrdiff_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn u2(&mut self) -> *mut size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn f2(&mut self) -> *mut FABS {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn e2(&mut self) -> *mut *mut Struct__FG_ELEMENT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(8))
    }
}
impl ::std::clone::Clone for Struct__FG_MSG {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_MSG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FG_Msg = Struct__FG_MSG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_DRAW_AUX_DATA {
    pub fgSZ: size_t,
    pub dpi: fgIntVec,
    pub scale: AbsVec,
    pub scalecenter: AbsVec,
}
impl ::std::clone::Clone for Struct__FG_DRAW_AUX_DATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_DRAW_AUX_DATA {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgDrawAuxData = Struct__FG_DRAW_AUX_DATA;
pub const FGELEMENT_LAYOUTRESIZE: Enum_FGELEMENT_FLAGS = Enum_FGELEMENT_FLAGS::FGELEMENT_BACKGROUND;
pub const FGELEMENT_LAYOUTADD: Enum_FGELEMENT_FLAGS = Enum_FGELEMENT_FLAGS::FGELEMENT_NOCLIP;
pub const FGELEMENT_LAYOUTMOVE: Enum_FGELEMENT_FLAGS = Enum_FGELEMENT_FLAGS::FGELEMENT_IGNORE;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_FGELEMENT_FLAGS {
    FGELEMENT_BACKGROUND = 1,
    FGELEMENT_NOCLIP = 2,
    FGELEMENT_IGNORE = 4,
    FGELEMENT_HIDDEN = 8,
    FGELEMENT_EXPANDX = 16,
    FGELEMENT_EXPANDY = 32,
    FGELEMENT_EXPAND = 48,
    FGELEMENT_SNAPX = 64,
    FGELEMENT_SNAPY = 128,
    FGELEMENT_SNAP = 192,
    FGELEMENT_LAYOUTREMOVE = 3,
    FGELEMENT_LAYOUTREORDER = 5,
    FGELEMENT_LAYOUTRESET = 6,
    FGELEMENT_USEDEFAULTS = -2147483648,
}
pub type fgDestroy =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type fgMessage =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void,
                                                 arg2: *const FG_Msg)
                                                 -> size_t>;
pub enum Struct___kh_fgUserdata_t { }
pub enum Struct___kh_fgSkinElements_t { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__Element {
    pub p: *mut *mut Struct__FG_ELEMENT,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__Element {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__Element {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorElement = Struct___VECTOR__Element;
pub type fgListener = ::std::option::Option<unsafe extern "C" fn(arg1: *mut Struct__FG_ELEMENT,
                                                                   arg2: *const FG_Msg)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_ELEMENT {
    pub transform: fgTransform,
    pub margin: AbsRect,
    pub padding: AbsRect,
    pub maxdim: AbsVec,
    pub mindim: AbsVec,
    pub layoutdim: AbsVec,
    pub scaling: AbsVec,
    pub destroy: fgDestroy,
    pub free: ::std::option::Option<unsafe extern "C" fn(_self: *mut ::std::os::raw::c_void)>,
    pub message: fgMessage,
    pub parent: *mut Struct__FG_ELEMENT,
    pub root: *mut Struct__FG_ELEMENT,
    pub last: *mut Struct__FG_ELEMENT,
    pub next: *mut Struct__FG_ELEMENT,
    pub prev: *mut Struct__FG_ELEMENT,
    pub rootinject: *mut Struct__FG_ELEMENT,
    pub lastinject: *mut Struct__FG_ELEMENT,
    pub nextinject: *mut Struct__FG_ELEMENT,
    pub previnject: *mut Struct__FG_ELEMENT,
    pub rootnoclip: *mut Struct__FG_ELEMENT,
    pub lastnoclip: *mut Struct__FG_ELEMENT,
    pub nextnoclip: *mut Struct__FG_ELEMENT,
    pub prevnoclip: *mut Struct__FG_ELEMENT,
    pub lastfocus: *mut Struct__FG_ELEMENT,
    pub flags: fgFlag,
    pub skin: *const Struct__FG_SKIN,
    pub skinelements: *mut Struct___kh_fgSkinElements_t,
    pub name: *mut ::std::os::raw::c_char,
    pub style: FG_UINT,
    pub userid: FG_UINT,
    pub userdata: *mut ::std::os::raw::c_void,
    pub userhash: *mut Struct___kh_fgUserdata_t,
}
impl ::std::clone::Clone for Struct__FG_ELEMENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_ELEMENT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgElement = Struct__FG_ELEMENT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_BACKEND {
    pub BackendTextFormat: Enum_FGTEXTFMT,
    pub fgCreateFont: ::std::option::Option<unsafe extern "C" fn(flags:
                                                                     fgFlag,
                                                                 font:
                                                                     *const ::std::os::raw::c_char,
                                                                 fontsize:
                                                                     ::std::os::raw::c_uint,
                                                                 dpi:
                                                                     *const fgIntVec)
                                                -> fgFont>,
    pub fgCloneFont: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                desc:
                                                                    *const Struct__FG_FONT_DESC)
                                               -> fgFont>,
    pub fgDestroyFont: ::std::option::Option<extern "C" fn(font: fgFont)>,
    pub fgDrawFont: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                               text:
                                                                   *const ::std::os::raw::c_void,
                                                               len: size_t,
                                                               lineheight:
                                                                   ::std::os::raw::c_float,
                                                               letterspacing:
                                                                   ::std::os::raw::c_float,
                                                               color:
                                                                   ::std::os::raw::c_uint,
                                                               area:
                                                                   *const AbsRect,
                                                               rotation: FABS,
                                                               center:
                                                                   *const AbsVec,
                                                               flags: fgFlag,
                                                               data:
                                                                   *const fgDrawAuxData,
                                                               layout:
                                                                   *mut ::std::os::raw::c_void)>,
    pub fgFontLayout: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                 text:
                                                                     *const ::std::os::raw::c_void,
                                                                 len: size_t,
                                                                 lineheight:
                                                                     ::std::os::raw::c_float,
                                                                 letterspacing:
                                                                     ::std::os::raw::c_float,
                                                                 area:
                                                                     *mut AbsRect,
                                                                 flags:
                                                                     fgFlag,
                                                                 prevlayout:
                                                                     *mut ::std::os::raw::c_void)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub fgFontGet: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                              desc:
                                                                  *mut Struct__FG_FONT_DESC)>,
    pub fgFontIndex: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                text:
                                                                    *const ::std::os::raw::c_void,
                                                                len: size_t,
                                                                lineheight:
                                                                    ::std::os::raw::c_float,
                                                                letterspacing:
                                                                    ::std::os::raw::c_float,
                                                                area:
                                                                    *const AbsRect,
                                                                flags: fgFlag,
                                                                pos: AbsVec,
                                                                cursor:
                                                                    *mut AbsVec,
                                                                layout:
                                                                    *mut ::std::os::raw::c_void)
                                               -> size_t>,
    pub fgFontPos: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                              text:
                                                                  *const ::std::os::raw::c_void,
                                                              len: size_t,
                                                              lineheight:
                                                                  ::std::os::raw::c_float,
                                                              letterspacing:
                                                                  ::std::os::raw::c_float,
                                                              area:
                                                                  *const AbsRect,
                                                              flags: fgFlag,
                                                              index: size_t,
                                                              layout:
                                                                  *mut ::std::os::raw::c_void)
                                             -> AbsVec>,
    pub fgCreateAsset: ::std::option::Option<unsafe extern "C" fn(flags:
                                                                      fgFlag,
                                                                  data:
                                                                      *const ::std::os::raw::c_char,
                                                                  length:
                                                                      size_t)
                                                 -> fgAsset>,
    pub fgCloneAsset: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                     fgAsset,
                                                                 src:
                                                                     *mut fgElement)
                                                -> fgAsset>,
    pub fgDestroyAsset: ::std::option::Option<extern "C" fn(asset: fgAsset)>,
    pub fgDrawAsset: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                    fgAsset,
                                                                uv:
                                                                    *const CRect,
                                                                color:
                                                                    ::std::os::raw::c_uint,
                                                                edge:
                                                                    ::std::os::raw::c_uint,
                                                                outline: FABS,
                                                                area:
                                                                    *const AbsRect,
                                                                rotation:
                                                                    FABS,
                                                                center:
                                                                    *const AbsVec,
                                                                flags: fgFlag,
                                                                data:
                                                                    *const fgDrawAuxData)>,
    pub fgAssetSize: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                    fgAsset,
                                                                uv:
                                                                    *const CRect,
                                                                dim:
                                                                    *mut AbsVec,
                                                                flags:
                                                                    fgFlag)>,
    pub fgDrawLines: ::std::option::Option<unsafe extern "C" fn(p:
                                                                    *const AbsVec,
                                                                n: size_t,
                                                                color:
                                                                    ::std::os::raw::c_uint,
                                                                translate:
                                                                    *const AbsVec,
                                                                scale:
                                                                    *const AbsVec,
                                                                rotation:
                                                                    FABS,
                                                                center:
                                                                    *const AbsVec,
                                                                data:
                                                                    *const fgDrawAuxData)>,
    pub fgCreate: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                 *const ::std::os::raw::c_char,
                                                             parent:
                                                                 *mut fgElement,
                                                             next:
                                                                 *mut fgElement,
                                                             name:
                                                                 *const ::std::os::raw::c_char,
                                                             flags: fgFlag,
                                                             transform:
                                                                 *const fgTransform,
                                                             units:
                                                                 ::std::os::raw::c_ushort)
                                            -> *mut fgElement>,
    pub fgMessageMap: ::std::option::Option<unsafe extern "C" fn(name:
                                                                     *const ::std::os::raw::c_char)
                                                -> ::std::os::raw::c_short>,
    pub fgUserDataMap: ::std::option::Option<unsafe extern "C" fn(_self:
                                                                      *mut fgElement,
                                                                  pairs:
                                                                      *mut Struct___VECTOR__KeyValue)>,
    pub fgPushClipRect: ::std::option::Option<unsafe extern "C" fn(clip:
                                                                       *const AbsRect,
                                                                   data:
                                                                       *const fgDrawAuxData)>,
    pub fgPeekClipRect: ::std::option::Option<unsafe extern "C" fn(data:
                                                                       *const fgDrawAuxData)
                                                  -> AbsRect>,
    pub fgPopClipRect: ::std::option::Option<unsafe extern "C" fn(data:
                                                                      *const fgDrawAuxData)>,
    pub fgDragStart: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                    ::std::os::raw::c_char,
                                                                data:
                                                                    *mut ::std::os::raw::c_void,
                                                                draw:
                                                                    *mut fgElement)>,
    pub fgSetCursor: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                    ::std::os::raw::c_uint,
                                                                custom:
                                                                    *mut ::std::os::raw::c_void)>,
    pub fgClipboardCopy: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                        ::std::os::raw::c_uint,
                                                                    data:
                                                                        *const ::std::os::raw::c_void,
                                                                    length:
                                                                        size_t)>,
    pub fgClipboardExists: ::std::option::Option<extern "C" fn(_type:
                                                                   ::std::os::raw::c_uint)
                                                     ->
                                                         ::std::os::raw::c_char>,
    pub fgClipboardPaste: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                         ::std::os::raw::c_uint,
                                                                     length:
                                                                         *mut size_t)
                                                    ->
                                                        *const ::std::os::raw::c_void>,
    pub fgClipboardFree: ::std::option::Option<unsafe extern "C" fn(mem:
                                                                        *const ::std::os::raw::c_void)>,
    pub fgDirtyElement: ::std::option::Option<unsafe extern "C" fn(elem:
                                                                       *mut fgElement)>,
    pub behaviorhook: ::std::option::Option<unsafe extern "C" fn(_self:
                                                                     *mut Struct__FG_ELEMENT,
                                                                 msg:
                                                                     *const FG_Msg)
                                                -> size_t>,
    pub fgProcessMessages: ::std::option::Option<extern "C" fn()
                                                     ->
                                                         ::std::os::raw::c_char>,
    pub fgLoadExtension: ::std::option::Option<unsafe extern "C" fn(extname:
                                                                        *const ::std::os::raw::c_char,
                                                                    fg:
                                                                        *mut ::std::os::raw::c_void,
                                                                    sz:
                                                                        size_t)
                                                   -> size_t>,
    pub fgTerminate: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__FG_BACKEND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_BACKEND {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgBackend = Struct__FG_BACKEND;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGCONTROL_FLAGS {
    FGCONTROL_DISABLE = 256,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_CONTROL {
    pub element: fgElement,
    pub contextmenu: *mut fgElement,
    pub tabnext: *mut Struct__FG_CONTROL,
    pub tabprev: *mut Struct__FG_CONTROL,
    pub sidenext: *mut Struct__FG_CONTROL,
    pub sideprev: *mut Struct__FG_CONTROL,
}
impl ::std::clone::Clone for Struct__FG_CONTROL {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_CONTROL {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgControl = Struct__FG_CONTROL;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGTEXT_FLAGS {
    FGTEXT_CHARWRAP = 8192,
    FGTEXT_WORDWRAP = 16384,
    FGTEXT_ELLIPSES = 32768,
    FGTEXT_RTL = 65536,
    FGTEXT_RIGHTALIGN = 131072,
    FGTEXT_CENTER = 262144,
    FGTEXT_SUBPIXEL = 524288,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__UTF8 {
    pub p: *mut ::std::os::raw::c_char,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__UTF8 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__UTF8 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorUTF8 = Struct___VECTOR__UTF8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__UTF16 {
    pub p: *mut wchar_t,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__UTF16 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__UTF16 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorUTF16 = Struct___VECTOR__UTF16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__UTF32 {
    pub p: *mut ::std::os::raw::c_int,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__UTF32 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__UTF32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorUTF32 = Struct___VECTOR__UTF32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_FONT_DESC {
    pub ascender: FABS,
    pub descender: FABS,
    pub lineheight: FABS,
    pub pt: ::std::os::raw::c_uint,
    pub dpi: fgIntVec,
}
impl ::std::clone::Clone for Struct__FG_FONT_DESC {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_FONT_DESC {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgFontDesc = Struct__FG_FONT_DESC;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_TEXT {
    pub element: fgElement,
    pub text32: fgVectorUTF32,
    pub text16: fgVectorUTF16,
    pub text8: fgVectorUTF8,
    pub font: fgFont,
    pub layout: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: ::std::os::raw::c_float,
    pub letterspacing: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct__FG_TEXT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_TEXT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgText = Struct__FG_TEXT;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGBUTTON_FLAGS {
    FGBUTTON_NOFOCUS = 512,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_BUTTON {
    pub control: fgControl,
    pub text: fgText,
}
impl ::std::clone::Clone for Struct__FG_BUTTON {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_BUTTON {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgButton = Struct__FG_BUTTON;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGSCROLLBAR_FLAGS {
    FGSCROLLBAR_HIDEH = 512,
    FGSCROLLBAR_HIDEV = 1024,
    FGSCROLLBAR_SHOWH = 2048,
    FGSCROLLBAR_SHOWV = 4096,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGSCROLLBAR_ACTIONS {
    FGSCROLLBAR_CHANGE = 1,
    FGSCROLLBAR_BAR = 2,
    FGSCROLLBAR_BARINIT = 3,
    FGSCROLLBAR_PAGE = 4,
    FGSCROLLBAR_BUTTON = 5,
    FGSCROLLBAR_BARCACHE = 6,
    FGSCROLLBAR_SCROLLTO = 7,
    FGSCROLLBAR_SCROLLTOABS = 8,
    FGSCROLLBAR_NUM = 9,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_SCROLLBAR_INNER {
    pub button: fgButton,
    pub lastmouse: AbsVec,
}
impl ::std::clone::Clone for Struct__FG_SCROLLBAR_INNER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_SCROLLBAR_INNER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_SCROLLBAR {
    pub control: fgControl,
    pub btn: [fgButton; 4usize],
    pub bar: [Struct__FG_SCROLLBAR_INNER; 2usize],
    pub bg: [fgElement; 3usize],
    pub realpadding: AbsRect,
    pub barcache: AbsVec,
    pub realsize: AbsVec,
    pub lastpadding: AbsVec,
}
impl ::std::clone::Clone for Struct__FG_SCROLLBAR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_SCROLLBAR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgScrollbar = Struct__FG_SCROLLBAR;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGBOX_FLAGS {
    FGBOX_IGNOREMARGINEDGEX = 8192,
    FGBOX_IGNOREMARGINEDGEY = 16384,
    FGBOX_TILEX = 32768,
    FGBOX_TILEY = 65536,
    FGBOX_DISTRIBUTEX = 131072,
    FGBOX_DISTRIBUTEY = 262144,
    FGBOX_TILE = 98304,
    FGBOX_DISTRIBUTE = 393216,
    FGBOX_IGNOREMARGINEDGE = 24576,
    FGBOX_LAYOUTMASK = 516096,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_BOX_ORDERED_ELEMENTS_ {
    pub isordered: ::std::os::raw::c_char,
    pub ordered: fgVectorElement,
    pub fixedsize: AbsVec,
}
impl ::std::clone::Clone for Struct__FG_BOX_ORDERED_ELEMENTS_ {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_BOX_ORDERED_ELEMENTS_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_BOX_ {
    pub scroll: fgScrollbar,
    pub order: Struct__FG_BOX_ORDERED_ELEMENTS_,
    pub fndraw: ::std::option::Option<unsafe extern "C" fn(arg1: *mut fgElement,
                                                             arg2: *const AbsRect,
                                                             arg3: *const fgDrawAuxData)>,
}
impl ::std::clone::Clone for Struct__FG_BOX_ {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_BOX_ {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgBox = Struct__FG_BOX_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_CHECKBOX {
    pub control: fgControl,
    pub text: fgText,
    pub checked: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__FG_CHECKBOX {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_CHECKBOX {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgCheckbox = Struct__FG_CHECKBOX;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGTEXTBOX_FLAGS {
    FGTEXTBOX_ACTION = 1048576,
    FGTEXTBOX_SINGLELINE = 2097152,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGTEXTBOX_ACTIONS {
    FGTEXTBOX_SELECTALL = 9,
    FGTEXTBOX_CUT = 10,
    FGTEXTBOX_COPY = 11,
    FGTEXTBOX_PASTE = 12,
    FGTEXTBOX_GOTOSTART = 13,
    FGTEXTBOX_GOTOEND = 14,
    FGTEXTBOX_GOTOLINESTART = 15,
    FGTEXTBOX_GOTOLINEEND = 16,
    FGTEXTBOX_TOGGLEINSERT = 17,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub scroll: fgScrollbar,
    pub validation: *mut ::std::os::raw::c_char,
    pub formatting: *mut ::std::os::raw::c_char,
    pub mask: ::std::os::raw::c_int,
    pub text8: fgVectorUTF8,
    pub text16: fgVectorUTF16,
    pub text32: fgVectorUTF32,
    pub placeholder8: fgVectorUTF8,
    pub placeholder16: fgVectorUTF16,
    pub placeholder32: fgVectorUTF32,
    pub placecolor: fgColor,
    pub cursorcolor: fgColor,
    pub selector: fgColor,
    pub start: size_t,
    pub startpos: AbsVec,
    pub end: size_t,
    pub endpos: AbsVec,
    pub lastx: ::std::os::raw::c_float,
    pub areacache: AbsRect,
    pub inserting: ::std::os::raw::c_char,
    pub font: *mut ::std::os::raw::c_void,
    pub layout: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: ::std::os::raw::c_float,
    pub letterspacing: ::std::os::raw::c_float,
    pub lastclick: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgTextbox = Struct_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub control: fgControl,
    pub _box: fgBox,
    pub selected: *mut fgElement,
    pub hover: fgColor,
    pub select: fgColor,
    pub dropflag: ::std::os::raw::c_char,
    pub mouse: fgMouseState,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgDropdown = Struct_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub _box: fgDropdown,
    pub text: fgTextbox,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgCombobox = Struct_Unnamed15;
pub const FGCURVE_CURVEMASK: Enum_FGCURVE_FLAGS = Enum_FGCURVE_FLAGS::FGCURVE_BSPLINE;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGCURVE_FLAGS {
    FGCURVE_LINE = 0,
    FGCURVE_QUADRATIC = 256,
    FGCURVE_CUBIC = 512,
    FGCURVE_BSPLINE = 768,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__Point {
    pub p: *mut AbsVec,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__Point {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__Point {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorPoint = Struct___VECTOR__Point;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub element: fgElement,
    pub color: fgColor,
    pub points: fgVectorPoint,
    pub cache: fgVectorPoint,
    pub factor: ::std::os::raw::c_float,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgCurve = Struct_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_TREEITEM {
    pub control: fgControl,
    pub arrow: fgElement,
    pub count: size_t,
}
impl ::std::clone::Clone for Struct__FG_TREEITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_TREEITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgTreeItem = Struct__FG_TREEITEM;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_TREEVIEW {
    pub scrollbar: fgScrollbar,
}
impl ::std::clone::Clone for Struct__FG_TREEVIEW {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_TREEVIEW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgTreeview = Struct__FG_TREEVIEW;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_MENUITEM {
    pub element: fgElement,
    pub text: fgText,
    pub submenu: *mut Struct__FG_MENU,
}
impl ::std::clone::Clone for Struct__FG_MENUITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_MENUITEM {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgMenuItem = Struct__FG_MENUITEM;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_MENU {
    pub _box: fgBox,
    pub arrow: fgElement,
    pub expanded: *mut Struct__FG_MENU,
}
impl ::std::clone::Clone for Struct__FG_MENU {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_MENU {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgMenu = Struct__FG_MENU;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGLIST_FLAGS {
    FGLIST_SELECT = 524288,
    FGLIST_MULTISELECT = 1572864,
    FGLIST_DRAGGABLE = 2097152,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub _box: fgBox,
    pub select: fgColor,
    pub hover: fgColor,
    pub drag: fgColor,
    pub selected: fgVectorElement,
    pub mouse: fgMouseState,
    pub splitter: FABS,
    pub split: *mut fgElement,
    pub splitedge: FABS,
    pub splitmouse: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgList = Struct_Unnamed17;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGGRID_FLAGS {
    FGGRID_AUTOEDIT = 4194304,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGGRID_ACTIONS {
    FGGRID_RESIZECOLUMN = 9,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_GRID_ROW {
    pub element: fgElement,
    pub order: Struct__FG_BOX_ORDERED_ELEMENTS_,
}
impl ::std::clone::Clone for Struct__FG_GRID_ROW {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_GRID_ROW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgGridRow = Struct__FG_GRID_ROW;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_GRID {
    pub list: fgList,
    pub header: fgList,
    pub editbox: fgTextbox,
    pub rowedgecolor: fgColor,
    pub columnedgecolor: fgColor,
    pub rowevencolor: fgColor,
}
impl ::std::clone::Clone for Struct__FG_GRID {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_GRID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgGrid = Struct__FG_GRID;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGDEBUG_FLAGS {
    FGDEBUG_CLEARONHIDE = 256,
}
#[repr(C)]
#[derive(Copy)]
pub struct Union__FG_DEBUG_MESSAGE_STORAGE {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union__FG_DEBUG_MESSAGE_STORAGE {
    pub unsafe fn p(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u(&mut self) -> *mut size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut ptrdiff_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn transform(&mut self) -> *mut fgTransform {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn crect(&mut self) -> *mut CRect {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rect(&mut self) -> *mut AbsRect {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn cvec(&mut self) -> *mut CVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn vec(&mut self) -> *mut AbsVec {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn element(&mut self) -> *mut *mut fgElement {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn name(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(8))
    }
    pub unsafe fn message(&mut self) -> *mut *mut FG_Msg {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut *const ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union__FG_DEBUG_MESSAGE_STORAGE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union__FG_DEBUG_MESSAGE_STORAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_DEBUG_MESSAGE {
    pub _bindgen_data_1_: [u64; 14usize],
    pub _type: ::std::os::raw::c_ushort,
    pub subtype: ::std::os::raw::c_ushort,
    pub time: ::std::os::raw::c_ulonglong,
    pub _bindgen_data_2_: [u64; 1usize],
    pub depth: size_t,
}
impl Struct__FG_DEBUG_MESSAGE {
    pub unsafe fn arg1(&mut self) -> *mut Union__FG_DEBUG_MESSAGE_STORAGE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn arg2(&mut self) -> *mut Union__FG_DEBUG_MESSAGE_STORAGE {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(56))
    }
    pub unsafe fn mouse(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn keys(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joyvalue(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joyaxis(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(4))
    }
    pub unsafe fn joydown(&mut self) -> *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn joybutton(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(1))
    }
    pub unsafe fn value(&mut self) -> *mut size_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_2_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn valuef(&mut self) -> *mut ::std::os::raw::c_float {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_2_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn valuep(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_2_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct__FG_DEBUG_MESSAGE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_DEBUG_MESSAGE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub _bindgen_data_1_: [u16; 2usize],
}
impl Struct_Unnamed18 {
    pub unsafe fn button(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn allbtn(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(1))
    }
    pub unsafe fn scrolldelta(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn scrollhdelta(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(2))
    }
    pub unsafe fn touchindex(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub keychar: ::std::os::raw::c_int,
    pub keycode: ::std::os::raw::c_uchar,
    pub sigkeys: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgDebugMessage = Struct__FG_DEBUG_MESSAGE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_DEBUG {
    pub element: fgElement,
    pub elements: fgTreeview,
    pub messages: fgTreeview,
    pub properties: fgGrid,
    pub contents: fgText,
    pub context: fgMenu,
    pub behaviorhook: ::std::option::Option<unsafe extern "C" fn(_self: *mut Struct__FG_ELEMENT,
                                                                   msg: *const FG_Msg)
                                                                   -> size_t>,
    pub messagelog: Struct___VECTOR__DebugMessage,
    pub messagestrings: Struct___VECTOR__strings,
    pub depth: size_t,
    pub depthelement: *mut fgElement,
    pub hover: *mut fgElement,
    pub ignore: ::std::os::raw::c_int,
    pub font: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: ::std::os::raw::c_float,
    pub letterspacing: ::std::os::raw::c_float,
    pub oldpadding: AbsRect,
}
impl ::std::clone::Clone for Struct__FG_DEBUG {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_DEBUG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__DebugMessage {
    pub p: *mut fgDebugMessage,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__DebugMessage {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__DebugMessage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__strings {
    pub p: *mut *mut ::std::os::raw::c_char,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__strings {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__strings {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgDebug = Struct__FG_DEBUG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_STYLE_MSG {
    pub msg: FG_Msg,
    pub next: *mut Struct__FG_STYLE_MSG,
}
impl ::std::clone::Clone for Struct__FG_STYLE_MSG {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_STYLE_MSG {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgStyleMsg = Struct__FG_STYLE_MSG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_STYLE {
    pub styles: *mut fgStyleMsg,
}
impl ::std::clone::Clone for Struct__FG_STYLE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_STYLE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgStyle = Struct__FG_STYLE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_STYLE_LAYOUT {
    pub _type: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub id: *mut ::std::os::raw::c_char,
    pub transform: fgTransform,
    pub units: ::std::os::raw::c_short,
    pub flags: fgFlag,
    pub style: fgStyle,
    pub order: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__FG_STYLE_LAYOUT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_STYLE_LAYOUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgStyleLayout = Struct__FG_STYLE_LAYOUT;
pub enum Struct___kh_fgSkins_t { }
pub enum Struct___kh_fgStyles_t { }
pub enum Struct___kh_fgStyleInt_t { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_SKIN_BASE {
    pub resources: fgVector,
    pub fonts: fgVector,
    pub skinmap: *mut Struct___kh_fgSkins_t,
    pub parent: *mut Struct__FG_SKIN_BASE,
}
impl ::std::clone::Clone for Struct__FG_SKIN_BASE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_SKIN_BASE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgSkinBase = Struct__FG_SKIN_BASE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_SKIN {
    pub base: Struct__FG_SKIN_BASE,
    pub inherit: *mut Struct__FG_SKIN,
    pub style: fgStyle,
    pub children: Struct___VECTOR__StyleLayout,
    pub styles: *mut Struct___kh_fgStyleInt_t,
}
impl ::std::clone::Clone for Struct__FG_SKIN {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_SKIN {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__StyleLayout {
    pub p: *mut fgStyleLayout,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__StyleLayout {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__StyleLayout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgSkin = Struct__FG_SKIN;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__ClassLayout {
    pub p: *mut Struct__FG_CLASS_LAYOUT,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__ClassLayout {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__ClassLayout {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorClassLayout = Struct___VECTOR__ClassLayout;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_KEY_VALUE {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__FG_KEY_VALUE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_KEY_VALUE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___VECTOR__KeyValue {
    pub p: *mut Struct__FG_KEY_VALUE,
    pub s: size_t,
    pub l: size_t,
}
impl ::std::clone::Clone for Struct___VECTOR__KeyValue {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct___VECTOR__KeyValue {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgVectorKeyValue = Struct___VECTOR__KeyValue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_CLASS_LAYOUT {
    pub style: fgStyleLayout,
    pub children: fgVectorClassLayout,
    pub userdata: fgVectorKeyValue,
}
impl ::std::clone::Clone for Struct__FG_CLASS_LAYOUT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_CLASS_LAYOUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgClassLayout = Struct__FG_CLASS_LAYOUT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_LAYOUT {
    pub base: fgSkinBase,
    pub style: fgStyle,
    pub layout: fgVectorClassLayout,
}
impl ::std::clone::Clone for Struct__FG_LAYOUT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_LAYOUT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgLayout = Struct__FG_LAYOUT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_MONITOR {
    pub element: fgElement,
    pub coverage: AbsRect,
    pub dpi: fgIntVec,
    pub mnext: *mut Struct__FG_MONITOR,
    pub mprev: *mut Struct__FG_MONITOR,
}
impl ::std::clone::Clone for Struct__FG_MONITOR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_MONITOR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgMonitor = Struct__FG_MONITOR;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_PROGRESSBAR {
    pub control: fgControl,
    pub text: fgText,
    pub bar: fgElement,
    pub value: FREL,
}
impl ::std::clone::Clone for Struct__FG_PROGRESSBAR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_PROGRESSBAR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgProgressbar = Struct__FG_PROGRESSBAR;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_RADIOBUTTON {
    pub window: fgCheckbox,
    pub radionext: *mut Struct__FG_RADIOBUTTON,
    pub radioprev: *mut Struct__FG_RADIOBUTTON,
}
impl ::std::clone::Clone for Struct__FG_RADIOBUTTON {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_RADIOBUTTON {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgRadiobutton = Struct__FG_RADIOBUTTON;
pub const FGRESOURCE_SHAPEMASK: Enum_FGRESOURCE_FLAGS = Enum_FGRESOURCE_FLAGS::FGRESOURCE_TRIANGLE;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGRESOURCE_FLAGS {
    FGRESOURCE_UVTILE = 256,
    FGRESOURCE_RECT = 512,
    FGRESOURCE_CIRCLE = 1024,
    FGRESOURCE_TRIANGLE = 1536,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub element: fgElement,
    pub uv: CRect,
    pub asset: fgAsset,
    pub outline: FABS,
    pub color: fgColor,
    pub edge: fgColor,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgResource = Struct_Unnamed20;
pub enum Struct___kh_fgRadioGroup_t { }
pub enum Struct___kh_fgFunctionMap_t { }
pub enum Struct___kh_fgIDMap_t { }
pub enum Struct___kh_fgCursorMap_t { }
pub enum Struct___kh_fgIDHash_t { }
pub type fgInitializer =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut fgElement,
                                                 arg2: *mut fgElement,
                                                 arg3: *mut fgElement,
                                                 arg4: *const ::std::os::raw::c_char,
                                                 arg5: fgFlag,
                                                 arg6: *const fgTransform,
                                                 arg7: ::std::os::raw::c_ushort)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_DEFER_ACTION {
    pub next: *mut Struct__FG_DEFER_ACTION,
    pub prev: *mut Struct__FG_DEFER_ACTION,
    pub action: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)
                                                             -> ::std::os::raw::c_char>,
    pub arg: *mut ::std::os::raw::c_void,
    pub time: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct__FG_DEFER_ACTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_DEFER_ACTION {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgDeferAction = Struct__FG_DEFER_ACTION;
pub enum Struct___kh_fgInitMap_t { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_ROOT {
    pub gui: fgControl,
    pub backend: fgBackend,
    pub monitors: *mut Struct__FG_MONITOR,
    pub updateroot: *mut fgDeferAction,
    pub radiohash: *mut Struct___kh_fgRadioGroup_t,
    pub functionhash: *mut Struct___kh_fgFunctionMap_t,
    pub idmap: *mut Struct___kh_fgIDMap_t,
    pub idhash: *mut Struct___kh_fgIDHash_t,
    pub initmap: *mut Struct___kh_fgInitMap_t,
    pub cursormap: *mut Struct___kh_fgCursorMap_t,
    pub dpi: fgIntVec,
    pub lineheight: ::std::os::raw::c_float,
    pub fontscale: ::std::os::raw::c_float,
    pub time: ::std::os::raw::c_double,
    pub cursor: ::std::os::raw::c_uint,
    pub cursorblink: ::std::os::raw::c_double,
    pub mouse: fgMouseState,
    pub dragtype: ::std::os::raw::c_char,
    pub dragdata: *mut ::std::os::raw::c_void,
    pub dragdraw: *mut fgElement,
    pub topmost: *mut fgElement,
    pub keys: [::std::os::raw::c_uint; 8usize],
    pub aniroot: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__FG_ROOT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_ROOT {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgRoot = Struct__FG_ROOT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_SLIDER {
    pub control: fgControl,
    pub slider: fgElement,
    pub range: size_t,
    pub value: size_t,
}
impl ::std::clone::Clone for Struct__FG_SLIDER {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_SLIDER {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgSlider = Struct__FG_SLIDER;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub control: fgControl,
    pub header: fgBox,
    pub selected: *mut fgElement,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgTabcontrol = Struct_Unnamed21;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGTOOLBAR_FLAGS {
    FGTOOLBAR_LOCKED = 512,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_TOOLGROUP {
    pub control: fgControl,
}
impl ::std::clone::Clone for Struct__FG_TOOLGROUP {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_TOOLGROUP {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgToolGroup = Struct__FG_TOOLGROUP;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_TOOLBAR {
    pub control: fgControl,
    pub seperator: fgElement,
}
impl ::std::clone::Clone for Struct__FG_TOOLBAR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_TOOLBAR {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgToolbar = Struct__FG_TOOLBAR;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGWINDOW_FLAGS {
    FGWINDOW_MINIMIZABLE = 512,
    FGWINDOW_MAXIMIZABLE = 1024,
    FGWINDOW_RESIZABLE = 2048,
    FGWINDOW_NOTITLEBAR = 4096,
    FGWINDOW_NOBORDER = 8192,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGWINDOW_ACTIONS {
    FGWINDOW_CLOSE = 0,
    FGWINDOW_MAXIMIZE = 1,
    FGWINDOW_RESTORE = 2,
    FGWINDOW_MINIMIZE = 3,
    FGWINDOW_UNMINIMIZE = 4,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_WINDOW {
    pub control: fgControl,
    pub caption: fgText,
    pub controls: [fgButton; 3usize],
    pub prevrect: CRect,
    pub offset: AbsVec,
    pub dragged: ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__FG_WINDOW {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_WINDOW {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgWindow = Struct__FG_WINDOW;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_FGWORKSPACE_FLAGS {
    FGWORKSPACE_RULERX = 8192,
    FGWORKSPACE_RULERY = 16384,
    FGWORKSPACE_GRIDX = 32768,
    FGWORKSPACE_GRIDY = 65536,
    FGWORKSPACE_SNAPTOX = 131072,
    FGWORKSPACE_SNAPTOY = 262144,
    FGWORKSPACE_CROSSHAIR = 524288,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__FG_WORKSPACE {
    pub scrollbar: fgScrollbar,
    pub rulers: [fgElement; 2usize],
    pub cursors: [fgElement; 2usize],
    pub gridcolor: [::std::os::raw::c_uint; 2usize],
    pub rulercolor: [::std::os::raw::c_uint; 2usize],
    pub crosshaircolor: ::std::os::raw::c_uint,
    pub dpi: fgIntVec,
    pub gridsize: AbsVec,
}
impl ::std::clone::Clone for Struct__FG_WORKSPACE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct__FG_WORKSPACE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fgWorkspace = Struct__FG_WORKSPACE;
#[link(name = "feathergui", kind = "static")]
extern "C" {
    pub static fgColor_NONE: fgColor;
    pub static fgColor_BLACK: fgColor;
    pub static fgColor_WHITE: fgColor;
    pub static fgTransform_DEFAULT: fgTransform;
    pub static fgTransform_EMPTY: fgTransform;
    pub static fgTransform_CENTER: fgTransform;
    pub static CRect_EMPTY: CRect;
    pub static AbsVec_EMPTY: AbsVec;
    pub static fgIntVec_EMPTY: fgIntVec;
    pub static mut fgFocusedWindow: *mut fgElement;
    pub static mut fgLastHover: *mut fgElement;
    pub static mut fgCaptureWindow: *mut fgElement;
}
#[link(name = "feathergui", kind = "static")]
extern "C" {
    pub fn __mingw_get_crt_info() -> *const ::std::os::raw::c_char;
    pub fn exit(_Code: ::std::os::raw::c_int);
    pub fn _exit(_Code: ::std::os::raw::c_int);
    pub fn _Exit(arg1: ::std::os::raw::c_int);
    pub fn abort();
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t,
                    _Line: ::std::os::raw::c_uint);
    pub fn _assert(_Message: *const ::std::os::raw::c_char, _File: *const ::std::os::raw::c_char,
                   _Line: ::std::os::raw::c_uint);
    pub fn _memccpy(_Dst: *mut ::std::os::raw::c_void, _Src: *const ::std::os::raw::c_void,
                    _Val: ::std::os::raw::c_int, _MaxCount: size_t)
                    -> *mut ::std::os::raw::c_void;
    pub fn memchr(_Buf: *const ::std::os::raw::c_void, _Val: ::std::os::raw::c_int,
                  _MaxCount: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn _memicmp(_Buf1: *const ::std::os::raw::c_void, _Buf2: *const ::std::os::raw::c_void,
                    _Size: size_t)
                    -> ::std::os::raw::c_int;
    pub fn _memicmp_l(_Buf1: *const ::std::os::raw::c_void, _Buf2: *const ::std::os::raw::c_void,
                      _Size: size_t, _Locale: _locale_t)
                      -> ::std::os::raw::c_int;
    pub fn memcmp(_Buf1: *const ::std::os::raw::c_void, _Buf2: *const ::std::os::raw::c_void,
                  _Size: size_t)
                  -> ::std::os::raw::c_int;
    pub fn memcpy(_Dst: *mut ::std::os::raw::c_void, _Src: *const ::std::os::raw::c_void,
                  _Size: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memcpy_s(_dest: *mut ::std::os::raw::c_void, _numberOfElements: size_t,
                    _src: *const ::std::os::raw::c_void, _count: size_t)
                    -> errno_t;
    pub fn mempcpy(_Dst: *mut ::std::os::raw::c_void, _Src: *const ::std::os::raw::c_void,
                   _Size: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memset(_Dst: *mut ::std::os::raw::c_void, _Val: ::std::os::raw::c_int, _Size: size_t)
                  -> *mut ::std::os::raw::c_void;
    pub fn memccpy(_Dst: *mut ::std::os::raw::c_void, _Src: *const ::std::os::raw::c_void,
                   _Val: ::std::os::raw::c_int, _Size: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn memicmp(_Buf1: *const ::std::os::raw::c_void, _Buf2: *const ::std::os::raw::c_void,
                   _Size: size_t)
                   -> ::std::os::raw::c_int;
    pub fn _strset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int)
                   -> *mut ::std::os::raw::c_char;
    pub fn _strset_l(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int,
                     _Locale: _locale_t)
                     -> *mut ::std::os::raw::c_char;
    pub fn strcpy(_Dest: *mut ::std::os::raw::c_char, _Source: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strcat(_Dest: *mut ::std::os::raw::c_char, _Source: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strcmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_int;
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
    pub fn strnlen(_Str: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
    pub fn memmove(_Dst: *mut ::std::os::raw::c_void, _Src: *const ::std::os::raw::c_void,
                   _Size: size_t)
                   -> *mut ::std::os::raw::c_void;
    pub fn _strdup(_Src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strchr(_Str: *const ::std::os::raw::c_char, _Val: ::std::os::raw::c_int)
                  -> *mut ::std::os::raw::c_char;
    pub fn _stricmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn _strcmpi(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                    -> ::std::os::raw::c_int;
    pub fn _stricmp_l(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                      _Locale: _locale_t)
                      -> ::std::os::raw::c_int;
    pub fn strcoll(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn _strcoll_l(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                      _Locale: _locale_t)
                      -> ::std::os::raw::c_int;
    pub fn _stricoll(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                     -> ::std::os::raw::c_int;
    pub fn _stricoll_l(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char, _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn _strncoll(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                     _MaxCount: size_t)
                     -> ::std::os::raw::c_int;
    pub fn _strncoll_l(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char, _MaxCount: size_t,
                       _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn _strnicoll(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                      _MaxCount: size_t)
                      -> ::std::os::raw::c_int;
    pub fn _strnicoll_l(_Str1: *const ::std::os::raw::c_char,
                        _Str2: *const ::std::os::raw::c_char, _MaxCount: size_t,
                        _Locale: _locale_t)
                        -> ::std::os::raw::c_int;
    pub fn strcspn(_Str: *const ::std::os::raw::c_char, _Control: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_ulonglong;
    pub fn _strerror(_ErrMsg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strlwr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
                    -> *mut ::std::os::raw::c_char;
    pub fn strncat(_Dest: *mut ::std::os::raw::c_char, _Source: *const ::std::os::raw::c_char,
                   _Count: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strncmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                   _MaxCount: size_t)
                   -> ::std::os::raw::c_int;
    pub fn _strnicmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char,
                     _MaxCount: size_t)
                     -> ::std::os::raw::c_int;
    pub fn _strnicmp_l(_Str1: *const ::std::os::raw::c_char,
                       _Str2: *const ::std::os::raw::c_char, _MaxCount: size_t,
                       _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn strncpy(_Dest: *mut ::std::os::raw::c_char, _Source: *const ::std::os::raw::c_char,
                   _Count: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn _strnset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int,
                    _MaxCount: size_t)
                    -> *mut ::std::os::raw::c_char;
    pub fn _strnset_l(str: *mut ::std::os::raw::c_char, c: ::std::os::raw::c_int, count: size_t,
                      _Locale: _locale_t)
                      -> *mut ::std::os::raw::c_char;
    pub fn strpbrk(_Str: *const ::std::os::raw::c_char, _Control: *const ::std::os::raw::c_char)
                   -> *mut ::std::os::raw::c_char;
    pub fn strrchr(_Str: *const ::std::os::raw::c_char, _Ch: ::std::os::raw::c_int)
                   -> *mut ::std::os::raw::c_char;
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strspn(_Str: *const ::std::os::raw::c_char, _Control: *const ::std::os::raw::c_char)
                  -> ::std::os::raw::c_ulonglong;
    pub fn strstr(_Str: *const ::std::os::raw::c_char, _SubStr: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strtok(_Str: *mut ::std::os::raw::c_char, _Delim: *const ::std::os::raw::c_char)
                  -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(_Str: *mut ::std::os::raw::c_char, _Delim: *const ::std::os::raw::c_char,
                    __last: *mut *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn _strupr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
                     -> *mut ::std::os::raw::c_char;
    pub fn strxfrm(_Dst: *mut ::std::os::raw::c_char, _Src: *const ::std::os::raw::c_char,
                   _MaxCount: size_t)
                   -> ::std::os::raw::c_ulonglong;
    pub fn _strxfrm_l(_Dst: *mut ::std::os::raw::c_char, _Src: *const ::std::os::raw::c_char,
                      _MaxCount: size_t, _Locale: _locale_t)
                      -> size_t;
    pub fn strdup(_Src: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strcmpi(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn stricmp(_Str1: *const ::std::os::raw::c_char, _Str2: *const ::std::os::raw::c_char)
                   -> ::std::os::raw::c_int;
    pub fn strlwr(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strnicmp(_Str1: *const ::std::os::raw::c_char, _Str: *const ::std::os::raw::c_char,
                    _MaxCount: size_t)
                    -> ::std::os::raw::c_int;
    pub fn strncasecmp(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char,
                       arg3: size_t)
                       -> ::std::os::raw::c_int;
    pub fn strcasecmp(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char)
                      -> ::std::os::raw::c_int;
    pub fn strnset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int,
                   _MaxCount: size_t)
                   -> *mut ::std::os::raw::c_char;
    pub fn strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn strset(_Str: *mut ::std::os::raw::c_char, _Val: ::std::os::raw::c_int)
                  -> *mut ::std::os::raw::c_char;
    pub fn strupr(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn _wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
    pub fn wcscat(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
    pub fn wcschr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
    pub fn wcscmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn wcscpy(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
    pub fn wcscspn(_Str: *const wchar_t, _Control: *const wchar_t) -> size_t;
    pub fn wcslen(_Str: *const wchar_t) -> size_t;
    pub fn wcsnlen(_Src: *const wchar_t, _MaxCount: size_t) -> size_t;
    pub fn wcsncat(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: size_t) -> *mut wchar_t;
    pub fn wcsncmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t)
                   -> ::std::os::raw::c_int;
    pub fn wcsncpy(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: size_t) -> *mut wchar_t;
    pub fn _wcsncpy_l(_Dest: *mut wchar_t, _Source: *const wchar_t, _Count: size_t,
                      _Locale: _locale_t)
                      -> *mut wchar_t;
    pub fn wcspbrk(_Str: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
    pub fn wcsspn(_Str: *const wchar_t, _Control: *const wchar_t) -> size_t;
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
    pub fn wcstok(_Str: *mut wchar_t, _Delim: *const wchar_t) -> *mut wchar_t;
    pub fn _wcserror(_ErrNum: ::std::os::raw::c_int) -> *mut wchar_t;
    pub fn __wcserror(_Str: *const wchar_t) -> *mut wchar_t;
    pub fn _wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wcsicmp_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t)
                      -> ::std::os::raw::c_int;
    pub fn _wcsnicmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t)
                     -> ::std::os::raw::c_int;
    pub fn _wcsnicmp_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t,
                       _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn _wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
    pub fn _wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
    pub fn _wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
    pub fn wcsxfrm(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: size_t) -> size_t;
    pub fn _wcsxfrm_l(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: size_t,
                      _Locale: _locale_t)
                      -> size_t;
    pub fn wcscoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wcscoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t)
                      -> ::std::os::raw::c_int;
    pub fn _wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _wcsicoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn _wcsncoll(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t)
                     -> ::std::os::raw::c_int;
    pub fn _wcsncoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t,
                       _Locale: _locale_t)
                       -> ::std::os::raw::c_int;
    pub fn _wcsnicoll(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t)
                      -> ::std::os::raw::c_int;
    pub fn _wcsnicoll_l(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t,
                        _Locale: _locale_t)
                        -> ::std::os::raw::c_int;
    pub fn wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
    pub fn wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn wcsnicmp(_Str1: *const wchar_t, _Str2: *const wchar_t, _MaxCount: size_t)
                    -> ::std::os::raw::c_int;
    pub fn wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
    pub fn wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
    pub fn wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
    pub fn wcslwr(_Str: *mut wchar_t) -> *mut wchar_t;
    pub fn wcsupr(_Str: *mut wchar_t) -> *mut wchar_t;
    pub fn wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::std::os::raw::c_int;
    pub fn _strset_s(_Dst: *mut ::std::os::raw::c_char, _DstSize: size_t,
                     _Value: ::std::os::raw::c_int)
                     -> errno_t;
    pub fn _strerror_s(_Buf: *mut ::std::os::raw::c_char, _SizeInBytes: size_t,
                       _ErrMsg: *const ::std::os::raw::c_char)
                       -> errno_t;
    pub fn strerror_s(_Buf: *mut ::std::os::raw::c_char, _SizeInBytes: size_t,
                      _ErrNum: ::std::os::raw::c_int)
                      -> errno_t;
    pub fn _strlwr_s(_Str: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
    pub fn _strlwr_s_l(_Str: *mut ::std::os::raw::c_char, _Size: size_t, _Locale: _locale_t)
                       -> errno_t;
    pub fn _strnset_s(_Str: *mut ::std::os::raw::c_char, _Size: size_t,
                      _Val: ::std::os::raw::c_int, _MaxCount: size_t)
                      -> errno_t;
    pub fn _strupr_s(_Str: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
    pub fn _strupr_s_l(_Str: *mut ::std::os::raw::c_char, _Size: size_t, _Locale: _locale_t)
                       -> errno_t;
    pub fn strncat_s(_Dst: *mut ::std::os::raw::c_char, _DstSizeInChars: size_t,
                     _Src: *const ::std::os::raw::c_char, _MaxCount: size_t)
                     -> errno_t;
    pub fn _strncat_s_l(_Dst: *mut ::std::os::raw::c_char, _DstSizeInChars: size_t,
                        _Src: *const ::std::os::raw::c_char, _MaxCount: size_t,
                        _Locale: _locale_t)
                        -> errno_t;
    pub fn strcpy_s(_Dst: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _Src: *const ::std::os::raw::c_char)
                    -> errno_t;
    pub fn strncpy_s(_Dst: *mut ::std::os::raw::c_char, _DstSizeInChars: size_t,
                     _Src: *const ::std::os::raw::c_char, _MaxCount: size_t)
                     -> errno_t;
    pub fn _strncpy_s_l(_Dst: *mut ::std::os::raw::c_char, _DstSizeInChars: size_t,
                        _Src: *const ::std::os::raw::c_char, _MaxCount: size_t,
                        _Locale: _locale_t)
                        -> errno_t;
    pub fn strtok_s(_Str: *mut ::std::os::raw::c_char, _Delim: *const ::std::os::raw::c_char,
                    _Context: *mut *mut ::std::os::raw::c_char)
                    -> *mut ::std::os::raw::c_char;
    pub fn _strtok_s_l(_Str: *mut ::std::os::raw::c_char, _Delim: *const ::std::os::raw::c_char,
                       _Context: *mut *mut ::std::os::raw::c_char, _Locale: _locale_t)
                       -> *mut ::std::os::raw::c_char;
    pub fn strcat_s(_Dst: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _Src: *const ::std::os::raw::c_char)
                    -> errno_t;
    pub fn memmove_s(_dest: *mut ::std::os::raw::c_void, _numberOfElements: size_t,
                     _src: *const ::std::os::raw::c_void, _count: size_t)
                     -> errno_t;
    pub fn wcstok_s(_Str: *mut wchar_t, _Delim: *const wchar_t, _Context: *mut *mut wchar_t)
                    -> *mut wchar_t;
    pub fn _wcserror_s(_Buf: *mut wchar_t, _SizeInWords: size_t, _ErrNum: ::std::os::raw::c_int)
                       -> errno_t;
    pub fn __wcserror_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _ErrMsg: *const wchar_t)
                        -> errno_t;
    pub fn _wcsnset_s(_Dst: *mut wchar_t, _DstSizeInWords: size_t, _Val: wchar_t,
                      _MaxCount: size_t)
                      -> errno_t;
    pub fn _wcsset_s(_Str: *mut wchar_t, _SizeInWords: size_t, _Val: wchar_t) -> errno_t;
    pub fn _wcslwr_s(_Str: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
    pub fn _wcslwr_s_l(_Str: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
    pub fn _wcsupr_s(_Str: *mut wchar_t, _Size: size_t) -> errno_t;
    pub fn _wcsupr_s_l(_Str: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
    pub fn wcscpy_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
    pub fn wcscat_s(_Dst: *mut wchar_t, _SizeInWords: rsize_t, _Src: *const wchar_t) -> errno_t;
    pub fn wcsncat_s(_Dst: *mut wchar_t, _DstSizeInChars: size_t, _Src: *const wchar_t,
                     _MaxCount: size_t)
                     -> errno_t;
    pub fn _wcsncat_s_l(_Dst: *mut wchar_t, _DstSizeInChars: size_t, _Src: *const wchar_t,
                        _MaxCount: size_t, _Locale: _locale_t)
                        -> errno_t;
    pub fn wcsncpy_s(_Dst: *mut wchar_t, _DstSizeInChars: size_t, _Src: *const wchar_t,
                     _MaxCount: size_t)
                     -> errno_t;
    pub fn _wcsncpy_s_l(_Dst: *mut wchar_t, _DstSizeInChars: size_t, _Src: *const wchar_t,
                        _MaxCount: size_t, _Locale: _locale_t)
                        -> errno_t;
    pub fn _wcstok_s_l(_Str: *mut wchar_t, _Delim: *const wchar_t, _Context: *mut *mut wchar_t,
                       _Locale: _locale_t)
                       -> *mut wchar_t;
    pub fn _wcsset_s_l(_Str: *mut wchar_t, _SizeInChars: size_t, _Val: ::std::os::raw::c_uint,
                       _Locale: _locale_t)
                       -> errno_t;
    pub fn _wcsnset_s_l(_Str: *mut wchar_t, _SizeInChars: size_t, _Val: ::std::os::raw::c_uint,
                        _Count: size_t, _Locale: _locale_t)
                        -> errno_t;
    pub fn wcsnlen_s(_src: *const wchar_t, _count: size_t) -> size_t;
    pub fn _errno() -> *mut ::std::os::raw::c_int;
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
    pub fn __threadid() -> ::std::os::raw::c_ulong;
    pub fn __threadhandle() -> uintptr_t;
    pub fn ResolveVec(v: *const CVec, last: *const AbsRect) -> AbsVec;
    pub fn CompareMargins(l: *const AbsRect, r: *const AbsRect) -> ::std::os::raw::c_char;
    pub fn CompareCRects(l: *const CRect, r: *const CRect) -> ::std::os::raw::c_char;
    pub fn CompareTransforms(l: *const fgTransform, r: *const fgTransform)
                             -> ::std::os::raw::c_char;
    pub fn MoveCRect(x: FABS, y: FABS, r: *mut CRect);
    pub fn HitAbsRect(r: *const AbsRect, x: FABS, y: FABS) -> ::std::os::raw::c_char;
    pub fn ToIntAbsRect(r: *const AbsRect, target: *mut ::std::os::raw::c_int);
    pub fn ToLongAbsRect(r: *const AbsRect, target: *mut ::std::os::raw::c_long);
    pub fn MsgHitAbsRect(msg: *const FG_Msg, r: *const AbsRect) -> ::std::os::raw::c_char;
    pub fn fgCopyText(text: *const ::std::os::raw::c_char, file: *const ::std::os::raw::c_char,
                      line: size_t)
                      -> *mut ::std::os::raw::c_char;
    pub fn fgUpdateMouseState(state: *mut fgMouseState, msg: *const FG_Msg);
    pub fn fgRectIntersect(l: *const AbsRect, r: *const AbsRect) -> ::std::os::raw::c_char;
    pub fn fgRectIntersection(l: *const AbsRect, r: *const AbsRect, out: *mut AbsRect);
    pub fn fgUTF32toUTF16(input: *const ::std::os::raw::c_int, srclen: ptrdiff_t,
                          output: *mut wchar_t, buflen: size_t)
                          -> size_t;
    pub fn fgUTF8toUTF16(input: *const ::std::os::raw::c_char, srclen: ptrdiff_t,
                         output: *mut wchar_t, buflen: size_t)
                         -> size_t;
    pub fn fgUTF16toUTF8(input: *const wchar_t, srclen: ptrdiff_t,
                         output: *mut ::std::os::raw::c_char, buflen: size_t)
                         -> size_t;
    pub fn fgUTF8toUTF32(input: *const ::std::os::raw::c_char, srclen: ptrdiff_t,
                         output: *mut ::std::os::raw::c_int, buflen: size_t)
                         -> size_t;
    pub fn fgUTF32toUTF8(input: *const ::std::os::raw::c_int, srclen: ptrdiff_t,
                         output: *mut ::std::os::raw::c_char, buflen: size_t)
                         -> size_t;
    pub fn fgUTF16toUTF32(input: *const wchar_t, srclen: ptrdiff_t,
                          output: *mut ::std::os::raw::c_int, buflen: size_t)
                          -> size_t;
    pub fn fgElement_InternalSetup(_self: *mut fgElement,
                                   parent: *mut fgElement,
                                   next: *mut fgElement,
                                   name: *const ::std::os::raw::c_char,
                                   flags: fgFlag,
                                   transform: *const fgTransform,
                                   units: ::std::os::raw::c_ushort,
                                   destroy:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut ::std::os::raw::c_void)>,
                                   message:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  arg2:
                                                                                      *const FG_Msg)
                                                                 -> size_t>);
    pub fn fgElement_Init(_self: *mut fgElement, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgElement_Destroy(_self: *mut fgElement);
    pub fn fgElement_Message(_self: *mut fgElement, msg: *const FG_Msg) -> size_t;
    pub fn fgElement_GetChildUnderMouse(_self: *mut fgElement, x: ::std::os::raw::c_int,
                                        y: ::std::os::raw::c_int, cache: *mut AbsRect)
                                        -> *mut fgElement;
    pub fn fgElement_ClearListeners(_self: *mut fgElement);
    pub fn fgElement_CheckLastFocus(_self: *mut fgElement) -> size_t;
    pub fn fgDimMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                        subtype: ::std::os::raw::c_ushort, x: ::std::os::raw::c_float,
                        y: ::std::os::raw::c_float)
                        -> size_t;
    pub fn fgFloatMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                          subtype: ::std::os::raw::c_ushort, data: ::std::os::raw::c_float,
                          aux: ptrdiff_t)
                          -> size_t;
    pub fn fgGetFloatMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                             subtype: ::std::os::raw::c_ushort, aux: ptrdiff_t)
                             -> ::std::os::raw::c_float;
    pub fn fgIntMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort, data: ptrdiff_t,
                        aux: size_t)
                        -> size_t;
    pub fn fgVoidMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                         data: *mut ::std::os::raw::c_void, aux: ptrdiff_t)
                         -> size_t;
    pub fn fgPassMessage(_self: *mut fgElement, msg: *const FG_Msg) -> size_t;
    pub fn fgSubMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                        subtype: ::std::os::raw::c_ushort, data: *mut ::std::os::raw::c_void,
                        aux: ptrdiff_t)
                        -> size_t;
    pub fn fgGetPtrMessage(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                           subtype: ::std::os::raw::c_ushort, data: size_t, aux: size_t)
                           -> *mut ::std::os::raw::c_void;
    pub fn ResolveOuterRect(_self: *const fgElement, out: *mut AbsRect);
    pub fn ResolveOuterRectCache(_self: *const fgElement, out: *mut AbsRect,
                                 last: *const AbsRect, padding: *const AbsRect);
    pub fn ResolveRect(_self: *const fgElement, out: *mut AbsRect);
    pub fn ResolveRectCache(_self: *const fgElement, out: *mut AbsRect, last: *const AbsRect,
                            padding: *const AbsRect);
    pub fn ResolveInnerRect(_self: *const fgElement, out: *mut AbsRect);
    pub fn GetInnerRect(_self: *const fgElement, inner: *mut AbsRect, standard: *const AbsRect);
    pub fn ResolveNoClipRect(_self: *const fgElement, out: *mut AbsRect);
    pub fn MsgHitElement(msg: *const FG_Msg, element: *const fgElement) -> ::std::os::raw::c_char;
    pub fn VirtualFreeChild(_self: *mut fgElement);
    pub fn fgElement_Clear(_self: *mut fgElement);
    pub fn fgElement_MouseMoveCheck(_self: *mut fgElement);
    pub fn fgElement_AddListener(_self: *mut fgElement, _type: ::std::os::raw::c_ushort,
                                 listener: fgListener);
    pub fn fgInitialize() -> *mut Struct__FG_ROOT;
    pub fn fgCreateFontDefault(flags: fgFlag, font: *const ::std::os::raw::c_char,
                               fontsize: ::std::os::raw::c_uint, dpi: *const fgIntVec)
                               -> *mut ::std::os::raw::c_void;
    pub fn fgCloneFontDefault(font: *mut ::std::os::raw::c_void,
                              desc: *const Struct__FG_FONT_DESC)
                              -> *mut ::std::os::raw::c_void;
    pub fn fgDestroyFontDefault(font: *mut ::std::os::raw::c_void);
    pub fn fgDrawFontDefault(font: *mut ::std::os::raw::c_void,
                             text: *const ::std::os::raw::c_void, len: size_t,
                             lineheight: ::std::os::raw::c_float,
                             letterspacing: ::std::os::raw::c_float,
                             color: ::std::os::raw::c_uint, area: *const AbsRect, rotation: FABS,
                             center: *const AbsVec, flags: fgFlag, data: *const fgDrawAuxData,
                             layout: *mut ::std::os::raw::c_void);
    pub fn fgFontLayoutDefault(font: *mut ::std::os::raw::c_void,
                               text: *const ::std::os::raw::c_void, len: size_t,
                               lineheight: ::std::os::raw::c_float,
                               letterspacing: ::std::os::raw::c_float, area: *mut AbsRect,
                               flag: fgFlag, prevlayouts: *mut ::std::os::raw::c_void)
                               -> *mut ::std::os::raw::c_void;
    pub fn fgFontGetDefault(font: *mut ::std::os::raw::c_void, desc: *mut Struct__FG_FONT_DESC);
    pub fn fgFontIndexDefault(font: *mut ::std::os::raw::c_void,
                              text: *const ::std::os::raw::c_void, len: size_t,
                              lineheight: ::std::os::raw::c_float,
                              letterspacing: ::std::os::raw::c_float, area: *const AbsRect,
                              flags: fgFlag, pos: AbsVec, cursor: *mut AbsVec,
                              cache: *mut ::std::os::raw::c_void)
                              -> size_t;
    pub fn fgFontPosDefault(font: *mut ::std::os::raw::c_void,
                            text: *const ::std::os::raw::c_void, len: size_t,
                            lineheight: ::std::os::raw::c_float,
                            letterspacing: ::std::os::raw::c_float, area: *const AbsRect,
                            flags: fgFlag, index: size_t, cache: *mut ::std::os::raw::c_void)
                            -> AbsVec;
    pub fn fgCreateAssetDefault(flags: fgFlag, data: *const ::std::os::raw::c_char,
                                length: size_t)
                                -> fgAsset;
    pub fn fgCloneAssetDefault(asset: fgAsset, src: *mut fgElement) -> fgAsset;
    pub fn fgDestroyAssetDefault(asset: fgAsset);
    pub fn fgDrawAssetDefault(asset: fgAsset, uv: *const CRect, color: ::std::os::raw::c_uint,
                              edge: ::std::os::raw::c_uint, outline: FABS, area: *const AbsRect,
                              rotation: FABS, center: *const AbsVec, flags: fgFlag,
                              data: *const fgDrawAuxData);
    pub fn fgAssetSizeDefault(asset: fgAsset, uv: *const CRect, dim: *mut AbsVec, flags: fgFlag);
    pub fn fgDrawLinesDefault(p: *const AbsVec, n: size_t, color: ::std::os::raw::c_uint,
                              translate: *const AbsVec, scale: *const AbsVec, rotation: FABS,
                              center: *const AbsVec, data: *const fgDrawAuxData);
    pub fn fgCreateDefault(_type: *const ::std::os::raw::c_char, parent: *mut fgElement,
                           next: *mut fgElement, name: *const ::std::os::raw::c_char,
                           flags: fgFlag, transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort)
                           -> *mut fgElement;
    pub fn fgMessageMapDefault(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_short;
    pub fn fgUserDataMapDefault(_self: *mut fgElement, pairs: *mut Struct___VECTOR__KeyValue);
    pub fn fgUserDataMapDefaultProcess(_self: *mut fgElement, pair: *mut Struct__FG_KEY_VALUE);
    pub fn fgUserDataMapCallbacks(_self: *mut fgElement, pairs: *mut Struct___VECTOR__KeyValue);
    pub fn fgUserDataMapCallbacksProcess(_self: *mut fgElement, pair: *mut Struct__FG_KEY_VALUE);
    pub fn fgPushClipRectDefault(clip: *const AbsRect, data: *const fgDrawAuxData);
    pub fn fgPeekClipRectDefault(data: *const fgDrawAuxData) -> AbsRect;
    pub fn fgPopClipRectDefault(data: *const fgDrawAuxData);
    pub fn fgDragStartDefault(_type: ::std::os::raw::c_char, data: *mut ::std::os::raw::c_void,
                              draw: *mut fgElement);
    pub fn fgSetCursorDefault(_type: ::std::os::raw::c_uint, custom: *mut ::std::os::raw::c_void);
    pub fn fgClipboardCopyDefault(_type: ::std::os::raw::c_uint,
                                  data: *const ::std::os::raw::c_void, length: size_t);
    pub fn fgClipboardExistsDefault(_type: ::std::os::raw::c_uint) -> ::std::os::raw::c_char;
    pub fn fgClipboardPasteDefault(_type: ::std::os::raw::c_uint, length: *mut size_t)
                                   -> *const ::std::os::raw::c_void;
    pub fn fgClipboardFreeDefault(mem: *const ::std::os::raw::c_void);
    pub fn fgDirtyElementDefault(elem: *mut fgElement);
    pub fn fgBehaviorHookDefault(_self: *mut fgElement, msg: *const FG_Msg) -> size_t;
    pub fn fgBehaviorHookListener(_self: *mut fgElement, msg: *const FG_Msg) -> size_t;
    pub fn fgProcessMessagesDefault() -> ::std::os::raw::c_char;
    pub fn fgLoadExtensionDefault(extname: *const ::std::os::raw::c_char,
                                  fg: *mut ::std::os::raw::c_void, sz: size_t)
                                  -> size_t;
    pub fn fgTerminateDefault();
    pub fn fgLoadBackend(dll: *const ::std::os::raw::c_char) -> *mut Struct__FG_ROOT;
    pub fn fgUnloadBackend();
    pub fn fgControl_Init(_self: *mut fgControl, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgControl_Destroy(_self: *mut fgControl);
    pub fn fgControl_Message(_self: *mut fgControl, msg: *const FG_Msg) -> size_t;
    pub fn fgControl_HoverMessage(_self: *mut fgControl, msg: *const FG_Msg) -> size_t;
    pub fn fgControl_ActionMessage(_self: *mut fgControl, msg: *const FG_Msg) -> size_t;
    pub fn fgControl_TabAfter(_self: *mut fgControl, prev: *mut fgControl);
    pub fn fgControl_TabBefore(_self: *mut fgControl, next: *mut fgControl);
    pub fn fgElement_DoHoverCalc(_self: *mut fgElement);
    pub fn fgText_Create(text: *mut ::std::os::raw::c_char, font: fgFont,
                         color: ::std::os::raw::c_uint, parent: *mut fgElement,
                         next: *mut fgElement, name: *const ::std::os::raw::c_char,
                         flags: fgFlag, transform: *const fgTransform,
                         units: ::std::os::raw::c_ushort)
                         -> *mut fgElement;
    pub fn fgText_Init(_self: *mut fgText, parent: *mut fgElement, next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgText_Destroy(_self: *mut fgText);
    pub fn fgText_Message(_self: *mut fgText, msg: *const FG_Msg) -> size_t;
    pub fn fgText_Recalc(_self: *mut fgText);
    pub fn fgButton_Init(_self: *mut fgButton, parent: *mut fgElement, next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgButton_Destroy(_self: *mut fgButton);
    pub fn fgButton_Message(_self: *mut fgButton, msg: *const FG_Msg) -> size_t;
    pub fn fgScrollbar_Init(_self: *mut fgScrollbar, parent: *mut fgElement,
                            next: *mut fgElement, name: *const ::std::os::raw::c_char,
                            flags: fgFlag, transform: *const fgTransform,
                            units: ::std::os::raw::c_ushort);
    pub fn fgScrollbar_Destroy(_self: *mut fgScrollbar);
    pub fn fgScrollbar_Message(_self: *mut fgScrollbar, msg: *const FG_Msg) -> size_t;
    pub fn fgBox_Init(_self: *mut fgBox, parent: *mut fgElement, next: *mut fgElement,
                      name: *const ::std::os::raw::c_char, flags: fgFlag,
                      transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgBox_Destroy(_self: *mut fgBox);
    pub fn fgBox_Message(_self: *mut fgBox, msg: *const FG_Msg) -> size_t;
    pub fn fgBoxOrderedElement_Destroy(_self: *mut Struct__FG_BOX_ORDERED_ELEMENTS_);
    pub fn fgBoxOrderedElement_Message(_self: *mut Struct__FG_BOX_ORDERED_ELEMENTS_,
                                       msg: *const FG_Msg, element: *mut fgElement,
                                       callback: fgMessage)
                                       -> size_t;
    pub fn fgCheckbox_Init(_self: *mut fgCheckbox, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgCheckbox_Destroy(_self: *mut fgCheckbox);
    pub fn fgCheckbox_Message(_self: *mut fgCheckbox, msg: *const FG_Msg) -> size_t;
    pub fn fgTextbox_Init(_self: *mut fgTextbox, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgTextbox_Destroy(_self: *mut fgTextbox);
    pub fn fgTextbox_Message(_self: *mut fgTextbox, msg: *const FG_Msg) -> size_t;
    pub fn fgDropdown_Init(_self: *mut fgDropdown, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgDropdown_Destroy(_self: *mut fgDropdown);
    pub fn fgDropdown_Message(_self: *mut fgDropdown, msg: *const FG_Msg) -> size_t;
    pub fn fgCombobox_Init(_self: *mut fgCombobox, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgCombobox_Destroy(_self: *mut fgCombobox);
    pub fn fgCombobox_Message(_self: *mut fgCombobox, msg: *const FG_Msg) -> size_t;
    pub fn fgCurve_Create(points: *const AbsVec, npoints: size_t, color: ::std::os::raw::c_uint,
                          parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort)
                          -> *mut fgElement;
    pub fn fgCurve_Init(_self: *mut fgCurve, parent: *mut fgElement, next: *mut fgElement,
                        name: *const ::std::os::raw::c_char, flags: fgFlag,
                        transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgCurve_Destroy(_self: *mut fgCurve);
    pub fn fgCurve_Message(_self: *mut fgCurve, msg: *const FG_Msg) -> size_t;
    pub fn fgTreeview_Init(_self: *mut fgTreeview, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgTreeview_Destroy(_self: *mut fgTreeview);
    pub fn fgTreeview_Message(_self: *mut fgTreeview, msg: *const FG_Msg) -> size_t;
    pub fn fgTreeItem_Init(_self: *mut fgTreeItem, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgTreeItem_Message(_self: *mut fgTreeItem, msg: *const FG_Msg) -> size_t;
    pub fn fgTreeItem_Destroy(_self: *mut fgTreeItem);
    pub fn fgMenu_Init(_self: *mut fgMenu, parent: *mut fgElement, next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgMenu_Destroy(_self: *mut fgMenu);
    pub fn fgMenu_Message(_self: *mut fgMenu, msg: *const FG_Msg) -> size_t;
    pub fn fgSubmenu_Init(_self: *mut fgMenu, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgSubmenu_Message(_self: *mut fgMenu, msg: *const FG_Msg) -> size_t;
    pub fn fgMenuItem_Init(_self: *mut fgMenuItem, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgMenuItem_Message(_self: *mut fgMenuItem, msg: *const FG_Msg) -> size_t;
    pub fn fgList_Init(_self: *mut fgList, parent: *mut fgElement, next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgList_Destroy(_self: *mut fgList);
    pub fn fgList_Message(_self: *mut fgList, msg: *const FG_Msg) -> size_t;
    pub fn fgListItem_Init(_self: *mut fgControl, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgListItem_Message(_self: *mut fgControl, msg: *const FG_Msg) -> size_t;
    pub fn fgGrid_Init(_self: *mut fgGrid, parent: *mut fgElement, next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgGrid_Destroy(_self: *mut fgGrid);
    pub fn fgGrid_Message(_self: *mut fgGrid, msg: *const FG_Msg) -> size_t;
    pub fn fgGridRow_Init(_self: *mut fgGridRow, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgGridRow_Message(_self: *mut fgGridRow, msg: *const FG_Msg) -> size_t;
    pub fn fgGridRow_Destroy(_self: *mut fgGridRow);
    pub fn fgDebug_Init(_self: *mut fgDebug, parent: *mut fgElement, next: *mut fgElement,
                        name: *const ::std::os::raw::c_char, flags: fgFlag,
                        transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgDebug_Destroy(_self: *mut fgDebug);
    pub fn fgDebug_Message(_self: *mut fgDebug, msg: *const FG_Msg) -> size_t;
    pub fn fgDebug_ClearLog(_self: *mut fgDebug);
    pub fn fgDebug_Show(left: ::std::os::raw::c_float, right: ::std::os::raw::c_float,
                        overlay: ::std::os::raw::c_char);
    pub fn fgDebug_Hide();
    pub fn fgDebug_Get() -> *mut fgDebug;
    pub fn fgDebug_LogMessage(_self: *mut fgDebug, msg: *const FG_Msg,
                              time: ::std::os::raw::c_ulonglong, depth: size_t)
                              -> size_t;
    pub fn fgDebug_WriteMessage(buf: *mut ::std::os::raw::c_char, bufsize: size_t,
                                msg: *mut fgDebugMessage)
                                -> ptrdiff_t;
    pub fn fgDebug_DumpMessages(file: *const ::std::os::raw::c_char);
    pub fn fgDebug_BuildTree(treeview: *mut fgElement);
    pub fn fgRoot_BehaviorDebug(_self: *mut fgElement, msg: *const FG_Msg) -> size_t;
    pub fn fgStyle_Init(_self: *mut fgStyle);
    pub fn fgStyle_Destroy(_self: *mut fgStyle);
    pub fn fgStyle_GetName(name: *const ::std::os::raw::c_char, flag: ::std::os::raw::c_char)
                           -> FG_UINT;
    pub fn fgStyle_AddStyleMsg(_self: *mut fgStyle, msg: *const FG_Msg,
                               arg1: *const ::std::os::raw::c_void, arglen1: size_t,
                               arg2: *const ::std::os::raw::c_void, arglen2: size_t)
                               -> *mut fgStyleMsg;
    pub fn fgStyle_RemoveStyleMsg(_self: *mut fgStyle, msg: *mut fgStyleMsg);
    pub fn fgSkin_Init(_self: *mut fgSkin);
    pub fn fgSkin_Destroy(_self: *mut fgSkin);
    pub fn fgSkin_AddChild(_self: *mut fgSkin, _type: *const ::std::os::raw::c_char,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_short,
                           order: ::std::os::raw::c_int)
                           -> size_t;
    pub fn fgSkin_RemoveChild(_self: *mut fgSkin, child: FG_UINT) -> ::std::os::raw::c_char;
    pub fn fgSkin_GetChild(_self: *const fgSkin, child: FG_UINT) -> *mut fgStyleLayout;
    pub fn fgSkin_AddStyle(_self: *mut fgSkin, name: *const ::std::os::raw::c_char) -> FG_UINT;
    pub fn fgSkin_RemoveStyle(_self: *mut fgSkin, style: FG_UINT) -> ::std::os::raw::c_char;
    pub fn fgSkin_GetStyle(_self: *const fgSkin, style: FG_UINT) -> *mut fgStyle;
    pub fn fgSkin_GetSkin(_self: *const fgSkin, name: *const ::std::os::raw::c_char)
                          -> *mut fgSkin;
    pub fn fgSkinBase_Destroy(_self: *mut fgSkinBase);
    pub fn fgSkinBase_AddSkin(_self: *mut fgSkinBase, name: *const ::std::os::raw::c_char)
                              -> *mut fgSkin;
    pub fn fgSkinBase_RemoveSkin(_self: *mut fgSkinBase, name: *const ::std::os::raw::c_char)
                                 -> ::std::os::raw::c_char;
    pub fn fgSkinBase_GetSkin(_self: *const fgSkinBase, name: *const ::std::os::raw::c_char)
                              -> *mut fgSkin;
    pub fn fgSkinBase_AddAsset(_self: *mut fgSkinBase, asset: *mut ::std::os::raw::c_void)
                               -> size_t;
    pub fn fgSkinBase_RemoveAsset(_self: *mut fgSkinBase, asset: FG_UINT)
                                  -> ::std::os::raw::c_char;
    pub fn fgSkinBase_GetAsset(_self: *const fgSkinBase, asset: FG_UINT)
                               -> *mut ::std::os::raw::c_void;
    pub fn fgSkinBase_AddFont(_self: *mut fgSkinBase, font: *mut ::std::os::raw::c_void) -> size_t;
    pub fn fgSkinBase_RemoveFont(_self: *mut fgSkinBase, font: FG_UINT) -> ::std::os::raw::c_char;
    pub fn fgSkinBase_GetFont(_self: *const fgSkinBase, font: FG_UINT)
                              -> *mut ::std::os::raw::c_void;
    pub fn fgSkinBase_GetFlagsFromString(s: *const ::std::os::raw::c_char, remove: *mut fgFlag)
                                         -> fgFlag;
    pub fn fgSkinBase_LoadFileUBJSON(_self: *mut fgSkinBase, file: *const ::std::os::raw::c_char)
                                     -> *mut fgSkin;
    pub fn fgSkinBase_LoadUBJSON(_self: *mut fgSkinBase, data: *const ::std::os::raw::c_void,
                                 length: FG_UINT)
                                 -> *mut fgSkin;
    pub fn fgSkinBase_LoadFileXML(_self: *mut fgSkinBase, file: *const ::std::os::raw::c_char)
                                  -> *mut fgSkin;
    pub fn fgSkinBase_LoadXML(_self: *mut fgSkinBase, data: *const ::std::os::raw::c_char,
                              length: FG_UINT)
                              -> *mut fgSkin;
    pub fn fgStyleLayout_Init(_self: *mut fgStyleLayout, _type: *const ::std::os::raw::c_char,
                              name: *const ::std::os::raw::c_char, flags: fgFlag,
                              transform: *const fgTransform, units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int);
    pub fn fgStyleLayout_Destroy(_self: *mut fgStyleLayout);
    pub fn fgLayout_Init(_self: *mut fgLayout);
    pub fn fgLayout_Destroy(_self: *mut fgLayout);
    pub fn fgLayout_AddLayout(_self: *mut fgLayout, _type: *const ::std::os::raw::c_char,
                              name: *const ::std::os::raw::c_char, flags: fgFlag,
                              transform: *const fgTransform, units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int)
                              -> FG_UINT;
    pub fn fgLayout_RemoveLayout(_self: *mut fgLayout, layout: FG_UINT) -> ::std::os::raw::c_char;
    pub fn fgLayout_GetLayout(_self: *const fgLayout, layout: FG_UINT) -> *mut fgClassLayout;
    pub fn fgLayout_LoadFileUBJSON(_self: *mut fgLayout, file: *const ::std::os::raw::c_char);
    pub fn fgLayout_LoadUBJSON(_self: *mut fgLayout, data: *const ::std::os::raw::c_char,
                               length: FG_UINT);
    pub fn fgLayout_SaveFileUBJSON(_self: *mut fgLayout, file: *const ::std::os::raw::c_char);
    pub fn fgLayout_LoadFileXML(_self: *mut fgLayout, file: *const ::std::os::raw::c_char)
                                -> ::std::os::raw::c_char;
    pub fn fgLayout_LoadXML(_self: *mut fgLayout, data: *const ::std::os::raw::c_char,
                            length: FG_UINT)
                            -> ::std::os::raw::c_char;
    pub fn fgLayout_SaveFileXML(_self: *mut fgLayout, file: *const ::std::os::raw::c_char);
    pub fn fgLayout_SaveElementXML(root: *mut fgElement, file: *const ::std::os::raw::c_char);
    pub fn fgClassLayout_Init(_self: *mut fgClassLayout, _type: *const ::std::os::raw::c_char,
                              name: *const ::std::os::raw::c_char, flags: fgFlag,
                              transform: *const fgTransform, units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int);
    pub fn fgClassLayout_Destroy(_self: *mut fgClassLayout);
    pub fn fgClassLayout_AddUserString(_self: *mut fgClassLayout,
                                       key: *const ::std::os::raw::c_char,
                                       value: *const ::std::os::raw::c_char);
    pub fn fgClassLayout_AddChild(_self: *mut fgClassLayout,
                                  _type: *const ::std::os::raw::c_char,
                                  name: *const ::std::os::raw::c_char, flags: fgFlag,
                                  transform: *const fgTransform, units: ::std::os::raw::c_short,
                                  order: ::std::os::raw::c_int)
                                  -> FG_UINT;
    pub fn fgClassLayout_RemoveChild(_self: *mut fgClassLayout, child: FG_UINT)
                                     -> ::std::os::raw::c_char;
    pub fn fgClassLayout_GetChild(_self: *const fgClassLayout, child: FG_UINT)
                                  -> *mut fgClassLayout;
    pub fn fgDefaultLayout(_self: *mut fgElement, msg: *const FG_Msg, dim: *mut AbsVec) -> size_t;
    pub fn fgDistributeLayout(_self: *mut fgElement, msg: *const FG_Msg, flags: fgFlag,
                              dim: *mut AbsVec)
                              -> size_t;
    pub fn fgTileLayout(_self: *mut fgElement, msg: *const FG_Msg, flags: fgFlag,
                        area: *mut AbsVec)
                        -> size_t;
    pub fn fgMonitor_Init(_self: *mut fgMonitor, flags: fgFlag, parent: *mut Struct__FG_ROOT,
                          prev: *mut fgMonitor, coverage: *const AbsRect, dpi: *const fgIntVec);
    pub fn fgMonitor_Destroy(_self: *mut fgMonitor);
    pub fn fgMonitor_Message(_self: *mut fgMonitor, msg: *const FG_Msg) -> size_t;
    pub fn fgProgressbar_Init(_self: *mut fgProgressbar, parent: *mut fgElement,
                              next: *mut fgElement, name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_ushort);
    pub fn fgProgressbar_Destroy(_self: *mut fgProgressbar);
    pub fn fgProgressbar_Message(_self: *mut fgProgressbar, msg: *const FG_Msg) -> size_t;
    pub fn fgRadiobutton_Init(_self: *mut fgRadiobutton, parent: *mut fgElement,
                              next: *mut fgElement, name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_ushort);
    pub fn fgRadiobutton_Destroy(_self: *mut fgRadiobutton);
    pub fn fgRadiobutton_Message(_self: *mut fgRadiobutton, msg: *const FG_Msg) -> size_t;
    pub fn fgResource_Create(asset: fgAsset, uv: *const CRect, color: ::std::os::raw::c_uint,
                             parent: *mut fgElement, next: *mut fgElement,
                             name: *const ::std::os::raw::c_char, flags: fgFlag,
                             transform: *const fgTransform, units: ::std::os::raw::c_ushort)
                             -> *mut fgElement;
    pub fn fgResource_Init(_self: *mut fgResource, parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgResource_Destroy(_self: *mut fgResource);
    pub fn fgResource_Message(_self: *mut fgResource, msg: *const FG_Msg) -> size_t;
    pub fn fgCreateAssetFile(flags: fgFlag, file: *const ::std::os::raw::c_char) -> fgAsset;
    pub fn fgSingleton() -> *mut fgRoot;
    pub fn fgLoadExtension(extname: *const ::std::os::raw::c_char,
                           fg: *mut ::std::os::raw::c_void, sz: size_t)
                           -> ::std::os::raw::c_char;
    pub fn fgRoot_Init(_self: *mut fgRoot, area: *const AbsRect, dpi: *const fgIntVec,
                       backend: *const fgBackend);
    pub fn fgRoot_Destroy(_self: *mut fgRoot);
    pub fn fgRoot_Message(_self: *mut fgRoot, msg: *const FG_Msg) -> size_t;
    pub fn fgRoot_Inject(_self: *mut fgRoot, msg: *const FG_Msg) -> size_t;
    pub fn fgRoot_Update(_self: *mut fgRoot, delta: ::std::os::raw::c_double);
    pub fn fgRoot_CheckMouseMove(_self: *mut fgRoot);
    pub fn fgRoot_AllocAction(action:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_char>,
                              arg: *mut ::std::os::raw::c_void,
                              time: ::std::os::raw::c_double)
     -> *mut fgDeferAction;
    pub fn fgRoot_DeallocAction(_self: *mut fgRoot, action: *mut fgDeferAction);
    pub fn fgRoot_AddAction(_self: *mut fgRoot, action: *mut fgDeferAction);
    pub fn fgRoot_RemoveAction(_self: *mut fgRoot, action: *mut fgDeferAction);
    pub fn fgRoot_ModifyAction(_self: *mut fgRoot, action: *mut fgDeferAction);
    pub fn fgRoot_GetMonitor(_self: *const fgRoot, rect: *const AbsRect)
                             -> *mut Struct__FG_MONITOR;
    pub fn fgRoot_GetID(_self: *mut fgRoot, id: *const ::std::os::raw::c_char) -> *mut fgElement;
    pub fn fgRoot_AddID(_self: *mut fgRoot, id: *const ::std::os::raw::c_char,
                        element: *mut fgElement);
    pub fn fgRoot_RemoveID(_self: *mut fgRoot, element: *mut fgElement) -> ::std::os::raw::c_char;
    pub fn fgStandardInject(_self: *mut fgElement, msg: *const FG_Msg, area: *const AbsRect)
                            -> size_t;
    pub fn fgOrderedInject(_self: *mut fgElement, msg: *const FG_Msg,
                           area: *const AbsRect, skip: *mut fgElement,
                           _fn:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut fgElement,
                                                                          arg2:
                                                                              *const FG_Msg)
                                                         -> *mut fgElement>)
     -> size_t;
    pub fn fgStandardDraw(_self: *mut fgElement, area: *const AbsRect, aux: *const fgDrawAuxData,
                          culled: ::std::os::raw::c_char);
    pub fn fgOrderedDraw(_self: *mut fgElement, area: *const AbsRect,
                         aux: *const fgDrawAuxData,
                         culled: ::std::os::raw::c_char, skip: *mut fgElement,
                         _fn:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut fgElement,
                                                                        arg2:
                                                                            *const AbsRect,
                                                                        arg3:
                                                                            *const AbsRect)
                                                       -> *mut fgElement>,
                         draw:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut fgElement,
                                                                        arg2:
                                                                            *const AbsRect,
                                                                        arg3:
                                                                            *const fgDrawAuxData)>);
    pub fn fgCreate(_type: *const ::std::os::raw::c_char, parent: *mut fgElement,
                    next: *mut fgElement, name: *const ::std::os::raw::c_char, flags: fgFlag,
                    transform: *const fgTransform, units: ::std::os::raw::c_ushort)
                    -> *mut fgElement;
    pub fn fgRegisterCursor(cursor: ::std::os::raw::c_int, data: *const ::std::os::raw::c_void,
                            sz: size_t)
                            -> ::std::os::raw::c_int;
    pub fn fgRegisterFunction(name: *const ::std::os::raw::c_char, _fn: fgListener)
                              -> ::std::os::raw::c_int;
    pub fn fgRegisterControl(name: *const ::std::os::raw::c_char, _fn: fgInitializer, sz: size_t);
    pub fn fgIterateControls(p: *mut ::std::os::raw::c_void,
                             _fn:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void,
                                                                            arg2:
                                                                                *const ::std::os::raw::c_char)>);
    pub fn fgSlider_Init(_self: *mut fgSlider, parent: *mut fgElement, next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgSlider_Destroy(_self: *mut fgSlider);
    pub fn fgSlider_Message(_self: *mut fgSlider, msg: *const FG_Msg) -> size_t;
    pub fn fgTabcontrol_Init(_self: *mut fgTabcontrol, parent: *mut fgElement,
                             next: *mut fgElement, name: *const ::std::os::raw::c_char,
                             flags: fgFlag, transform: *const fgTransform,
                             units: ::std::os::raw::c_ushort);
    pub fn fgTabcontrol_Destroy(_self: *mut fgTabcontrol);
    pub fn fgTabcontrol_Message(_self: *mut fgTabcontrol, msg: *const FG_Msg) -> size_t;
    pub fn fgToolbar_Init(_self: *mut fgToolbar, parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgToolbar_Destroy(_self: *mut fgToolbar);
    pub fn fgToolbar_Message(_self: *mut fgToolbar, msg: *const FG_Msg) -> size_t;
    pub fn fgToolGroup_Init(_self: *mut fgToolGroup, parent: *mut fgElement,
                            next: *mut fgElement, name: *const ::std::os::raw::c_char,
                            flags: fgFlag, transform: *const fgTransform,
                            units: ::std::os::raw::c_ushort);
    pub fn fgToolGroup_Destroy(_self: *mut fgToolGroup);
    pub fn fgToolGroup_Message(_self: *mut fgToolGroup, msg: *const FG_Msg) -> size_t;
    pub fn fgWindow_Init(_self: *mut fgWindow, parent: *mut fgElement, next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform, units: ::std::os::raw::c_ushort);
    pub fn fgWindow_Destroy(_self: *mut fgWindow);
    pub fn fgWindow_Message(_self: *mut fgWindow, msg: *const FG_Msg) -> size_t;
    pub fn fgWorkspace_Init(_self: *mut fgWorkspace, parent: *mut fgElement,
                            next: *mut fgElement, name: *const ::std::os::raw::c_char,
                            flags: fgFlag, transform: *const fgTransform,
                            units: ::std::os::raw::c_ushort);
    pub fn fgWorkspace_Destroy(_self: *mut fgWorkspace);
    pub fn fgWorkspace_Message(_self: *mut fgWorkspace, msg: *const FG_Msg) -> size_t;
}
