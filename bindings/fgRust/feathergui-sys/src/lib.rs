/* automatically generated by rust-bindgen */

#![feature(untagged_unions)]
#![allow(non_camel_case_types, non_snake_case)]

pub const MINGW_HAS_SECURE_API: ::std::os::raw::c_uint = 1;
pub const USE___UUIDOF: ::std::os::raw::c_uint = 0;
pub const MINGW_HAS_DDRAW_H: ::std::os::raw::c_uint = 1;
pub const MINGW_DDRAW_VERSION: ::std::os::raw::c_uint = 7;
pub const MINGW_HAS_DDK_H: ::std::os::raw::c_uint = 1;
pub const NOMINMAX: ::std::os::raw::c_uint = 1;
pub const LT_OBJDIR: &'static [u8; 7usize] = b".libs/\x00";
pub const STDC_HEADERS: ::std::os::raw::c_uint = 1;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 1;
pub const NULL: ::std::os::raw::c_uint = 0;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const RAND_MAX: ::std::os::raw::c_uint = 32767;
pub const FGUI_VERSION_MAJOR: ::std::os::raw::c_uint = 0;
pub const FGUI_VERSION_MINOR: ::std::os::raw::c_uint = 1;
pub const FGUI_VERSION_REVISION: ::std::os::raw::c_uint = 0;
pub const FG_ACCEPT: ::std::os::raw::c_uint = 1;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type rsize_t = usize;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type errno_t = ::std::os::raw::c_int;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
pub type time_t = __time64_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct threadlocaleinfostruct {
    pub refcount: ::std::os::raw::c_int,
    pub lc_codepage: ::std::os::raw::c_uint,
    pub lc_collate_cp: ::std::os::raw::c_uint,
    pub lc_handle: [::std::os::raw::c_ulong; 6usize],
    pub lc_id: [LC_ID; 6usize],
    pub lc_category: [threadlocaleinfostruct__bindgen_ty_1; 6usize],
    pub lc_clike: ::std::os::raw::c_int,
    pub mb_cur_max: ::std::os::raw::c_int,
    pub lconv_intl_refcount: *mut ::std::os::raw::c_int,
    pub lconv_num_refcount: *mut ::std::os::raw::c_int,
    pub lconv_mon_refcount: *mut ::std::os::raw::c_int,
    pub lconv: *mut threadlocaleinfostruct_lconv,
    pub ctype1_refcount: *mut ::std::os::raw::c_int,
    pub ctype1: *mut ::std::os::raw::c_ushort,
    pub pctype: *const ::std::os::raw::c_ushort,
    pub pclmap: *const ::std::os::raw::c_uchar,
    pub pcumap: *const ::std::os::raw::c_uchar,
    pub lc_time_curr: *mut __lc_time_data,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct threadlocaleinfostruct__bindgen_ty_1 {
    pub locale: *mut ::std::os::raw::c_char,
    pub wlocale: *mut u16,
    pub refcount: *mut ::std::os::raw::c_int,
    pub wrefcount: *mut ::std::os::raw::c_int,
}
impl Clone for threadlocaleinfostruct__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct threadlocaleinfostruct_lconv {
    pub _address: u8,
}
impl Clone for threadlocaleinfostruct_lconv {
    fn clone(&self) -> Self { *self }
}
impl Clone for threadlocaleinfostruct {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct threadmbcinfostruct {
    pub _address: u8,
}
impl Clone for threadmbcinfostruct {
    fn clone(&self) -> Self { *self }
}
pub type pthreadlocinfo = *mut threadlocaleinfostruct;
pub type pthreadmbcinfo = *mut threadmbcinfostruct;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __lc_time_data {
    pub _address: u8,
}
impl Clone for __lc_time_data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct localeinfo_struct {
    pub locinfo: pthreadlocinfo,
    pub mbcinfo: pthreadmbcinfo,
}
impl Clone for localeinfo_struct {
    fn clone(&self) -> Self { *self }
}
pub use self::localeinfo_struct as _locale_tstruct;
pub type _locale_t = *mut localeinfo_struct;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tagLC_ID {
    pub wLanguage: ::std::os::raw::c_ushort,
    pub wCountry: ::std::os::raw::c_ushort,
    pub wCodePage: ::std::os::raw::c_ushort,
}
impl Clone for tagLC_ID {
    fn clone(&self) -> Self { *self }
}
pub use self::tagLC_ID as LC_ID;
pub type LPLC_ID = *mut tagLC_ID;
pub use self::threadlocaleinfostruct as threadlocinfo;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
extern "C" {
    #[link_name = "_ZSt3absl"]
    pub fn std_abs(__i: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_ZSt3divll"]
    pub fn std_div(__i: ::std::os::raw::c_long, __j: ::std::os::raw::c_long)
     -> ldiv_t;
}
extern "C" {
    #[link_name = "_ZSt3absx"]
    pub fn std_abs1(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
pub type _onexit_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl Clone for _div_t {
    fn clone(&self) -> Self { *self }
}
pub use self::_div_t as div_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl Clone for _ldiv_t {
    fn clone(&self) -> Self { *self }
}
pub use self::_ldiv_t as ldiv_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_1 as _LDOUBLE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_2 {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 8usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_2 as _CRT_DOUBLE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 4usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_3 as _CRT_FLOAT;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 16usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_4 as _LONGDOUBLE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_5 as _LDBL12;
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const u16,
                                               arg2: *const u16,
                                               arg3: *const u16,
                                               arg4: ::std::os::raw::c_uint,
                                               arg5: usize)>;
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_Str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn bsearch(_Key: *const ::std::os::raw::c_void,
                   _Base: *const ::std::os::raw::c_void,
                   _NumOfElements: usize, _SizeOfElements: usize,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(_Base: *mut ::std::os::raw::c_void, _NumOfElements: usize,
                 _SizeOfElements: usize,
                 _PtFuncCompare:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int,
               _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long,
                _Denominator: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(_DstCh: *mut u16, _SrcCh: *const ::std::os::raw::c_char,
                  _SrcSizeInBytes: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(_Dest: *mut u16, _Source: *const ::std::os::raw::c_char,
                    _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn mkstemp(template_name: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(_Str: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(_Str: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(_Str: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(_Str: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(_Dest: *mut ::std::os::raw::c_char, _Source: *const u16,
                    _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn calloc(_NumOfElements: usize, _SizeOfElements: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(_Memory: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(_Memory: *mut ::std::os::raw::c_void, _NewSize: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wcstod(_Str: *const u16, _EndPtr: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn wcstof(_Str: *const u16, _EndPtr: *mut *mut u16) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const u16, arg2: *mut *mut u16) -> f64;
}
extern "C" {
    pub fn wcstol(_Str: *const u16, _EndPtr: *mut *mut u16,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(_Str: *const u16, _EndPtr: *mut *mut u16,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ecvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(_Val: f64, _NumOfDec: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(_Val: f64, _NumOfDigits: ::std::os::raw::c_int,
                _DstBuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(_Val: ::std::os::raw::c_int,
                _DstBuf: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(_Val: ::std::os::raw::c_long,
                _DstBuf: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(_Buf1: *mut ::std::os::raw::c_char,
                _Buf2: *mut ::std::os::raw::c_char,
                _SizeInBytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ultoa(_Val: ::std::os::raw::c_ulong,
                 _Dstbuf: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 8usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_6 as lldiv_t;
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mbstowcs_s(_PtNumOfCharConverted: *mut usize, _DstBuf: *mut u16,
                      _SizeInWords: usize,
                      _SrcBuf: *const ::std::os::raw::c_char,
                      _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(_PtNumOfCharConverted: *mut usize,
                      _Dst: *mut ::std::os::raw::c_char,
                      _DstSizeInBytes: usize, _Src: *const u16,
                      _MaxCountInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn qsort_s(_Base: *mut ::std::os::raw::c_void, _NumOfElements: usize,
                   _SizeOfElements: usize,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>,
                   _Context: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: usize,
    pub _useflag: ::std::os::raw::c_int,
}
impl Clone for _heapinfo {
    fn clone(&self) -> Self { *self }
}
pub use self::_heapinfo as _HEAPINFO;
extern "C" {
    pub fn memchr(_Buf: *const ::std::os::raw::c_void,
                  _Val: ::std::os::raw::c_int, _MaxCount: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(_Buf1: *const ::std::os::raw::c_void,
                  _Buf2: *const ::std::os::raw::c_void, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(_Dst: *mut ::std::os::raw::c_void,
                  _Src: *const ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcpy_s(_dest: *mut ::std::os::raw::c_void,
                    _numberOfElements: usize,
                    _src: *const ::std::os::raw::c_void, _count: usize)
     -> errno_t;
}
extern "C" {
    pub fn mempcpy(_Dst: *mut ::std::os::raw::c_void,
                   _Src: *const ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(_Dst: *mut ::std::os::raw::c_void,
                  _Val: ::std::os::raw::c_int, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(_Dst: *mut ::std::os::raw::c_void,
                   _Src: *const ::std::os::raw::c_void,
                   _Val: ::std::os::raw::c_int, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(_Buf1: *const ::std::os::raw::c_void,
                   _Buf2: *const ::std::os::raw::c_void, _Size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(_Dest: *mut ::std::os::raw::c_char,
                  _Source: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(_Dest: *mut ::std::os::raw::c_char,
                  _Source: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(_Str1: *const ::std::os::raw::c_char,
                  _Str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strnlen(_Str: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> usize;
}
extern "C" {
    pub fn memmove(_Dst: *mut ::std::os::raw::c_void,
                   _Src: *const ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(_Str: *const ::std::os::raw::c_char,
                  _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcoll(_Str1: *const ::std::os::raw::c_char,
                   _Str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcspn(_Str: *const ::std::os::raw::c_char,
                   _Control: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlwr_l(_String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(_Dest: *mut ::std::os::raw::c_char,
                   _Source: *const ::std::os::raw::c_char, _Count: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(_Str1: *const ::std::os::raw::c_char,
                   _Str2: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(_Dest: *mut ::std::os::raw::c_char,
                   _Source: *const ::std::os::raw::c_char, _Count: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(_Str: *const ::std::os::raw::c_char,
                   _Control: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(_Str: *const ::std::os::raw::c_char,
                   _Ch: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(_Str: *const ::std::os::raw::c_char,
                  _Control: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strstr(_Str: *const ::std::os::raw::c_char,
                  _SubStr: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(_Str: *mut ::std::os::raw::c_char,
                  _Delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(_Str: *mut ::std::os::raw::c_char,
                    _Delim: *const ::std::os::raw::c_char,
                    __last: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(_Dst: *mut ::std::os::raw::c_char,
                   _Src: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> usize;
}
extern "C" {
    pub fn strdup(_Src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(_Str1: *const ::std::os::raw::c_char,
                   _Str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(_Str1: *const ::std::os::raw::c_char,
                   _Str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_Str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(_Str1: *const ::std::os::raw::c_char,
                    _Str: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(arg1: *const ::std::os::raw::c_char,
                       arg2: *const ::std::os::raw::c_char, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(_Str: *mut ::std::os::raw::c_char,
                   _Val: ::std::os::raw::c_int, _MaxCount: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_Str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(_Str: *mut ::std::os::raw::c_char,
                  _Val: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_Str: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcscat(_Dest: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcschr(_Str: *const u16, _Ch: u16) -> *mut u16;
}
extern "C" {
    pub fn wcscmp(_Str1: *const u16, _Str2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Dest: *mut u16, _Source: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcscspn(_Str: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcslen(_Str: *const u16) -> usize;
}
extern "C" {
    pub fn wcsnlen(_Src: *const u16, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(_Dest: *mut u16, _Source: *const u16, _Count: usize)
     -> *mut u16;
}
extern "C" {
    pub fn wcsncmp(_Str1: *const u16, _Str2: *const u16, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(_Dest: *mut u16, _Source: *const u16, _Count: usize)
     -> *mut u16;
}
extern "C" {
    pub fn wcspbrk(_Str: *const u16, _Control: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsrchr(_Str: *const u16, _Ch: u16) -> *mut u16;
}
extern "C" {
    pub fn wcsspn(_Str: *const u16, _Control: *const u16) -> usize;
}
extern "C" {
    pub fn wcsstr(_Str: *const u16, _SubStr: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcstok(_Str: *mut u16, _Delim: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsxfrm(_Dst: *mut u16, _Src: *const u16, _MaxCount: usize)
     -> usize;
}
extern "C" {
    pub fn wcscoll(_Str1: *const u16, _Str2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_Str: *const u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicmp(_Str1: *const u16, _Str2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(_Str1: *const u16, _Str2: *const u16, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_Str: *mut u16, _Val: u16, _MaxCount: usize) -> *mut u16;
}
extern "C" {
    pub fn wcsrev(_Str: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsset(_Str: *mut u16, _Val: u16) -> *mut u16;
}
extern "C" {
    pub fn wcslwr(_Str: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsupr(_Str: *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcsicoll(_Str1: *const u16, _Str2: *const u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_s(_Buf: *mut ::std::os::raw::c_char, _SizeInBytes: usize,
                      _ErrNum: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn strncat_s(_Dst: *mut ::std::os::raw::c_char,
                     _DstSizeInChars: usize,
                     _Src: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> errno_t;
}
extern "C" {
    pub fn strcpy_s(_Dst: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _Src: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(_Dst: *mut ::std::os::raw::c_char,
                     _DstSizeInChars: usize,
                     _Src: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> errno_t;
}
extern "C" {
    pub fn strtok_s(_Str: *mut ::std::os::raw::c_char,
                    _Delim: *const ::std::os::raw::c_char,
                    _Context: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat_s(_Dst: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _Src: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn memmove_s(_dest: *mut ::std::os::raw::c_void,
                     _numberOfElements: usize,
                     _src: *const ::std::os::raw::c_void, _count: usize)
     -> errno_t;
}
extern "C" {
    pub fn wcstok_s(_Str: *mut u16, _Delim: *const u16,
                    _Context: *mut *mut u16) -> *mut u16;
}
extern "C" {
    pub fn wcscpy_s(_Dst: *mut u16, _SizeInWords: rsize_t, _Src: *const u16)
     -> errno_t;
}
extern "C" {
    pub fn wcscat_s(_Dst: *mut u16, _SizeInWords: rsize_t, _Src: *const u16)
     -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(_Dst: *mut u16, _DstSizeInChars: usize, _Src: *const u16,
                     _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(_Dst: *mut u16, _DstSizeInChars: usize, _Src: *const u16,
                     _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn wcsnlen_s(_src: *const u16, _count: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_7 as max_align_t;
pub type FREL = f32;
pub type FABS = f32;
pub type FG_UINT = ::std::os::raw::c_uint;
pub type fgFlag = ::std::os::raw::c_uint;
pub type fgAsset = *mut ::std::os::raw::c_void;
pub type fgFont = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8 {
    pub abs: FABS,
    pub rel: FREL,
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>() , 4usize);
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_8 as Coord;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub x: FREL,
    pub y: FREL,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 4usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_9 as RelVec;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_10 {
    pub x: FABS,
    pub y: FABS,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 4usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_10 as AbsVec;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub x: Coord,
    pub y: Coord,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 4usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_11 as CVec;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_12 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_12() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_12>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_12>() , 4usize);
}
impl Clone for _bindgen_ty_12 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_12 as fgIntVec;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_13 {
    pub __bindgen_anon_1: _bindgen_ty_13__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_13__bindgen_ty_1 {
    pub __bindgen_anon_1: _bindgen_ty_13__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_13__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13__bindgen_ty_1__bindgen_ty_1 {
    pub left: FREL,
    pub top: FREL,
    pub right: FREL,
    pub bottom: FREL,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_1__bindgen_ty_1>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_1__bindgen_ty_1>()
               , 4usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_13__bindgen_ty_1__bindgen_ty_2 {
    pub topleft: RelVec,
    pub bottomright: RelVec,
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_1__bindgen_ty_2>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_13__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_13__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_13() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_13>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_13>() , 4usize);
}
impl Clone for _bindgen_ty_13 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_13 as RelRect;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_14 {
    pub __bindgen_anon_1: _bindgen_ty_14__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_14__bindgen_ty_1 {
    pub __bindgen_anon_1: _bindgen_ty_14__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_14__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14__bindgen_ty_1__bindgen_ty_1 {
    pub left: FABS,
    pub top: FABS,
    pub right: FABS,
    pub bottom: FABS,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_1__bindgen_ty_1>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_1__bindgen_ty_1>()
               , 4usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_14__bindgen_ty_1__bindgen_ty_2 {
    pub topleft: AbsVec,
    pub bottomright: AbsVec,
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_1__bindgen_ty_2>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_14__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14__bindgen_ty_1>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_14__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_14() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_14>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_14>() , 4usize);
}
impl Clone for _bindgen_ty_14 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_14 as AbsRect;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_15 {
    pub __bindgen_anon_1: _bindgen_ty_15__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_15__bindgen_ty_1 {
    pub __bindgen_anon_1: _bindgen_ty_15__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _bindgen_ty_15__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15__bindgen_ty_1__bindgen_ty_1 {
    pub left: Coord,
    pub top: Coord,
    pub right: Coord,
    pub bottom: Coord,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_1__bindgen_ty_1>()
               , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_1__bindgen_ty_1>()
               , 4usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_15__bindgen_ty_1__bindgen_ty_2 {
    pub topleft: CVec,
    pub bottomright: CVec,
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_1__bindgen_ty_2>()
               , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_15__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_15__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_15() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_15>() , 32usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_15>() , 4usize);
}
impl Clone for _bindgen_ty_15 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_15 as CRect;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__void {
    pub p: *mut ::std::os::raw::c_void,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__void() {
    assert_eq!(::std::mem::size_of::<__VECTOR__void>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__void>() , 8usize);
}
impl Clone for __VECTOR__void {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__void as fgVector;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_16 {
    pub area: CRect,
    pub rotation: FABS,
    pub center: CVec,
}
#[test]
fn bindgen_test_layout__bindgen_ty_16() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_16>() , 52usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_16>() , 4usize);
}
impl Clone for _bindgen_ty_16 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_16 as fgTransform;
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_17 {
    pub color: ::std::os::raw::c_uint,
    pub colors: [::std::os::raw::c_uchar; 4usize],
    pub __bindgen_anon_1: _bindgen_ty_17__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_17__bindgen_ty_1 {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__bindgen_ty_17__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17__bindgen_ty_1>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_17__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_17() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_17>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_17>() , 4usize);
}
impl Clone for _bindgen_ty_17 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_17 as fgColor;
extern "C" {
    #[link_name = "fgColor_NONE"]
    pub static fgColor_NONE: fgColor;
}
extern "C" {
    #[link_name = "fgColor_BLACK"]
    pub static fgColor_BLACK: fgColor;
}
extern "C" {
    #[link_name = "fgColor_WHITE"]
    pub static fgColor_WHITE: fgColor;
}
extern "C" {
    #[link_name = "fgTransform_DEFAULT"]
    pub static fgTransform_DEFAULT: fgTransform;
}
extern "C" {
    #[link_name = "fgTransform_EMPTY"]
    pub static fgTransform_EMPTY: fgTransform;
}
extern "C" {
    #[link_name = "fgTransform_CENTER"]
    pub static fgTransform_CENTER: fgTransform;
}
extern "C" {
    #[link_name = "CRect_EMPTY"]
    pub static CRect_EMPTY: CRect;
}
extern "C" {
    #[link_name = "AbsVec_EMPTY"]
    pub static AbsVec_EMPTY: AbsVec;
}
extern "C" {
    #[link_name = "fgIntVec_EMPTY"]
    pub static fgIntVec_EMPTY: fgIntVec;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGMOVE {
    FGMOVE_PROPAGATE = 1,
    FGMOVE_RESIZEX = 2,
    FGMOVE_RESIZEY = 4,
    FGMOVE_RESIZE = 6,
    FGMOVE_MOVEX = 8,
    FGMOVE_MOVEY = 16,
    FGMOVE_MOVE = 24,
    FGMOVE_CENTERX = 32,
    FGMOVE_CENTERY = 64,
    FGMOVE_CENTER = 96,
    FGMOVE_ROTATION = 128,
    FGMOVE_PADDING = 256,
    FGMOVE_MARGIN = 512,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGTEXTFMT {
    FGTEXTFMT_UTF8 = 0,
    FGTEXTFMT_UTF16 = 1,
    FGTEXTFMT_UTF32 = 2,
    FGTEXTFMT_PLACEHOLDER_UTF8 = 4,
    FGTEXTFMT_PLACEHOLDER_UTF16 = 5,
    FGTEXTFMT_PLACEHOLDER_UTF32 = 6,
    FGTEXTFMT_MASK = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGSETSTYLE {
    FGSETSTYLE_NAME = 0,
    FGSETSTYLE_INDEX = 1,
    FGSETSTYLE_POINTER = 2,
    FGSETSTYLE_SETFLAG = 3,
    FGSETSTYLE_REMOVEFLAG = 4,
    FGSETSTYLE_SETFLAGINDEX = 5,
    FGSETSTYLE_REMOVEFLAGINDEX = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGSETCOLOR {
    FGSETCOLOR_MAIN = 0,
    FGSETCOLOR_PLACEHOLDER = 1,
    FGSETCOLOR_CURSOR = 2,
    FGSETCOLOR_SELECT = 3,
    FGSETCOLOR_HOVER = 4,
    FGSETCOLOR_DRAG = 5,
    FGSETCOLOR_EDGE = 6,
    FGSETCOLOR_ROWEDGE = 7,
    FGSETCOLOR_COLUMNEDGE = 8,
    FGSETCOLOR_ROWEVEN = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGDIM { FGDIM_MIN = 0, FGDIM_MAX = 1, FGDIM_FIXED = 2, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGCHECKED {
    FGCHECKED_NONE = 0,
    FGCHECKED_CHECKED = 1,
    FGCHECKED_INDETERMINATE = 2,
}
pub const FGUNIT_FGUNIT_LEFT_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_LEFT_SP: FGUNIT = FGUNIT::FGUNIT_SP;
pub const FGUNIT_FGUNIT_LEFT_EM: FGUNIT = FGUNIT::FGUNIT_EM;
pub const FGUNIT_FGUNIT_LEFT_PX: FGUNIT = FGUNIT::FGUNIT_PX;
pub const FGUNIT_FGUNIT_LEFT_MASK: FGUNIT = FGUNIT::FGUNIT_PX;
pub const FGUNIT_FGUNIT_LEFT: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_TOP_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_TOP_MASK: FGUNIT = FGUNIT::FGUNIT_TOP_PX;
pub const FGUNIT_FGUNIT_TOP: FGUNIT = FGUNIT::FGUNIT_EM;
pub const FGUNIT_FGUNIT_RIGHT_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_RIGHT_MASK: FGUNIT = FGUNIT::FGUNIT_RIGHT_PX;
pub const FGUNIT_FGUNIT_RIGHT: FGUNIT = FGUNIT::FGUNIT_TOP_SP;
pub const FGUNIT_FGUNIT_BOTTOM_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_BOTTOM_MASK: FGUNIT = FGUNIT::FGUNIT_BOTTOM_PX;
pub const FGUNIT_FGUNIT_X_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_X_MASK: FGUNIT = FGUNIT::FGUNIT_X_PX;
pub const FGUNIT_FGUNIT_X: FGUNIT = FGUNIT::FGUNIT_TOP_EM;
pub const FGUNIT_FGUNIT_Y_DP: FGUNIT = FGUNIT::FGUNIT_DP;
pub const FGUNIT_FGUNIT_Y_MASK: FGUNIT = FGUNIT::FGUNIT_Y_PX;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGUNIT {
    FGUNIT_DP = 0,
    FGUNIT_SP = 1,
    FGUNIT_EM = 2,
    FGUNIT_PX = 3,
    FGUNIT_TOP_SP = 4,
    FGUNIT_TOP_EM = 8,
    FGUNIT_TOP_PX = 12,
    FGUNIT_RIGHT_SP = 16,
    FGUNIT_RIGHT_EM = 32,
    FGUNIT_RIGHT_PX = 48,
    FGUNIT_BOTTOM_SP = 64,
    FGUNIT_BOTTOM_EM = 128,
    FGUNIT_BOTTOM_PX = 192,
    FGUNIT_BOTTOM = 6,
    FGUNIT_X_SP = 256,
    FGUNIT_X_EM = 512,
    FGUNIT_X_PX = 768,
    FGUNIT_Y_SP = 1024,
    FGUNIT_Y_EM = 2048,
    FGUNIT_Y_PX = 3072,
    FGUNIT_Y = 10,
    FGUNIT_RIGHT_WIDTH = 4096,
    FGUNIT_BOTTOM_HEIGHT = 8192,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGITEM {
    FGITEM_DEFAULT = 0,
    FGITEM_TEXT = 1,
    FGITEM_ELEMENT = 2,
    FGITEM_ROW = 3,
    FGITEM_COLUMN = 4,
    FGITEM_LOCATION = 5,
    FGITEM_COUNT = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGVALUE {
    FGVALUE_UNKNOWN = 0,
    FGVALUE_INT64 = 1,
    FGVALUE_FLOAT = 2,
    FGVALUE_POINTER = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_MSGTYPE {
    FG_UNKNOWN = 0,
    FG_CONSTRUCT = 1,
    FG_DESTROY = 2,
    FG_MOVE = 3,
    FG_SETALPHA = 4,
    FG_SETAREA = 5,
    FG_SETTRANSFORM = 6,
    FG_SETFLAG = 7,
    FG_SETFLAGS = 8,
    FG_SETMARGIN = 9,
    FG_SETPADDING = 10,
    FG_SETPARENT = 11,
    FG_ADDCHILD = 12,
    FG_REMOVECHILD = 13,
    FG_PARENTCHANGE = 14,
    FG_LAYOUTCHANGE = 15,
    FG_LAYOUTFUNCTION = 16,
    FG_LAYOUTLOAD = 17,
    FG_DRAGOVER = 18,
    FG_DROP = 19,
    FG_DRAW = 20,
    FG_INJECT = 21,
    FG_SETSKIN = 22,
    FG_GETSKIN = 23,
    FG_SETSTYLE = 24,
    FG_GETSTYLE = 25,
    FG_GETCLASSNAME = 26,
    FG_GETDPI = 27,
    FG_SETDPI = 28,
    FG_SETUSERDATA = 29,
    FG_GETUSERDATA = 30,
    FG_SETDIM = 31,
    FG_GETDIM = 32,
    FG_SETSCALING = 33,
    FG_GETSCALING = 34,
    FG_MOUSEDOWN = 35,
    FG_MOUSEDBLCLICK = 36,
    FG_MOUSEUP = 37,
    FG_MOUSEON = 38,
    FG_MOUSEOFF = 39,
    FG_MOUSEMOVE = 40,
    FG_MOUSESCROLL = 41,
    FG_TOUCHBEGIN = 42,
    FG_TOUCHEND = 43,
    FG_TOUCHMOVE = 44,
    FG_KEYUP = 45,
    FG_KEYDOWN = 46,
    FG_KEYCHAR = 47,
    FG_JOYBUTTONDOWN = 48,
    FG_JOYBUTTONUP = 49,
    FG_JOYAXIS = 50,
    FG_GOTFOCUS = 51,
    FG_LOSTFOCUS = 52,
    FG_SETNAME = 53,
    FG_GETNAME = 54,
    FG_SETCONTEXTMENU = 55,
    FG_GETCONTEXTMENU = 56,
    FG_NEUTRAL = 57,
    FG_HOVER = 58,
    FG_ACTIVE = 59,
    FG_ACTION = 60,
    FG_GETITEM = 61,
    FG_ADDITEM = 62,
    FG_REMOVEITEM = 63,
    FG_SETITEM = 64,
    FG_GETSELECTEDITEM = 65,
    FG_GETVALUE = 66,
    FG_SETVALUE = 67,
    FG_GETRANGE = 68,
    FG_SETRANGE = 69,
    FG_SETASSET = 70,
    FG_SETUV = 71,
    FG_SETCOLOR = 72,
    FG_SETOUTLINE = 73,
    FG_SETFONT = 74,
    FG_SETLINEHEIGHT = 75,
    FG_SETLETTERSPACING = 76,
    FG_SETTEXT = 77,
    FG_GETASSET = 78,
    FG_GETUV = 79,
    FG_GETCOLOR = 80,
    FG_GETOUTLINE = 81,
    FG_GETFONT = 82,
    FG_GETLINEHEIGHT = 83,
    FG_GETLETTERSPACING = 84,
    FG_GETTEXT = 85,
    FG_CUSTOMEVENT = 86,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_KEYS {
    FG_KEY_NULL = 0,
    FG_KEY_LBUTTON = 1,
    FG_KEY_RBUTTON = 2,
    FG_KEY_CANCEL = 3,
    FG_KEY_MBUTTON = 4,
    FG_KEY_XBUTTON1 = 5,
    FG_KEY_XBUTTON2 = 6,
    FG_KEY_BACK = 8,
    FG_KEY_TAB = 9,
    FG_KEY_CLEAR = 12,
    FG_KEY_RETURN = 13,
    FG_KEY_SHIFT = 16,
    FG_KEY_CONTROL = 17,
    FG_KEY_MENU = 18,
    FG_KEY_PAUSE = 19,
    FG_KEY_CAPITAL = 20,
    FG_KEY_KANA = 21,
    FG_KEY_JUNJA = 23,
    FG_KEY_FINAL = 24,
    FG_KEY_KANJI = 25,
    FG_KEY_ESCAPE = 27,
    FG_KEY_CONVERT = 28,
    FG_KEY_NONCONVERT = 29,
    FG_KEY_ACCEPT = 30,
    FG_KEY_MODECHANGE = 31,
    FG_KEY_SPACE = 32,
    FG_KEY_PAGEUP = 33,
    FG_KEY_PAGEDOWN = 34,
    FG_KEY_END = 35,
    FG_KEY_HOME = 36,
    FG_KEY_LEFT = 37,
    FG_KEY_UP = 38,
    FG_KEY_RIGHT = 39,
    FG_KEY_DOWN = 40,
    FG_KEY_SELECT = 41,
    FG_KEY_PRINT = 42,
    FG_KEY_SNAPSHOT = 44,
    FG_KEY_INSERT = 45,
    FG_KEY_DELETE = 46,
    FG_KEY_HELP = 47,
    FG_KEY_0 = 48,
    FG_KEY_1 = 49,
    FG_KEY_2 = 50,
    FG_KEY_3 = 51,
    FG_KEY_4 = 52,
    FG_KEY_5 = 53,
    FG_KEY_6 = 54,
    FG_KEY_7 = 55,
    FG_KEY_8 = 56,
    FG_KEY_9 = 57,
    FG_KEY_A = 65,
    FG_KEY_B = 66,
    FG_KEY_C = 67,
    FG_KEY_D = 68,
    FG_KEY_E = 69,
    FG_KEY_F = 70,
    FG_KEY_G = 71,
    FG_KEY_H = 72,
    FG_KEY_I = 73,
    FG_KEY_J = 74,
    FG_KEY_K = 75,
    FG_KEY_L = 76,
    FG_KEY_M = 77,
    FG_KEY_N = 78,
    FG_KEY_O = 79,
    FG_KEY_P = 80,
    FG_KEY_Q = 81,
    FG_KEY_R = 82,
    FG_KEY_S = 83,
    FG_KEY_T = 84,
    FG_KEY_U = 85,
    FG_KEY_V = 86,
    FG_KEY_W = 87,
    FG_KEY_X = 88,
    FG_KEY_Y = 89,
    FG_KEY_Z = 90,
    FG_KEY_LWIN = 91,
    FG_KEY_RWIN = 92,
    FG_KEY_APPS = 93,
    FG_KEY_SLEEP = 95,
    FG_KEY_NUMPAD0 = 96,
    FG_KEY_NUMPAD1 = 97,
    FG_KEY_NUMPAD2 = 98,
    FG_KEY_NUMPAD3 = 99,
    FG_KEY_NUMPAD4 = 100,
    FG_KEY_NUMPAD5 = 101,
    FG_KEY_NUMPAD6 = 102,
    FG_KEY_NUMPAD7 = 103,
    FG_KEY_NUMPAD8 = 104,
    FG_KEY_NUMPAD9 = 105,
    FG_KEY_MULTIPLY = 106,
    FG_KEY_ADD = 107,
    FG_KEY_SEPARATOR = 108,
    FG_KEY_SUBTRACT = 109,
    FG_KEY_DECIMAL = 110,
    FG_KEY_DIVIDE = 111,
    FG_KEY_F1 = 112,
    FG_KEY_F2 = 113,
    FG_KEY_F3 = 114,
    FG_KEY_F4 = 115,
    FG_KEY_F5 = 116,
    FG_KEY_F6 = 117,
    FG_KEY_F7 = 118,
    FG_KEY_F8 = 119,
    FG_KEY_F9 = 120,
    FG_KEY_F10 = 121,
    FG_KEY_F11 = 122,
    FG_KEY_F12 = 123,
    FG_KEY_F13 = 124,
    FG_KEY_F14 = 125,
    FG_KEY_F15 = 126,
    FG_KEY_F16 = 127,
    FG_KEY_F17 = 128,
    FG_KEY_F18 = 129,
    FG_KEY_F19 = 130,
    FG_KEY_F20 = 131,
    FG_KEY_F21 = 132,
    FG_KEY_F22 = 133,
    FG_KEY_F23 = 134,
    FG_KEY_F24 = 135,
    FG_KEY_NUMLOCK = 144,
    FG_KEY_SCROLL = 145,
    FG_KEY_OEM_NEC_EQUAL = 146,
    FG_KEY_LSHIFT = 160,
    FG_KEY_RSHIFT = 161,
    FG_KEY_LCONTROL = 162,
    FG_KEY_RCONTROL = 163,
    FG_KEY_LMENU = 164,
    FG_KEY_RMENU = 165,
    FG_KEY_OEM_1 = 186,
    FG_KEY_OEM_PLUS = 187,
    FG_KEY_OEM_COMMA = 188,
    FG_KEY_OEM_MINUS = 189,
    FG_KEY_OEM_PERIOD = 190,
    FG_KEY_OEM_2 = 191,
    FG_KEY_OEM_3 = 192,
    FG_KEY_OEM_4 = 219,
    FG_KEY_OEM_5 = 220,
    FG_KEY_OEM_6 = 221,
    FG_KEY_OEM_7 = 222,
    FG_KEY_OEM_8 = 223,
}
pub const FG_JOYBUTTONS_FG_JOYSTICK_ID1: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON1;
pub const FG_JOYBUTTONS_FG_JOYAXIS_X: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON1;
pub const FG_JOYBUTTONS_FG_JOYAXIS_Y: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON2;
pub const FG_JOYBUTTONS_FG_JOYAXIS_Z: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON3;
pub const FG_JOYBUTTONS_FG_JOYAXIS_R: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON4;
pub const FG_JOYBUTTONS_FG_JOYAXIS_U: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON5;
pub const FG_JOYBUTTONS_FG_JOYAXIS_V: FG_JOYBUTTONS =
    FG_JOYBUTTONS::FG_JOYBUTTON6;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_JOYBUTTONS {
    FG_JOYBUTTON1 = 0,
    FG_JOYBUTTON2 = 1,
    FG_JOYBUTTON3 = 2,
    FG_JOYBUTTON4 = 3,
    FG_JOYBUTTON5 = 4,
    FG_JOYBUTTON6 = 5,
    FG_JOYBUTTON7 = 6,
    FG_JOYBUTTON8 = 7,
    FG_JOYBUTTON9 = 8,
    FG_JOYBUTTON10 = 9,
    FG_JOYBUTTON11 = 10,
    FG_JOYBUTTON12 = 11,
    FG_JOYBUTTON13 = 12,
    FG_JOYBUTTON14 = 13,
    FG_JOYBUTTON15 = 14,
    FG_JOYBUTTON16 = 15,
    FG_JOYBUTTON17 = 16,
    FG_JOYBUTTON18 = 17,
    FG_JOYBUTTON19 = 18,
    FG_JOYBUTTON20 = 19,
    FG_JOYBUTTON21 = 20,
    FG_JOYBUTTON22 = 21,
    FG_JOYBUTTON23 = 22,
    FG_JOYBUTTON24 = 23,
    FG_JOYBUTTON25 = 24,
    FG_JOYBUTTON26 = 25,
    FG_JOYBUTTON27 = 26,
    FG_JOYBUTTON28 = 27,
    FG_JOYBUTTON29 = 28,
    FG_JOYBUTTON30 = 29,
    FG_JOYBUTTON31 = 30,
    FG_JOYBUTTON32 = 31,
    FG_JOYSTICK_ID2 = 256,
    FG_JOYSTICK_ID3 = 512,
    FG_JOYSTICK_ID4 = 768,
    FG_JOYSTICK_ID5 = 1024,
    FG_JOYSTICK_ID6 = 1280,
    FG_JOYSTICK_ID7 = 1536,
    FG_JOYSTICK_ID8 = 1792,
    FG_JOYSTICK_ID9 = 2048,
    FG_JOYSTICK_ID10 = 2304,
    FG_JOYSTICK_ID12 = 2560,
    FG_JOYSTICK_ID13 = 2816,
    FG_JOYSTICK_ID14 = 3072,
    FG_JOYSTICK_ID15 = 3328,
    FG_JOYSTICK_ID16 = 3584,
    FG_JOYSTICK_INVALID = 65535,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_MOUSEBUTTON {
    FG_MOUSELBUTTON = 1,
    FG_MOUSERBUTTON = 2,
    FG_MOUSEMBUTTON = 4,
    FG_MOUSEXBUTTON1 = 8,
    FG_MOUSEXBUTTON2 = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_CURSOR {
    FGCURSOR_NONE = 0,
    FGCURSOR_ARROW = 1,
    FGCURSOR_IBEAM = 2,
    FGCURSOR_CROSS = 3,
    FGCURSOR_WAIT = 4,
    FGCURSOR_HAND = 5,
    FGCURSOR_RESIZENS = 6,
    FGCURSOR_RESIZEWE = 7,
    FGCURSOR_RESIZENWSE = 8,
    FGCURSOR_RESIZENESW = 9,
    FGCURSOR_RESIZEALL = 10,
    FGCURSOR_NO = 11,
    FGCURSOR_HELP = 12,
    FGCURSOR_DRAG = 13,
    FGCURSOR_CUSTOM = 14,
    FGCURSOR_OVERRIDE = 64,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_CLIPBOARD {
    FGCLIPBOARD_NONE = 0,
    FGCLIPBOARD_TEXT = 1,
    FGCLIPBOARD_WAVE = 2,
    FGCLIPBOARD_BITMAP = 3,
    FGCLIPBOARD_FILE = 4,
    FGCLIPBOARD_ELEMENT = 5,
    FGCLIPBOARD_CUSTOM = 6,
    FGCLIPBOARD_ALL = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FG_MOUSEFLAGS {
    FGMOUSE_INSIDE = 1,
    FGMOUSE_HOVER = 2,
    FGMOUSE_DRAG = 4,
    FGMOUSE_SEND_MOUSEMOVE = 32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MOUSESTATE {
    pub x: f32,
    pub y: f32,
    pub buttons: ::std::os::raw::c_uchar,
    pub state: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__FG_MOUSESTATE() {
    assert_eq!(::std::mem::size_of::<_FG_MOUSESTATE>() , 12usize);
    assert_eq!(::std::mem::align_of::<_FG_MOUSESTATE>() , 4usize);
}
impl Clone for _FG_MOUSESTATE {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_MOUSESTATE as fgMouseState;
pub type fgListener = fun_fgListener;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_ELEMENT {
    pub transform: fgTransform,
    pub margin: AbsRect,
    pub padding: AbsRect,
    pub maxdim: AbsVec,
    pub mindim: AbsVec,
    pub layoutdim: AbsVec,
    pub scaling: AbsVec,
    pub message: fgMessage,
    pub destroy: fgDestroy,
    pub free: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut ::std::os::raw::c_void)>,
    pub parent: *mut _FG_ELEMENT,
    pub name: *const ::std::os::raw::c_char,
    pub flags: fgFlag,
    pub style: FG_UINT,
    pub userid: FG_UINT,
    pub userdata: *mut ::std::os::raw::c_void,
    pub userhash: *mut __kh_fgUserdata_t,
    pub skin: *const _FG_SKIN,
    pub skinstyle: *mut fgVector,
    pub layoutstyle: *mut fgVector,
    pub root: *mut _FG_ELEMENT,
    pub last: *mut _FG_ELEMENT,
    pub next: *mut _FG_ELEMENT,
    pub prev: *mut _FG_ELEMENT,
    pub rootinject: *mut _FG_ELEMENT,
    pub lastinject: *mut _FG_ELEMENT,
    pub nextinject: *mut _FG_ELEMENT,
    pub previnject: *mut _FG_ELEMENT,
    pub rootnoclip: *mut _FG_ELEMENT,
    pub lastnoclip: *mut _FG_ELEMENT,
    pub nextnoclip: *mut _FG_ELEMENT,
    pub prevnoclip: *mut _FG_ELEMENT,
    pub lastfocus: *mut _FG_ELEMENT,
}
#[test]
fn bindgen_test_layout__FG_ELEMENT() {
    assert_eq!(::std::mem::size_of::<_FG_ELEMENT>() , 320usize);
    assert_eq!(::std::mem::align_of::<_FG_ELEMENT>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9ConstructEv"]
    pub fn _FG_ELEMENT_Construct(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT4MoveEtPS_y"]
    pub fn _FG_ELEMENT_Move(this: *mut _FG_ELEMENT,
                            subtype: ::std::os::raw::c_ushort,
                            child: *mut _FG_ELEMENT, diff: usize);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetAlphaEf"]
    pub fn _FG_ELEMENT_SetAlpha(this: *mut _FG_ELEMENT, alpha: f32) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetAreaERK5CRect"]
    pub fn _FG_ELEMENT_SetArea(this: *mut _FG_ELEMENT, area: *const CRect)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT12SetTransformERK11fgTransform"]
    pub fn _FG_ELEMENT_SetTransform(this: *mut _FG_ELEMENT,
                                    transform: *const fgTransform) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetFlagEjb"]
    pub fn _FG_ELEMENT_SetFlag(this: *mut _FG_ELEMENT, flag: fgFlag,
                               value: bool);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetFlagsEj"]
    pub fn _FG_ELEMENT_SetFlags(this: *mut _FG_ELEMENT, flags: fgFlag);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9SetMarginERK7AbsRect"]
    pub fn _FG_ELEMENT_SetMargin(this: *mut _FG_ELEMENT,
                                 margin: *const AbsRect) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT10SetPaddingERK7AbsRect"]
    pub fn _FG_ELEMENT_SetPadding(this: *mut _FG_ELEMENT,
                                  padding: *const AbsRect) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9SetParentEPS_S0_"]
    pub fn _FG_ELEMENT_SetParent(this: *mut _FG_ELEMENT,
                                 parent: *mut _FG_ELEMENT,
                                 next: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8AddChildEPS_S0_"]
    pub fn _FG_ELEMENT_AddChild(this: *mut _FG_ELEMENT,
                                child: *mut _FG_ELEMENT,
                                next: *mut _FG_ELEMENT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7AddItemEPvy"]
    pub fn _FG_ELEMENT_AddItem(this: *mut _FG_ELEMENT,
                               item: *mut ::std::os::raw::c_void,
                               index: usize) -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11AddItemTextEPKc9FGTEXTFMT"]
    pub fn _FG_ELEMENT_AddItemText(this: *mut _FG_ELEMENT,
                                   item: *const ::std::os::raw::c_char,
                                   fmt: FGTEXTFMT) -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14AddItemElementEPS_y"]
    pub fn _FG_ELEMENT_AddItemElement(this: *mut _FG_ELEMENT,
                                      item: *mut _FG_ELEMENT, index: usize)
     -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11RemoveChildEPS_"]
    pub fn _FG_ELEMENT_RemoveChild(this: *mut _FG_ELEMENT,
                                   child: *mut _FG_ELEMENT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT10RemoveItemEy"]
    pub fn _FG_ELEMENT_RemoveItem(this: *mut _FG_ELEMENT, item: usize)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT12LayoutChangeEtPS_S0_"]
    pub fn _FG_ELEMENT_LayoutChange(this: *mut _FG_ELEMENT,
                                    subtype: ::std::os::raw::c_ushort,
                                    target: *mut _FG_ELEMENT,
                                    old: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14LayoutFunctionERK7_FG_MSGRK5CRectb"]
    pub fn _FG_ELEMENT_LayoutFunction(this: *mut _FG_ELEMENT,
                                      msg: *const FG_Msg, area: *const CRect,
                                      scrollbar: bool) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT10LayoutLoadEP10_FG_LAYOUT"]
    pub fn _FG_ELEMENT_LayoutLoad(this: *mut _FG_ELEMENT,
                                  layout: *mut _FG_LAYOUT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8DragOverEff"]
    pub fn _FG_ELEMENT_DragOver(this: *mut _FG_ELEMENT, x: f32, y: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT4DropEffh"]
    pub fn _FG_ELEMENT_Drop(this: *mut _FG_ELEMENT, x: f32, y: f32,
                            allbtn: ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT4DrawEPK7AbsRectPK17_FG_DRAW_AUX_DATA"]
    pub fn _FG_ELEMENT_Draw(this: *mut _FG_ELEMENT, area: *const AbsRect,
                            aux: *const fgDrawAuxData);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6InjectEPK7_FG_MSGPK7AbsRect"]
    pub fn _FG_ELEMENT_Inject(this: *mut _FG_ELEMENT, msg: *const FG_Msg,
                              area: *const AbsRect) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetSkinEP8_FG_SKIN"]
    pub fn _FG_ELEMENT_SetSkin(this: *mut _FG_ELEMENT, skin: *mut _FG_SKIN)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetSkinEPS_"]
    pub fn _FG_ELEMENT_GetSkin(this: *mut _FG_ELEMENT,
                               child: *mut _FG_ELEMENT) -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetStyleEPKcj"]
    pub fn _FG_ELEMENT_SetStyle(this: *mut _FG_ELEMENT,
                                name: *const ::std::os::raw::c_char,
                                mask: FG_UINT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetStyleEP9_FG_STYLE"]
    pub fn _FG_ELEMENT_SetStyle1(this: *mut _FG_ELEMENT,
                                 style: *mut _FG_STYLE) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetStyleEjj"]
    pub fn _FG_ELEMENT_SetStyle2(this: *mut _FG_ELEMENT, index: FG_UINT,
                                 mask: FG_UINT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetStyleEv"]
    pub fn _FG_ELEMENT_GetStyle(this: *mut _FG_ELEMENT) -> *mut _FG_STYLE;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6GetDPIEv"]
    pub fn _FG_ELEMENT_GetDPI(this: *mut _FG_ELEMENT) -> *mut fgIntVec;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6SetDPIEii"]
    pub fn _FG_ELEMENT_SetDPI(this: *mut _FG_ELEMENT,
                              x: ::std::os::raw::c_int,
                              y: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT12GetClassNameEv"]
    pub fn _FG_ELEMENT_GetClassName(this: *mut _FG_ELEMENT)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11GetUserdataEPKc"]
    pub fn _FG_ELEMENT_GetUserdata(this: *mut _FG_ELEMENT,
                                   name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11SetUserdataEPvPKc"]
    pub fn _FG_ELEMENT_SetUserdata(this: *mut _FG_ELEMENT,
                                   data: *mut ::std::os::raw::c_void,
                                   name: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9MouseDownEffhh"]
    pub fn _FG_ELEMENT_MouseDown(this: *mut _FG_ELEMENT, x: f32, y: f32,
                                 button: ::std::os::raw::c_uchar,
                                 allbtn: ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT13MouseDblClickEffhh"]
    pub fn _FG_ELEMENT_MouseDblClick(this: *mut _FG_ELEMENT, x: f32, y: f32,
                                     button: ::std::os::raw::c_uchar,
                                     allbtn: ::std::os::raw::c_uchar)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7MouseUpEffhh"]
    pub fn _FG_ELEMENT_MouseUp(this: *mut _FG_ELEMENT, x: f32, y: f32,
                               button: ::std::os::raw::c_uchar,
                               allbtn: ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7MouseOnEff"]
    pub fn _FG_ELEMENT_MouseOn(this: *mut _FG_ELEMENT, x: f32, y: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8MouseOffEff"]
    pub fn _FG_ELEMENT_MouseOff(this: *mut _FG_ELEMENT, x: f32, y: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9MouseMoveEff"]
    pub fn _FG_ELEMENT_MouseMove(this: *mut _FG_ELEMENT, x: f32, y: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11MouseScrollEfftt"]
    pub fn _FG_ELEMENT_MouseScroll(this: *mut _FG_ELEMENT, x: f32, y: f32,
                                   delta: ::std::os::raw::c_ushort,
                                   hdelta: ::std::os::raw::c_ushort) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT5KeyUpEhc"]
    pub fn _FG_ELEMENT_KeyUp(this: *mut _FG_ELEMENT,
                             keycode: ::std::os::raw::c_uchar,
                             sigkeys: ::std::os::raw::c_char) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7KeyDownEhc"]
    pub fn _FG_ELEMENT_KeyDown(this: *mut _FG_ELEMENT,
                               keycode: ::std::os::raw::c_uchar,
                               sigkeys: ::std::os::raw::c_char) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7KeyCharEic"]
    pub fn _FG_ELEMENT_KeyChar(this: *mut _FG_ELEMENT,
                               keychar: ::std::os::raw::c_int,
                               sigkeys: ::std::os::raw::c_char) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT13JoyButtonDownEs"]
    pub fn _FG_ELEMENT_JoyButtonDown(this: *mut _FG_ELEMENT,
                                     joybutton: ::std::os::raw::c_short)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11JoyButtonUpEs"]
    pub fn _FG_ELEMENT_JoyButtonUp(this: *mut _FG_ELEMENT,
                                   joybutton: ::std::os::raw::c_short)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7JoyAxisEfs"]
    pub fn _FG_ELEMENT_JoyAxis(this: *mut _FG_ELEMENT, joyvalue: f32,
                               joyaxis: ::std::os::raw::c_short) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GotFocusEv"]
    pub fn _FG_ELEMENT_GotFocus(this: *mut _FG_ELEMENT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9LostFocusEv"]
    pub fn _FG_ELEMENT_LostFocus(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetNameEPKc"]
    pub fn _FG_ELEMENT_SetName(this: *mut _FG_ELEMENT,
                               name: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetNameEv"]
    pub fn _FG_ELEMENT_GetName(this: *mut _FG_ELEMENT)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14SetContextMenuEPS_"]
    pub fn _FG_ELEMENT_SetContextMenu(this: *mut _FG_ELEMENT,
                                      menu: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14GetContextMenuEv"]
    pub fn _FG_ELEMENT_GetContextMenu(this: *mut _FG_ELEMENT)
     -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7NeutralEv"]
    pub fn _FG_ELEMENT_Neutral(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT5HoverEv"]
    pub fn _FG_ELEMENT_Hover(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6ActiveEv"]
    pub fn _FG_ELEMENT_Active(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6ActionEv"]
    pub fn _FG_ELEMENT_Action(this: *mut _FG_ELEMENT);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6SetDimEff5FGDIM"]
    pub fn _FG_ELEMENT_SetDim(this: *mut _FG_ELEMENT, x: f32, y: f32,
                              type_: FGDIM);
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT6GetDimE5FGDIM"]
    pub fn _FG_ELEMENT_GetDim(this: *mut _FG_ELEMENT, type_: FGDIM)
     -> *const AbsVec;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetItemEy"]
    pub fn _FG_ELEMENT_GetItem(this: *mut _FG_ELEMENT, index: usize)
     -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9GetItemAtEff"]
    pub fn _FG_ELEMENT_GetItemAt(this: *mut _FG_ELEMENT, x: f32, y: f32)
     -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11GetNumItemsEv"]
    pub fn _FG_ELEMENT_GetNumItems(this: *mut _FG_ELEMENT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT15GetSelectedItemEy"]
    pub fn _FG_ELEMENT_GetSelectedItem(this: *mut _FG_ELEMENT, index: usize)
     -> *mut _FG_ELEMENT;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetValueEx"]
    pub fn _FG_ELEMENT_GetValue(this: *mut _FG_ELEMENT, aux: isize) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9GetValueFEx"]
    pub fn _FG_ELEMENT_GetValueF(this: *mut _FG_ELEMENT, aux: isize) -> f32;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9GetValuePEx"]
    pub fn _FG_ELEMENT_GetValueP(this: *mut _FG_ELEMENT, aux: isize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetRangeEv"]
    pub fn _FG_ELEMENT_GetRange(this: *mut _FG_ELEMENT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9GetRangeFEv"]
    pub fn _FG_ELEMENT_GetRangeF(this: *mut _FG_ELEMENT) -> f32;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetValueEx"]
    pub fn _FG_ELEMENT_SetValue(this: *mut _FG_ELEMENT, value: isize)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9SetValueFEf"]
    pub fn _FG_ELEMENT_SetValueF(this: *mut _FG_ELEMENT, value: f32) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9SetValuePEPv"]
    pub fn _FG_ELEMENT_SetValueP(this: *mut _FG_ELEMENT,
                                 ptr: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetRangeEx"]
    pub fn _FG_ELEMENT_SetRange(this: *mut _FG_ELEMENT, value: isize)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT9SetRangeFEf"]
    pub fn _FG_ELEMENT_SetRangeF(this: *mut _FG_ELEMENT, value: f32) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetAssetEPv"]
    pub fn _FG_ELEMENT_SetAsset(this: *mut _FG_ELEMENT, asset: fgAsset)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT5SetUVERK5CRect"]
    pub fn _FG_ELEMENT_SetUV(this: *mut _FG_ELEMENT, uv: *const CRect)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetColorEj10FGSETCOLOR"]
    pub fn _FG_ELEMENT_SetColor(this: *mut _FG_ELEMENT,
                                color: ::std::os::raw::c_uint,
                                index: FGSETCOLOR) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT10SetOutlineEf"]
    pub fn _FG_ELEMENT_SetOutline(this: *mut _FG_ELEMENT, outline: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetFontEPv"]
    pub fn _FG_ELEMENT_SetFont(this: *mut _FG_ELEMENT,
                               font: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT13SetLineHeightEf"]
    pub fn _FG_ELEMENT_SetLineHeight(this: *mut _FG_ELEMENT, lineheight: f32)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT16SetLetterSpacingEf"]
    pub fn _FG_ELEMENT_SetLetterSpacing(this: *mut _FG_ELEMENT,
                                        letterspacing: f32) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetTextEPKc9FGTEXTFMT"]
    pub fn _FG_ELEMENT_SetText(this: *mut _FG_ELEMENT,
                               text: *const ::std::os::raw::c_char,
                               fmt: FGTEXTFMT) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetTextWEPKw"]
    pub fn _FG_ELEMENT_SetTextW(this: *mut _FG_ELEMENT, text: *const u16)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8SetTextUEPKi"]
    pub fn _FG_ELEMENT_SetTextU(this: *mut _FG_ELEMENT,
                                text: *const ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14SetPlaceholderEPKc"]
    pub fn _FG_ELEMENT_SetPlaceholder(this: *mut _FG_ELEMENT,
                                      text: *const ::std::os::raw::c_char)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT15SetPlaceholderWEPKw"]
    pub fn _FG_ELEMENT_SetPlaceholderW(this: *mut _FG_ELEMENT,
                                       text: *const u16) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT15SetPlaceholderUEPKi"]
    pub fn _FG_ELEMENT_SetPlaceholderU(this: *mut _FG_ELEMENT,
                                       text: *const ::std::os::raw::c_int)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7SetMaskEi"]
    pub fn _FG_ELEMENT_SetMask(this: *mut _FG_ELEMENT,
                               mask: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetAssetEv"]
    pub fn _FG_ELEMENT_GetAsset(this: *mut _FG_ELEMENT) -> fgAsset;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT5GetUVEv"]
    pub fn _FG_ELEMENT_GetUV(this: *mut _FG_ELEMENT) -> *const CRect;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetColorE10FGSETCOLOR"]
    pub fn _FG_ELEMENT_GetColor(this: *mut _FG_ELEMENT, index: FGSETCOLOR)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT10GetOutlineEv"]
    pub fn _FG_ELEMENT_GetOutline(this: *mut _FG_ELEMENT) -> f32;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetFontEv"]
    pub fn _FG_ELEMENT_GetFont(this: *mut _FG_ELEMENT)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT13GetLineHeightEv"]
    pub fn _FG_ELEMENT_GetLineHeight(this: *mut _FG_ELEMENT) -> f32;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT16GetLetterSpacingEv"]
    pub fn _FG_ELEMENT_GetLetterSpacing(this: *mut _FG_ELEMENT) -> f32;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetTextE9FGTEXTFMT"]
    pub fn _FG_ELEMENT_GetText(this: *mut _FG_ELEMENT, fmt: FGTEXTFMT)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetTextWEv"]
    pub fn _FG_ELEMENT_GetTextW(this: *mut _FG_ELEMENT) -> *const u16;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT8GetTextUEv"]
    pub fn _FG_ELEMENT_GetTextU(this: *mut _FG_ELEMENT)
     -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT14GetPlaceholderEv"]
    pub fn _FG_ELEMENT_GetPlaceholder(this: *mut _FG_ELEMENT)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT15GetPlaceholderWEv"]
    pub fn _FG_ELEMENT_GetPlaceholderW(this: *mut _FG_ELEMENT) -> *const u16;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT15GetPlaceholderUEv"]
    pub fn _FG_ELEMENT_GetPlaceholderU(this: *mut _FG_ELEMENT)
     -> *const ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT7GetMaskEv"]
    pub fn _FG_ELEMENT_GetMask(this: *mut _FG_ELEMENT)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN11_FG_ELEMENT11AddListenerEtPFvPS_PK7_FG_MSGE"]
    pub fn _FG_ELEMENT_AddListener(this: *mut _FG_ELEMENT,
                                   type_: ::std::os::raw::c_ushort,
                                   listener: fgListener);
}
impl Clone for _FG_ELEMENT {
    fn clone(&self) -> Self { *self }
}
impl _FG_ELEMENT {
    #[inline]
    pub unsafe fn Construct(&mut self) { _FG_ELEMENT_Construct(&mut *self) }
    #[inline]
    pub unsafe fn Move(&mut self, subtype: ::std::os::raw::c_ushort,
                       child: *mut _FG_ELEMENT, diff: usize) {
        _FG_ELEMENT_Move(&mut *self, subtype, child, diff)
    }
    #[inline]
    pub unsafe fn SetAlpha(&mut self, alpha: f32) -> usize {
        _FG_ELEMENT_SetAlpha(&mut *self, alpha)
    }
    #[inline]
    pub unsafe fn SetArea(&mut self, area: *const CRect) -> usize {
        _FG_ELEMENT_SetArea(&mut *self, area)
    }
    #[inline]
    pub unsafe fn SetTransform(&mut self, transform: *const fgTransform)
     -> usize {
        _FG_ELEMENT_SetTransform(&mut *self, transform)
    }
    #[inline]
    pub unsafe fn SetFlag(&mut self, flag: fgFlag, value: bool) {
        _FG_ELEMENT_SetFlag(&mut *self, flag, value)
    }
    #[inline]
    pub unsafe fn SetFlags(&mut self, flags: fgFlag) {
        _FG_ELEMENT_SetFlags(&mut *self, flags)
    }
    #[inline]
    pub unsafe fn SetMargin(&mut self, margin: *const AbsRect) -> usize {
        _FG_ELEMENT_SetMargin(&mut *self, margin)
    }
    #[inline]
    pub unsafe fn SetPadding(&mut self, padding: *const AbsRect) -> usize {
        _FG_ELEMENT_SetPadding(&mut *self, padding)
    }
    #[inline]
    pub unsafe fn SetParent(&mut self, parent: *mut _FG_ELEMENT,
                            next: *mut _FG_ELEMENT) {
        _FG_ELEMENT_SetParent(&mut *self, parent, next)
    }
    #[inline]
    pub unsafe fn AddChild(&mut self, child: *mut _FG_ELEMENT,
                           next: *mut _FG_ELEMENT) -> usize {
        _FG_ELEMENT_AddChild(&mut *self, child, next)
    }
    #[inline]
    pub unsafe fn AddItem(&mut self, item: *mut ::std::os::raw::c_void,
                          index: usize) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_AddItem(&mut *self, item, index)
    }
    #[inline]
    pub unsafe fn AddItemText(&mut self, item: *const ::std::os::raw::c_char,
                              fmt: FGTEXTFMT) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_AddItemText(&mut *self, item, fmt)
    }
    #[inline]
    pub unsafe fn AddItemElement(&mut self, item: *mut _FG_ELEMENT,
                                 index: usize) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_AddItemElement(&mut *self, item, index)
    }
    #[inline]
    pub unsafe fn RemoveChild(&mut self, child: *mut _FG_ELEMENT) -> usize {
        _FG_ELEMENT_RemoveChild(&mut *self, child)
    }
    #[inline]
    pub unsafe fn RemoveItem(&mut self, item: usize) -> usize {
        _FG_ELEMENT_RemoveItem(&mut *self, item)
    }
    #[inline]
    pub unsafe fn LayoutChange(&mut self, subtype: ::std::os::raw::c_ushort,
                               target: *mut _FG_ELEMENT,
                               old: *mut _FG_ELEMENT) {
        _FG_ELEMENT_LayoutChange(&mut *self, subtype, target, old)
    }
    #[inline]
    pub unsafe fn LayoutFunction(&mut self, msg: *const FG_Msg,
                                 area: *const CRect, scrollbar: bool)
     -> usize {
        _FG_ELEMENT_LayoutFunction(&mut *self, msg, area, scrollbar)
    }
    #[inline]
    pub unsafe fn LayoutLoad(&mut self, layout: *mut _FG_LAYOUT) -> usize {
        _FG_ELEMENT_LayoutLoad(&mut *self, layout)
    }
    #[inline]
    pub unsafe fn DragOver(&mut self, x: f32, y: f32) -> usize {
        _FG_ELEMENT_DragOver(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn Drop(&mut self, x: f32, y: f32,
                       allbtn: ::std::os::raw::c_uchar) -> usize {
        _FG_ELEMENT_Drop(&mut *self, x, y, allbtn)
    }
    #[inline]
    pub unsafe fn Draw(&mut self, area: *const AbsRect,
                       aux: *const fgDrawAuxData) {
        _FG_ELEMENT_Draw(&mut *self, area, aux)
    }
    #[inline]
    pub unsafe fn Inject(&mut self, msg: *const FG_Msg, area: *const AbsRect)
     -> usize {
        _FG_ELEMENT_Inject(&mut *self, msg, area)
    }
    #[inline]
    pub unsafe fn SetSkin(&mut self, skin: *mut _FG_SKIN) -> usize {
        _FG_ELEMENT_SetSkin(&mut *self, skin)
    }
    #[inline]
    pub unsafe fn GetSkin(&mut self, child: *mut _FG_ELEMENT)
     -> *mut _FG_SKIN {
        _FG_ELEMENT_GetSkin(&mut *self, child)
    }
    #[inline]
    pub unsafe fn SetStyle(&mut self, name: *const ::std::os::raw::c_char,
                           mask: FG_UINT) -> usize {
        _FG_ELEMENT_SetStyle(&mut *self, name, mask)
    }
    #[inline]
    pub unsafe fn SetStyle1(&mut self, style: *mut _FG_STYLE) -> usize {
        _FG_ELEMENT_SetStyle1(&mut *self, style)
    }
    #[inline]
    pub unsafe fn SetStyle2(&mut self, index: FG_UINT, mask: FG_UINT)
     -> usize {
        _FG_ELEMENT_SetStyle2(&mut *self, index, mask)
    }
    #[inline]
    pub unsafe fn GetStyle(&mut self) -> *mut _FG_STYLE {
        _FG_ELEMENT_GetStyle(&mut *self)
    }
    #[inline]
    pub unsafe fn GetDPI(&mut self) -> *mut fgIntVec {
        _FG_ELEMENT_GetDPI(&mut *self)
    }
    #[inline]
    pub unsafe fn SetDPI(&mut self, x: ::std::os::raw::c_int,
                         y: ::std::os::raw::c_int) {
        _FG_ELEMENT_SetDPI(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn GetClassName(&mut self) -> *const ::std::os::raw::c_char {
        _FG_ELEMENT_GetClassName(&mut *self)
    }
    #[inline]
    pub unsafe fn GetUserdata(&mut self, name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void {
        _FG_ELEMENT_GetUserdata(&mut *self, name)
    }
    #[inline]
    pub unsafe fn SetUserdata(&mut self, data: *mut ::std::os::raw::c_void,
                              name: *const ::std::os::raw::c_char) {
        _FG_ELEMENT_SetUserdata(&mut *self, data, name)
    }
    #[inline]
    pub unsafe fn MouseDown(&mut self, x: f32, y: f32,
                            button: ::std::os::raw::c_uchar,
                            allbtn: ::std::os::raw::c_uchar) -> usize {
        _FG_ELEMENT_MouseDown(&mut *self, x, y, button, allbtn)
    }
    #[inline]
    pub unsafe fn MouseDblClick(&mut self, x: f32, y: f32,
                                button: ::std::os::raw::c_uchar,
                                allbtn: ::std::os::raw::c_uchar) -> usize {
        _FG_ELEMENT_MouseDblClick(&mut *self, x, y, button, allbtn)
    }
    #[inline]
    pub unsafe fn MouseUp(&mut self, x: f32, y: f32,
                          button: ::std::os::raw::c_uchar,
                          allbtn: ::std::os::raw::c_uchar) -> usize {
        _FG_ELEMENT_MouseUp(&mut *self, x, y, button, allbtn)
    }
    #[inline]
    pub unsafe fn MouseOn(&mut self, x: f32, y: f32) -> usize {
        _FG_ELEMENT_MouseOn(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn MouseOff(&mut self, x: f32, y: f32) -> usize {
        _FG_ELEMENT_MouseOff(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn MouseMove(&mut self, x: f32, y: f32) -> usize {
        _FG_ELEMENT_MouseMove(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn MouseScroll(&mut self, x: f32, y: f32,
                              delta: ::std::os::raw::c_ushort,
                              hdelta: ::std::os::raw::c_ushort) -> usize {
        _FG_ELEMENT_MouseScroll(&mut *self, x, y, delta, hdelta)
    }
    #[inline]
    pub unsafe fn KeyUp(&mut self, keycode: ::std::os::raw::c_uchar,
                        sigkeys: ::std::os::raw::c_char) -> usize {
        _FG_ELEMENT_KeyUp(&mut *self, keycode, sigkeys)
    }
    #[inline]
    pub unsafe fn KeyDown(&mut self, keycode: ::std::os::raw::c_uchar,
                          sigkeys: ::std::os::raw::c_char) -> usize {
        _FG_ELEMENT_KeyDown(&mut *self, keycode, sigkeys)
    }
    #[inline]
    pub unsafe fn KeyChar(&mut self, keychar: ::std::os::raw::c_int,
                          sigkeys: ::std::os::raw::c_char) -> usize {
        _FG_ELEMENT_KeyChar(&mut *self, keychar, sigkeys)
    }
    #[inline]
    pub unsafe fn JoyButtonDown(&mut self, joybutton: ::std::os::raw::c_short)
     -> usize {
        _FG_ELEMENT_JoyButtonDown(&mut *self, joybutton)
    }
    #[inline]
    pub unsafe fn JoyButtonUp(&mut self, joybutton: ::std::os::raw::c_short)
     -> usize {
        _FG_ELEMENT_JoyButtonUp(&mut *self, joybutton)
    }
    #[inline]
    pub unsafe fn JoyAxis(&mut self, joyvalue: f32,
                          joyaxis: ::std::os::raw::c_short) -> usize {
        _FG_ELEMENT_JoyAxis(&mut *self, joyvalue, joyaxis)
    }
    #[inline]
    pub unsafe fn GotFocus(&mut self) -> usize {
        _FG_ELEMENT_GotFocus(&mut *self)
    }
    #[inline]
    pub unsafe fn LostFocus(&mut self) { _FG_ELEMENT_LostFocus(&mut *self) }
    #[inline]
    pub unsafe fn SetName(&mut self, name: *const ::std::os::raw::c_char)
     -> usize {
        _FG_ELEMENT_SetName(&mut *self, name)
    }
    #[inline]
    pub unsafe fn GetName(&mut self) -> *const ::std::os::raw::c_char {
        _FG_ELEMENT_GetName(&mut *self)
    }
    #[inline]
    pub unsafe fn SetContextMenu(&mut self, menu: *mut _FG_ELEMENT) {
        _FG_ELEMENT_SetContextMenu(&mut *self, menu)
    }
    #[inline]
    pub unsafe fn GetContextMenu(&mut self) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_GetContextMenu(&mut *self)
    }
    #[inline]
    pub unsafe fn Neutral(&mut self) { _FG_ELEMENT_Neutral(&mut *self) }
    #[inline]
    pub unsafe fn Hover(&mut self) { _FG_ELEMENT_Hover(&mut *self) }
    #[inline]
    pub unsafe fn Active(&mut self) { _FG_ELEMENT_Active(&mut *self) }
    #[inline]
    pub unsafe fn Action(&mut self) { _FG_ELEMENT_Action(&mut *self) }
    #[inline]
    pub unsafe fn SetDim(&mut self, x: f32, y: f32, type_: FGDIM) {
        _FG_ELEMENT_SetDim(&mut *self, x, y, type_)
    }
    #[inline]
    pub unsafe fn GetDim(&mut self, type_: FGDIM) -> *const AbsVec {
        _FG_ELEMENT_GetDim(&mut *self, type_)
    }
    #[inline]
    pub unsafe fn GetItem(&mut self, index: usize) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_GetItem(&mut *self, index)
    }
    #[inline]
    pub unsafe fn GetItemAt(&mut self, x: f32, y: f32) -> *mut _FG_ELEMENT {
        _FG_ELEMENT_GetItemAt(&mut *self, x, y)
    }
    #[inline]
    pub unsafe fn GetNumItems(&mut self) -> usize {
        _FG_ELEMENT_GetNumItems(&mut *self)
    }
    #[inline]
    pub unsafe fn GetSelectedItem(&mut self, index: usize)
     -> *mut _FG_ELEMENT {
        _FG_ELEMENT_GetSelectedItem(&mut *self, index)
    }
    #[inline]
    pub unsafe fn GetValue(&mut self, aux: isize) -> usize {
        _FG_ELEMENT_GetValue(&mut *self, aux)
    }
    #[inline]
    pub unsafe fn GetValueF(&mut self, aux: isize) -> f32 {
        _FG_ELEMENT_GetValueF(&mut *self, aux)
    }
    #[inline]
    pub unsafe fn GetValueP(&mut self, aux: isize)
     -> *mut ::std::os::raw::c_void {
        _FG_ELEMENT_GetValueP(&mut *self, aux)
    }
    #[inline]
    pub unsafe fn GetRange(&mut self) -> usize {
        _FG_ELEMENT_GetRange(&mut *self)
    }
    #[inline]
    pub unsafe fn GetRangeF(&mut self) -> f32 {
        _FG_ELEMENT_GetRangeF(&mut *self)
    }
    #[inline]
    pub unsafe fn SetValue(&mut self, value: isize) -> usize {
        _FG_ELEMENT_SetValue(&mut *self, value)
    }
    #[inline]
    pub unsafe fn SetValueF(&mut self, value: f32) -> usize {
        _FG_ELEMENT_SetValueF(&mut *self, value)
    }
    #[inline]
    pub unsafe fn SetValueP(&mut self, ptr: *mut ::std::os::raw::c_void)
     -> usize {
        _FG_ELEMENT_SetValueP(&mut *self, ptr)
    }
    #[inline]
    pub unsafe fn SetRange(&mut self, value: isize) -> usize {
        _FG_ELEMENT_SetRange(&mut *self, value)
    }
    #[inline]
    pub unsafe fn SetRangeF(&mut self, value: f32) -> usize {
        _FG_ELEMENT_SetRangeF(&mut *self, value)
    }
    #[inline]
    pub unsafe fn SetAsset(&mut self, asset: fgAsset) -> usize {
        _FG_ELEMENT_SetAsset(&mut *self, asset)
    }
    #[inline]
    pub unsafe fn SetUV(&mut self, uv: *const CRect) -> usize {
        _FG_ELEMENT_SetUV(&mut *self, uv)
    }
    #[inline]
    pub unsafe fn SetColor(&mut self, color: ::std::os::raw::c_uint,
                           index: FGSETCOLOR) -> usize {
        _FG_ELEMENT_SetColor(&mut *self, color, index)
    }
    #[inline]
    pub unsafe fn SetOutline(&mut self, outline: f32) -> usize {
        _FG_ELEMENT_SetOutline(&mut *self, outline)
    }
    #[inline]
    pub unsafe fn SetFont(&mut self, font: *mut ::std::os::raw::c_void)
     -> usize {
        _FG_ELEMENT_SetFont(&mut *self, font)
    }
    #[inline]
    pub unsafe fn SetLineHeight(&mut self, lineheight: f32) -> usize {
        _FG_ELEMENT_SetLineHeight(&mut *self, lineheight)
    }
    #[inline]
    pub unsafe fn SetLetterSpacing(&mut self, letterspacing: f32) -> usize {
        _FG_ELEMENT_SetLetterSpacing(&mut *self, letterspacing)
    }
    #[inline]
    pub unsafe fn SetText(&mut self, text: *const ::std::os::raw::c_char,
                          fmt: FGTEXTFMT) -> usize {
        _FG_ELEMENT_SetText(&mut *self, text, fmt)
    }
    #[inline]
    pub unsafe fn SetTextW(&mut self, text: *const u16) -> usize {
        _FG_ELEMENT_SetTextW(&mut *self, text)
    }
    #[inline]
    pub unsafe fn SetTextU(&mut self, text: *const ::std::os::raw::c_int)
     -> usize {
        _FG_ELEMENT_SetTextU(&mut *self, text)
    }
    #[inline]
    pub unsafe fn SetPlaceholder(&mut self,
                                 text: *const ::std::os::raw::c_char)
     -> usize {
        _FG_ELEMENT_SetPlaceholder(&mut *self, text)
    }
    #[inline]
    pub unsafe fn SetPlaceholderW(&mut self, text: *const u16) -> usize {
        _FG_ELEMENT_SetPlaceholderW(&mut *self, text)
    }
    #[inline]
    pub unsafe fn SetPlaceholderU(&mut self,
                                  text: *const ::std::os::raw::c_int)
     -> usize {
        _FG_ELEMENT_SetPlaceholderU(&mut *self, text)
    }
    #[inline]
    pub unsafe fn SetMask(&mut self, mask: ::std::os::raw::c_int) -> usize {
        _FG_ELEMENT_SetMask(&mut *self, mask)
    }
    #[inline]
    pub unsafe fn GetAsset(&mut self) -> fgAsset {
        _FG_ELEMENT_GetAsset(&mut *self)
    }
    #[inline]
    pub unsafe fn GetUV(&mut self) -> *const CRect {
        _FG_ELEMENT_GetUV(&mut *self)
    }
    #[inline]
    pub unsafe fn GetColor(&mut self, index: FGSETCOLOR)
     -> ::std::os::raw::c_uint {
        _FG_ELEMENT_GetColor(&mut *self, index)
    }
    #[inline]
    pub unsafe fn GetOutline(&mut self) -> f32 {
        _FG_ELEMENT_GetOutline(&mut *self)
    }
    #[inline]
    pub unsafe fn GetFont(&mut self) -> *mut ::std::os::raw::c_void {
        _FG_ELEMENT_GetFont(&mut *self)
    }
    #[inline]
    pub unsafe fn GetLineHeight(&mut self) -> f32 {
        _FG_ELEMENT_GetLineHeight(&mut *self)
    }
    #[inline]
    pub unsafe fn GetLetterSpacing(&mut self) -> f32 {
        _FG_ELEMENT_GetLetterSpacing(&mut *self)
    }
    #[inline]
    pub unsafe fn GetText(&mut self, fmt: FGTEXTFMT)
     -> *const ::std::os::raw::c_char {
        _FG_ELEMENT_GetText(&mut *self, fmt)
    }
    #[inline]
    pub unsafe fn GetTextW(&mut self) -> *const u16 {
        _FG_ELEMENT_GetTextW(&mut *self)
    }
    #[inline]
    pub unsafe fn GetTextU(&mut self) -> *const ::std::os::raw::c_int {
        _FG_ELEMENT_GetTextU(&mut *self)
    }
    #[inline]
    pub unsafe fn GetPlaceholder(&mut self) -> *const ::std::os::raw::c_char {
        _FG_ELEMENT_GetPlaceholder(&mut *self)
    }
    #[inline]
    pub unsafe fn GetPlaceholderW(&mut self) -> *const u16 {
        _FG_ELEMENT_GetPlaceholderW(&mut *self)
    }
    #[inline]
    pub unsafe fn GetPlaceholderU(&mut self) -> *const ::std::os::raw::c_int {
        _FG_ELEMENT_GetPlaceholderU(&mut *self)
    }
    #[inline]
    pub unsafe fn GetMask(&mut self) -> ::std::os::raw::c_int {
        _FG_ELEMENT_GetMask(&mut *self)
    }
    #[inline]
    pub unsafe fn AddListener(&mut self, type_: ::std::os::raw::c_ushort,
                              listener: fgListener) {
        _FG_ELEMENT_AddListener(&mut *self, type_, listener)
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MSG {
    pub __bindgen_anon_1: _FG_MSG__bindgen_ty_1,
    pub type_: ::std::os::raw::c_ushort,
    pub subtype: ::std::os::raw::c_ushort,
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_MSG__bindgen_ty_1 {
    pub __bindgen_anon_1: _FG_MSG__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _FG_MSG__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: _FG_MSG__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_4: _FG_MSG__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_5: _FG_MSG__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_1 {
    pub x: f32,
    pub y: f32,
    pub __bindgen_anon_1: _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub __bindgen_anon_1: _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub touchindex: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub button: ::std::os::raw::c_uchar,
    pub allbtn: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 2usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 1usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub scrolldelta: ::std::os::raw::c_short,
    pub scrollhdelta: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2>()
               , 2usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2
 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
               , 2usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1>() ,
               12usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_2 {
    pub keychar: ::std::os::raw::c_int,
    pub keycode: ::std::os::raw::c_uchar,
    pub sigkeys: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_3 {
    pub joyvalue: f32,
    pub joyaxis: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_3>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_3>() ,
               4usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_4 {
    pub joydown: ::std::os::raw::c_char,
    pub joybutton: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_4>() ,
               4usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_4>() ,
               2usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MSG__bindgen_ty_1__bindgen_ty_5 {
    pub __bindgen_anon_1: _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub __bindgen_anon_2: _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub p: *mut ::std::os::raw::c_void,
    pub i: isize,
    pub u: usize,
    pub f: FABS,
    pub e: *mut _FG_ELEMENT,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>()
               , 8usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2 {
    pub p2: *mut ::std::os::raw::c_void,
    pub i2: isize,
    pub u2: usize,
    pub f2: FABS,
    pub e2: *mut _FG_ELEMENT,
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2>()
               , 8usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_5__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5>() ,
               16usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1__bindgen_ty_5>() ,
               8usize);
}
impl Clone for _FG_MSG__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_MSG__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_MSG__bindgen_ty_1>() , 16usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG__bindgen_ty_1>() , 8usize);
}
impl Clone for _FG_MSG__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_MSG() {
    assert_eq!(::std::mem::size_of::<_FG_MSG>() , 24usize);
    assert_eq!(::std::mem::align_of::<_FG_MSG>() , 8usize);
}
extern "C" {
    #[link_name = "_ZNK7_FG_MSG9IsPressedEv"]
    pub fn _FG_MSG_IsPressed(this: *const _FG_MSG) -> bool;
}
extern "C" {
    #[link_name = "_ZNK7_FG_MSG11IsShiftDownEv"]
    pub fn _FG_MSG_IsShiftDown(this: *const _FG_MSG) -> bool;
}
extern "C" {
    #[link_name = "_ZNK7_FG_MSG10IsCtrlDownEv"]
    pub fn _FG_MSG_IsCtrlDown(this: *const _FG_MSG) -> bool;
}
extern "C" {
    #[link_name = "_ZNK7_FG_MSG9IsAltDownEv"]
    pub fn _FG_MSG_IsAltDown(this: *const _FG_MSG) -> bool;
}
extern "C" {
    #[link_name = "_ZNK7_FG_MSG6IsHeldEv"]
    pub fn _FG_MSG_IsHeld(this: *const _FG_MSG) -> bool;
}
impl Clone for _FG_MSG {
    fn clone(&self) -> Self { *self }
}
impl _FG_MSG {
    #[inline]
    pub unsafe fn IsPressed(&self) -> bool { _FG_MSG_IsPressed(&*self) }
    #[inline]
    pub unsafe fn IsShiftDown(&self) -> bool { _FG_MSG_IsShiftDown(&*self) }
    #[inline]
    pub unsafe fn IsCtrlDown(&self) -> bool { _FG_MSG_IsCtrlDown(&*self) }
    #[inline]
    pub unsafe fn IsAltDown(&self) -> bool { _FG_MSG_IsAltDown(&*self) }
    #[inline]
    pub unsafe fn IsHeld(&self) -> bool { _FG_MSG_IsHeld(&*self) }
}
pub use self::_FG_MSG as FG_Msg;
extern "C" {
    pub fn ResolveVec(v: *const CVec, last: *const AbsRect) -> AbsVec;
}
extern "C" {
    pub fn CompareMargins(l: *const AbsRect, r: *const AbsRect)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn CompareCRects(l: *const CRect, r: *const CRect)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn CompareTransforms(l: *const fgTransform, r: *const fgTransform)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn MoveCRect(x: FABS, y: FABS, r: *mut CRect);
}
extern "C" {
    pub fn HitAbsRect(r: *const AbsRect, x: FABS, y: FABS)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn ToIntAbsRect(r: *const AbsRect,
                        target: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn ToLongAbsRect(r: *const AbsRect,
                         target: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn MsgHitAbsRect(msg: *const FG_Msg, r: *const AbsRect)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgCopyText(text: *const ::std::os::raw::c_char,
                      file: *const ::std::os::raw::c_char, line: usize)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgFreeText(text: *const ::std::os::raw::c_char,
                      file: *const ::std::os::raw::c_char, line: usize);
}
extern "C" {
    pub fn fgUpdateMouseState(state: *mut fgMouseState, msg: *const FG_Msg);
}
extern "C" {
    pub fn fgRectIntersect(l: *const AbsRect, r: *const AbsRect)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgRectIntersection(l: *const AbsRect, r: *const AbsRect,
                              out: *mut AbsRect);
}
extern "C" {
    pub fn fgScaleRectDPI(rect: *mut AbsRect, dpix: ::std::os::raw::c_int,
                          dpiy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fgUTF32toUTF16(input: *const ::std::os::raw::c_int, srclen: isize,
                          output: *mut u16, buflen: usize) -> usize;
}
extern "C" {
    pub fn fgUTF8toUTF16(input: *const ::std::os::raw::c_char, srclen: isize,
                         output: *mut u16, buflen: usize) -> usize;
}
extern "C" {
    pub fn fgUTF16toUTF8(input: *const u16, srclen: isize,
                         output: *mut ::std::os::raw::c_char, buflen: usize)
     -> usize;
}
extern "C" {
    pub fn fgUTF8toUTF32(input: *const ::std::os::raw::c_char, srclen: isize,
                         output: *mut ::std::os::raw::c_int, buflen: usize)
     -> usize;
}
extern "C" {
    pub fn fgUTF32toUTF8(input: *const ::std::os::raw::c_int, srclen: isize,
                         output: *mut ::std::os::raw::c_char, buflen: usize)
     -> usize;
}
extern "C" {
    pub fn fgUTF16toUTF32(input: *const u16, srclen: isize,
                          output: *mut ::std::os::raw::c_int, buflen: usize)
     -> usize;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DRAW_AUX_DATA {
    pub fgSZ: usize,
    pub dpi: fgIntVec,
    pub scale: AbsVec,
    pub scalecenter: AbsVec,
}
#[test]
fn bindgen_test_layout__FG_DRAW_AUX_DATA() {
    assert_eq!(::std::mem::size_of::<_FG_DRAW_AUX_DATA>() , 32usize);
    assert_eq!(::std::mem::align_of::<_FG_DRAW_AUX_DATA>() , 8usize);
}
impl Clone for _FG_DRAW_AUX_DATA {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_DRAW_AUX_DATA as fgDrawAuxData;
pub const FGELEMENT_FLAGS_FGELEMENT_LAYOUTRESIZE: FGELEMENT_FLAGS =
    FGELEMENT_FLAGS::FGELEMENT_BACKGROUND;
pub const FGELEMENT_FLAGS_FGELEMENT_LAYOUTADD: FGELEMENT_FLAGS =
    FGELEMENT_FLAGS::FGELEMENT_NOCLIP;
pub const FGELEMENT_FLAGS_FGELEMENT_LAYOUTMOVE: FGELEMENT_FLAGS =
    FGELEMENT_FLAGS::FGELEMENT_IGNORE;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGELEMENT_FLAGS {
    FGELEMENT_BACKGROUND = 1,
    FGELEMENT_NOCLIP = 2,
    FGELEMENT_IGNORE = 4,
    FGELEMENT_HIDDEN = 8,
    FGELEMENT_SILENT = 16,
    FGELEMENT_EXPANDX = 32,
    FGELEMENT_EXPANDY = 64,
    FGELEMENT_EXPAND = 96,
    FGELEMENT_SNAPX = 128,
    FGELEMENT_SNAPY = 256,
    FGELEMENT_SNAP = 384,
    FGELEMENT_LAYOUTREMOVE = 3,
    FGELEMENT_LAYOUTREORDER = 5,
    FGELEMENT_LAYOUTRESET = 6,
    FGELEMENT_USEDEFAULTS = -2147483648,
}
pub type fgDestroy =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type fgMessage =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2: *const FG_Msg)
                              -> ::std::os::raw::c_ulonglong>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_STYLE {
    pub styles: *mut fgStyleMsg,
}
#[test]
fn bindgen_test_layout__FG_STYLE() {
    assert_eq!(::std::mem::size_of::<_FG_STYLE>() , 8usize);
    assert_eq!(::std::mem::align_of::<_FG_STYLE>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN9_FG_STYLE11AddStyleMsgEPK7_FG_MSG"]
    pub fn _FG_STYLE_AddStyleMsg(this: *mut _FG_STYLE, msg: *const FG_Msg)
     -> *mut fgStyleMsg;
}
extern "C" {
    #[link_name = "_ZN9_FG_STYLE14RemoveStyleMsgEP13_FG_STYLE_MSG"]
    pub fn _FG_STYLE_RemoveStyleMsg(this: *mut _FG_STYLE,
                                    msg: *mut fgStyleMsg);
}
impl Clone for _FG_STYLE {
    fn clone(&self) -> Self { *self }
}
impl _FG_STYLE {
    #[inline]
    pub unsafe fn AddStyleMsg(&mut self, msg: *const FG_Msg)
     -> *mut fgStyleMsg {
        _FG_STYLE_AddStyleMsg(&mut *self, msg)
    }
    #[inline]
    pub unsafe fn RemoveStyleMsg(&mut self, msg: *mut fgStyleMsg) {
        _FG_STYLE_RemoveStyleMsg(&mut *self, msg)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_SKIN {
    pub base: _FG_SKIN_BASE,
    pub inherit: *mut _FG_SKIN,
    pub style: fgStyle,
    pub tree: fgSkinTree,
}
#[test]
fn bindgen_test_layout__FG_SKIN() {
    assert_eq!(::std::mem::size_of::<_FG_SKIN>() , 112usize);
    assert_eq!(::std::mem::align_of::<_FG_SKIN>() , 8usize);
}
extern "C" {
    #[link_name = "_ZNK8_FG_SKIN7GetSkinEPKc"]
    pub fn _FG_SKIN_GetSkin(this: *const _FG_SKIN,
                            name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN;
}
impl Clone for _FG_SKIN {
    fn clone(&self) -> Self { *self }
}
impl _FG_SKIN {
    #[inline]
    pub unsafe fn GetSkin(&self, name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN {
        _FG_SKIN_GetSkin(&*self, name)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_LAYOUT {
    pub base: fgSkinBase,
    pub style: fgStyle,
    pub layout: fgVectorClassLayout,
}
#[test]
fn bindgen_test_layout__FG_LAYOUT() {
    assert_eq!(::std::mem::size_of::<_FG_LAYOUT>() , 96usize);
    assert_eq!(::std::mem::align_of::<_FG_LAYOUT>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT9AddLayoutEPKcS1_jPK11fgTransformsi"]
    pub fn _FG_LAYOUT_AddLayout(this: *mut _FG_LAYOUT,
                                type_: *const ::std::os::raw::c_char,
                                name: *const ::std::os::raw::c_char,
                                flags: fgFlag, transform: *const fgTransform,
                                units: ::std::os::raw::c_short,
                                order: ::std::os::raw::c_int) -> FG_UINT;
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT12RemoveLayoutEj"]
    pub fn _FG_LAYOUT_RemoveLayout(this: *mut _FG_LAYOUT, layout: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK10_FG_LAYOUT9GetLayoutEj"]
    pub fn _FG_LAYOUT_GetLayout(this: *const _FG_LAYOUT, layout: FG_UINT)
     -> *mut fgClassLayout;
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT14LoadFileUBJSONEPKc"]
    pub fn _FG_LAYOUT_LoadFileUBJSON(this: *mut _FG_LAYOUT,
                                     file: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT10LoadUBJSONEPKcj"]
    pub fn _FG_LAYOUT_LoadUBJSON(this: *mut _FG_LAYOUT,
                                 data: *const ::std::os::raw::c_char,
                                 length: FG_UINT);
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT14SaveFileUBJSONEPKc"]
    pub fn _FG_LAYOUT_SaveFileUBJSON(this: *mut _FG_LAYOUT,
                                     file: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT11LoadFileXMLEPKc"]
    pub fn _FG_LAYOUT_LoadFileXML(this: *mut _FG_LAYOUT,
                                  file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT7LoadXMLEPKcj"]
    pub fn _FG_LAYOUT_LoadXML(this: *mut _FG_LAYOUT,
                              data: *const ::std::os::raw::c_char,
                              length: FG_UINT) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZN10_FG_LAYOUT11SaveFileXMLEPKc"]
    pub fn _FG_LAYOUT_SaveFileXML(this: *mut _FG_LAYOUT,
                                  file: *const ::std::os::raw::c_char);
}
impl Clone for _FG_LAYOUT {
    fn clone(&self) -> Self { *self }
}
impl _FG_LAYOUT {
    #[inline]
    pub unsafe fn AddLayout(&mut self, type_: *const ::std::os::raw::c_char,
                            name: *const ::std::os::raw::c_char,
                            flags: fgFlag, transform: *const fgTransform,
                            units: ::std::os::raw::c_short,
                            order: ::std::os::raw::c_int) -> FG_UINT {
        _FG_LAYOUT_AddLayout(&mut *self, type_, name, flags, transform, units,
                             order)
    }
    #[inline]
    pub unsafe fn RemoveLayout(&mut self, layout: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_LAYOUT_RemoveLayout(&mut *self, layout)
    }
    #[inline]
    pub unsafe fn GetLayout(&self, layout: FG_UINT) -> *mut fgClassLayout {
        _FG_LAYOUT_GetLayout(&*self, layout)
    }
    #[inline]
    pub unsafe fn LoadFileUBJSON(&mut self,
                                 file: *const ::std::os::raw::c_char) {
        _FG_LAYOUT_LoadFileUBJSON(&mut *self, file)
    }
    #[inline]
    pub unsafe fn LoadUBJSON(&mut self, data: *const ::std::os::raw::c_char,
                             length: FG_UINT) {
        _FG_LAYOUT_LoadUBJSON(&mut *self, data, length)
    }
    #[inline]
    pub unsafe fn SaveFileUBJSON(&mut self,
                                 file: *const ::std::os::raw::c_char) {
        _FG_LAYOUT_SaveFileUBJSON(&mut *self, file)
    }
    #[inline]
    pub unsafe fn LoadFileXML(&mut self, file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char {
        _FG_LAYOUT_LoadFileXML(&mut *self, file)
    }
    #[inline]
    pub unsafe fn LoadXML(&mut self, data: *const ::std::os::raw::c_char,
                          length: FG_UINT) -> ::std::os::raw::c_char {
        _FG_LAYOUT_LoadXML(&mut *self, data, length)
    }
    #[inline]
    pub unsafe fn SaveFileXML(&mut self,
                              file: *const ::std::os::raw::c_char) {
        _FG_LAYOUT_SaveFileXML(&mut *self, file)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgUserdata_t {
    pub _address: u8,
}
impl Clone for __kh_fgUserdata_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__Element {
    pub p: *mut *mut _FG_ELEMENT,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__Element() {
    assert_eq!(::std::mem::size_of::<__VECTOR__Element>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__Element>() , 8usize);
}
impl Clone for __VECTOR__Element {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__Element as fgVectorElement;
pub type fun_fgListener =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut _FG_ELEMENT,
                                               arg2: *const FG_Msg)>;
pub use self::_FG_ELEMENT as fgElement;
extern "C" {
    pub fn fgElement_InternalSetup(self_: *mut fgElement,
                                   parent: *mut fgElement,
                                   next: *mut fgElement,
                                   name: *const ::std::os::raw::c_char,
                                   flags: fgFlag,
                                   transform: *const fgTransform,
                                   units: ::std::os::raw::c_ushort,
                                   destroy:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut ::std::os::raw::c_void)>,
                                   message:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  arg2:
                                                                                      *const FG_Msg)
                                                                 ->
                                                                     ::std::os::raw::c_ulonglong>);
}
extern "C" {
    pub fn fgElement_Init(self_: *mut fgElement, parent: *mut fgElement,
                          next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgElement_Destroy(self_: *mut fgElement);
}
extern "C" {
    pub fn fgElement_Message(self_: *mut fgElement, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgElement_GetChildUnderMouse(self_: *mut fgElement, x: f32, y: f32,
                                        cache: *mut AbsRect)
     -> *mut fgElement;
}
extern "C" {
    pub fn fgElement_ClearListeners(self_: *mut fgElement);
}
extern "C" {
    pub fn fgElement_CheckLastFocus(self_: *mut fgElement) -> usize;
}
extern "C" {
    pub fn fgElement_ApplyMessageArray(search: *mut fgElement,
                                       target: *mut fgElement,
                                       src: *mut fgVector);
}
extern "C" {
    pub fn fgDimMessage(self_: *mut fgElement,
                        type_: ::std::os::raw::c_ushort,
                        subtype: ::std::os::raw::c_ushort, x: f32, y: f32)
     -> usize;
}
extern "C" {
    pub fn fgFloatMessage(self_: *mut fgElement,
                          type_: ::std::os::raw::c_ushort,
                          subtype: ::std::os::raw::c_ushort, data: f32,
                          aux: isize) -> usize;
}
extern "C" {
    pub fn fgGetFloatMessage(self_: *mut fgElement,
                             type_: ::std::os::raw::c_ushort,
                             subtype: ::std::os::raw::c_ushort, aux: isize)
     -> f32;
}
extern "C" {
    pub fn fgIntMessage(self_: *mut fgElement,
                        type_: ::std::os::raw::c_ushort, data: isize,
                        aux: usize) -> usize;
}
extern "C" {
    pub fn fgVoidMessage(self_: *mut fgElement,
                         type_: ::std::os::raw::c_ushort,
                         data: *mut ::std::os::raw::c_void, aux: isize)
     -> usize;
}
extern "C" {
    pub fn fgPassMessage(self_: *mut fgElement, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgSubMessage(self_: *mut fgElement,
                        type_: ::std::os::raw::c_ushort,
                        subtype: ::std::os::raw::c_ushort,
                        data: *mut ::std::os::raw::c_void, aux: isize)
     -> usize;
}
extern "C" {
    pub fn fgGetPtrMessage(self_: *mut fgElement,
                           type_: ::std::os::raw::c_ushort,
                           subtype: ::std::os::raw::c_ushort, data: usize,
                           aux: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ResolveOuterRect(self_: *const fgElement, out: *mut AbsRect);
}
extern "C" {
    pub fn ResolveOuterRectCache(self_: *const fgElement, out: *mut AbsRect,
                                 last: *const AbsRect,
                                 padding: *const AbsRect);
}
extern "C" {
    pub fn ResolveRect(self_: *const fgElement, out: *mut AbsRect);
}
extern "C" {
    pub fn ResolveRectCache(self_: *const fgElement, out: *mut AbsRect,
                            last: *const AbsRect, padding: *const AbsRect);
}
extern "C" {
    pub fn ResolveInnerRect(self_: *const fgElement, out: *mut AbsRect);
}
extern "C" {
    pub fn GetInnerRect(self_: *const fgElement, inner: *mut AbsRect,
                        standard: *const AbsRect);
}
extern "C" {
    pub fn ResolveNoClipRect(self_: *const fgElement, out: *mut AbsRect);
}
extern "C" {
    pub fn MsgHitElement(msg: *const FG_Msg, element: *const fgElement)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn VirtualFreeChild(self_: *mut fgElement);
}
extern "C" {
    pub fn fgElement_Clear(self_: *mut fgElement);
}
extern "C" {
    pub fn fgElement_MouseMoveCheck(self_: *mut fgElement);
}
extern "C" {
    pub fn fgElement_AddListener(self_: *mut fgElement,
                                 type_: ::std::os::raw::c_ushort,
                                 listener: fgListener);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGCONTROL_FLAGS { FGCONTROL_DISABLE = 512, }
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MENU {
    pub box_: fgBox,
    pub arrow: fgElement,
    pub expanded: *mut _FG_MENU,
}
#[test]
fn bindgen_test_layout__FG_MENU() {
    assert_eq!(::std::mem::size_of::<_FG_MENU>() , 6456usize);
    assert_eq!(::std::mem::align_of::<_FG_MENU>() , 8usize);
}
impl Clone for _FG_MENU {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_CONTROL {
    pub element: fgElement,
    pub contextmenu: *mut fgElement,
    pub tabnext: *mut _FG_CONTROL,
    pub tabprev: *mut _FG_CONTROL,
    pub sidenext: *mut _FG_CONTROL,
    pub sideprev: *mut _FG_CONTROL,
}
#[test]
fn bindgen_test_layout__FG_CONTROL() {
    assert_eq!(::std::mem::size_of::<_FG_CONTROL>() , 360usize);
    assert_eq!(::std::mem::align_of::<_FG_CONTROL>() , 8usize);
}
impl Clone for _FG_CONTROL {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_CONTROL as fgControl;
extern "C" {
    #[link_name = "fgFocusedWindow"]
    pub static mut fgFocusedWindow: *mut fgElement;
}
extern "C" {
    #[link_name = "fgLastHover"]
    pub static mut fgLastHover: *mut fgElement;
}
extern "C" {
    #[link_name = "fgCaptureWindow"]
    pub static mut fgCaptureWindow: *mut fgElement;
}
extern "C" {
    pub fn fgControl_Init(self_: *mut fgControl, parent: *mut fgElement,
                          next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgControl_Destroy(self_: *mut fgControl);
}
extern "C" {
    pub fn fgControl_Message(self_: *mut fgControl, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgControl_HoverMessage(self_: *mut fgControl, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgControl_ActionMessage(self_: *mut fgControl, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgControl_TabAfter(self_: *mut fgControl, prev: *mut fgControl);
}
extern "C" {
    pub fn fgControl_TabBefore(self_: *mut fgControl, next: *mut fgControl);
}
extern "C" {
    pub fn fgElement_DoHoverCalc(self_: *mut fgElement);
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_ROOT {
    pub gui: fgControl,
    pub backend: fgBackend,
    pub monitors: *mut _FG_MONITOR,
    pub updateroot: *mut fgDeferAction,
    pub radiohash: *mut __kh_fgRadioGroup_t,
    pub functionhash: *mut __kh_fgFunctionMap_t,
    pub idmap: *mut __kh_fgIDMap_t,
    pub idhash: *mut __kh_fgIDHash_t,
    pub initmap: *mut _FG_ROOT___kh_fgInitMap_t,
    pub cursormap: *mut __kh_fgCursorMap_t,
    pub dpi: fgIntVec,
    pub lineheight: f32,
    pub fontscale: f32,
    pub time: f64,
    pub cursor: ::std::os::raw::c_uint,
    pub cursorblink: f64,
    pub mouse: fgMouseState,
    pub dragtype: ::std::os::raw::c_char,
    pub dragdata: *mut ::std::os::raw::c_void,
    pub dragdraw: *mut fgElement,
    pub topmost: *mut fgElement,
    pub keys: [::std::os::raw::c_uint; 8usize],
    pub aniroot: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_ROOT___kh_fgInitMap_t {
    pub _address: u8,
}
impl Clone for _FG_ROOT___kh_fgInitMap_t {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_ROOT() {
    assert_eq!(::std::mem::size_of::<_FG_ROOT>() , 800usize);
    assert_eq!(::std::mem::align_of::<_FG_ROOT>() , 8usize);
}
extern "C" {
    #[link_name = "_ZNK8_FG_ROOT6GetKeyEh"]
    pub fn _FG_ROOT_GetKey(this: *const _FG_ROOT,
                           key: ::std::os::raw::c_uchar) -> bool;
}
impl Clone for _FG_ROOT {
    fn clone(&self) -> Self { *self }
}
impl _FG_ROOT {
    #[inline]
    pub unsafe fn GetKey(&self, key: ::std::os::raw::c_uchar) -> bool {
        _FG_ROOT_GetKey(&*self, key)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__KeyValue {
    pub p: *mut _FG_KEY_VALUE,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__KeyValue() {
    assert_eq!(::std::mem::size_of::<__VECTOR__KeyValue>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__KeyValue>() , 8usize);
}
impl Clone for __VECTOR__KeyValue {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_FONT_DESC {
    pub ascender: FABS,
    pub descender: FABS,
    pub lineheight: FABS,
    pub pt: ::std::os::raw::c_uint,
    pub dpi: fgIntVec,
}
#[test]
fn bindgen_test_layout__FG_FONT_DESC() {
    assert_eq!(::std::mem::size_of::<_FG_FONT_DESC>() , 24usize);
    assert_eq!(::std::mem::align_of::<_FG_FONT_DESC>() , 4usize);
}
impl Clone for _FG_FONT_DESC {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_BACKEND {
    pub BackendTextFormat: FGTEXTFMT,
    pub fgCreateFont: ::std::option::Option<unsafe extern "C" fn(flags:
                                                                     fgFlag,
                                                                 font:
                                                                     *const ::std::os::raw::c_char,
                                                                 fontsize:
                                                                     ::std::os::raw::c_uint,
                                                                 dpi:
                                                                     *const fgIntVec)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub fgCloneFont: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                desc:
                                                                    *const _FG_FONT_DESC)
                                               ->
                                                   *mut ::std::os::raw::c_void>,
    pub fgDestroyFont: ::std::option::Option<unsafe extern "C" fn(font:
                                                                      fgFont)>,
    pub fgDrawFont: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                               text:
                                                                   *const ::std::os::raw::c_void,
                                                               len: usize,
                                                               lineheight:
                                                                   f32,
                                                               letterspacing:
                                                                   f32,
                                                               color:
                                                                   ::std::os::raw::c_uint,
                                                               area:
                                                                   *const AbsRect,
                                                               rotation: FABS,
                                                               center:
                                                                   *const AbsVec,
                                                               flags: fgFlag,
                                                               data:
                                                                   *const fgDrawAuxData,
                                                               layout:
                                                                   *mut ::std::os::raw::c_void)>,
    pub fgFontLayout: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                 text:
                                                                     *const ::std::os::raw::c_void,
                                                                 len: usize,
                                                                 lineheight:
                                                                     f32,
                                                                 letterspacing:
                                                                     f32,
                                                                 area:
                                                                     *mut AbsRect,
                                                                 flags:
                                                                     fgFlag,
                                                                 prevlayout:
                                                                     *mut ::std::os::raw::c_void)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub fgFontGet: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                              desc:
                                                                  *mut _FG_FONT_DESC)>,
    pub fgFontIndex: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                                text:
                                                                    *const ::std::os::raw::c_void,
                                                                len: usize,
                                                                lineheight:
                                                                    f32,
                                                                letterspacing:
                                                                    f32,
                                                                area:
                                                                    *const AbsRect,
                                                                flags: fgFlag,
                                                                pos: AbsVec,
                                                                cursor:
                                                                    *mut AbsVec,
                                                                layout:
                                                                    *mut ::std::os::raw::c_void)
                                               ->
                                                   ::std::os::raw::c_ulonglong>,
    pub fgFontPos: ::std::option::Option<unsafe extern "C" fn(font: fgFont,
                                                              text:
                                                                  *const ::std::os::raw::c_void,
                                                              len: usize,
                                                              lineheight: f32,
                                                              letterspacing:
                                                                  f32,
                                                              area:
                                                                  *const AbsRect,
                                                              flags: fgFlag,
                                                              index: usize,
                                                              layout:
                                                                  *mut ::std::os::raw::c_void)
                                             -> _bindgen_ty_10>,
    pub fgCreateAsset: ::std::option::Option<unsafe extern "C" fn(flags:
                                                                      fgFlag,
                                                                  data:
                                                                      *const ::std::os::raw::c_char,
                                                                  length:
                                                                      usize)
                                                 ->
                                                     *mut ::std::os::raw::c_void>,
    pub fgCloneAsset: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                     fgAsset,
                                                                 src:
                                                                     *mut fgElement)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub fgDestroyAsset: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                       fgAsset)>,
    pub fgDrawAsset: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                    fgAsset,
                                                                uv:
                                                                    *const CRect,
                                                                color:
                                                                    ::std::os::raw::c_uint,
                                                                edge:
                                                                    ::std::os::raw::c_uint,
                                                                outline: FABS,
                                                                area:
                                                                    *const AbsRect,
                                                                rotation:
                                                                    FABS,
                                                                center:
                                                                    *const AbsVec,
                                                                flags: fgFlag,
                                                                data:
                                                                    *const fgDrawAuxData)>,
    pub fgAssetSize: ::std::option::Option<unsafe extern "C" fn(asset:
                                                                    fgAsset,
                                                                uv:
                                                                    *const CRect,
                                                                dim:
                                                                    *mut AbsVec,
                                                                flags:
                                                                    fgFlag)>,
    pub fgDrawLines: ::std::option::Option<unsafe extern "C" fn(p:
                                                                    *const AbsVec,
                                                                n: usize,
                                                                color:
                                                                    ::std::os::raw::c_uint,
                                                                translate:
                                                                    *const AbsVec,
                                                                scale:
                                                                    *const AbsVec,
                                                                rotation:
                                                                    FABS,
                                                                center:
                                                                    *const AbsVec,
                                                                data:
                                                                    *const fgDrawAuxData)>,
    pub fgCreate: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                 *const ::std::os::raw::c_char,
                                                             parent:
                                                                 *mut fgElement,
                                                             next:
                                                                 *mut fgElement,
                                                             name:
                                                                 *const ::std::os::raw::c_char,
                                                             flags: fgFlag,
                                                             transform:
                                                                 *const fgTransform,
                                                             units:
                                                                 ::std::os::raw::c_ushort)
                                            -> *mut _FG_ELEMENT>,
    pub fgMessageMap: ::std::option::Option<unsafe extern "C" fn(name:
                                                                     *const ::std::os::raw::c_char)
                                                -> ::std::os::raw::c_short>,
    pub fgUserDataMap: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut fgElement,
                                                                  pairs:
                                                                      *mut __VECTOR__KeyValue)>,
    pub fgPushClipRect: ::std::option::Option<unsafe extern "C" fn(clip:
                                                                       *const AbsRect,
                                                                   data:
                                                                       *const fgDrawAuxData)>,
    pub fgPeekClipRect: ::std::option::Option<unsafe extern "C" fn(data:
                                                                       *const fgDrawAuxData)
                                                  -> _bindgen_ty_14>,
    pub fgPopClipRect: ::std::option::Option<unsafe extern "C" fn(data:
                                                                      *const fgDrawAuxData)>,
    pub fgDragStart: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                    ::std::os::raw::c_char,
                                                                data:
                                                                    *mut ::std::os::raw::c_void,
                                                                draw:
                                                                    *mut fgElement)>,
    pub fgSetCursor: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                    ::std::os::raw::c_uint,
                                                                custom:
                                                                    *mut ::std::os::raw::c_void)>,
    pub fgClipboardCopy: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                        ::std::os::raw::c_uint,
                                                                    data:
                                                                        *const ::std::os::raw::c_void,
                                                                    length:
                                                                        usize)>,
    pub fgClipboardExists: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                          ::std::os::raw::c_uint)
                                                     ->
                                                         ::std::os::raw::c_char>,
    pub fgClipboardPaste: ::std::option::Option<unsafe extern "C" fn(type_:
                                                                         ::std::os::raw::c_uint,
                                                                     length:
                                                                         *mut usize)
                                                    ->
                                                        *const ::std::os::raw::c_void>,
    pub fgClipboardFree: ::std::option::Option<unsafe extern "C" fn(mem:
                                                                        *const ::std::os::raw::c_void)>,
    pub fgDirtyElement: ::std::option::Option<unsafe extern "C" fn(elem:
                                                                       *mut fgElement)>,
    pub behaviorhook: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _FG_ELEMENT,
                                                                 msg:
                                                                     *const FG_Msg)
                                                ->
                                                    ::std::os::raw::c_ulonglong>,
    pub fgProcessMessages: ::std::option::Option<unsafe extern "C" fn()
                                                     ->
                                                         ::std::os::raw::c_char>,
    pub fgLoadExtension: ::std::option::Option<unsafe extern "C" fn(extname:
                                                                        *const ::std::os::raw::c_char,
                                                                    fg:
                                                                        *mut ::std::os::raw::c_void,
                                                                    sz: usize)
                                                   ->
                                                       ::std::os::raw::c_ulonglong>,
    pub fgTerminate: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout__FG_BACKEND() {
    assert_eq!(::std::mem::size_of::<_FG_BACKEND>() , 256usize);
    assert_eq!(::std::mem::align_of::<_FG_BACKEND>() , 8usize);
}
impl Clone for _FG_BACKEND {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_BACKEND as fgBackend;
extern "C" {
    pub fn fgInitialize() -> *mut _FG_ROOT;
}
extern "C" {
    pub fn fgCreateFontDefault(flags: fgFlag,
                               font: *const ::std::os::raw::c_char,
                               fontsize: ::std::os::raw::c_uint,
                               dpi: *const fgIntVec)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgCloneFontDefault(font: *mut ::std::os::raw::c_void,
                              desc: *const _FG_FONT_DESC)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgDestroyFontDefault(font: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fgDrawFontDefault(font: *mut ::std::os::raw::c_void,
                             text: *const ::std::os::raw::c_void, len: usize,
                             lineheight: f32, letterspacing: f32,
                             color: ::std::os::raw::c_uint,
                             area: *const AbsRect, rotation: FABS,
                             center: *const AbsVec, flags: fgFlag,
                             data: *const fgDrawAuxData,
                             layout: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fgFontLayoutDefault(font: *mut ::std::os::raw::c_void,
                               text: *const ::std::os::raw::c_void,
                               len: usize, lineheight: f32,
                               letterspacing: f32, area: *mut AbsRect,
                               flag: fgFlag,
                               prevlayouts: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgFontGetDefault(font: *mut ::std::os::raw::c_void,
                            desc: *mut _FG_FONT_DESC);
}
extern "C" {
    pub fn fgFontIndexDefault(font: *mut ::std::os::raw::c_void,
                              text: *const ::std::os::raw::c_void, len: usize,
                              lineheight: f32, letterspacing: f32,
                              area: *const AbsRect, flags: fgFlag,
                              pos: AbsVec, cursor: *mut AbsVec,
                              cache: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn fgFontPosDefault(font: *mut ::std::os::raw::c_void,
                            text: *const ::std::os::raw::c_void, len: usize,
                            lineheight: f32, letterspacing: f32,
                            area: *const AbsRect, flags: fgFlag, index: usize,
                            cache: *mut ::std::os::raw::c_void) -> AbsVec;
}
extern "C" {
    pub fn fgCreateAssetDefault(flags: fgFlag,
                                data: *const ::std::os::raw::c_char,
                                length: usize) -> fgAsset;
}
extern "C" {
    pub fn fgCloneAssetDefault(asset: fgAsset, src: *mut fgElement)
     -> fgAsset;
}
extern "C" {
    pub fn fgDestroyAssetDefault(asset: fgAsset);
}
extern "C" {
    pub fn fgDrawAssetDefault(asset: fgAsset, uv: *const CRect,
                              color: ::std::os::raw::c_uint,
                              edge: ::std::os::raw::c_uint, outline: FABS,
                              area: *const AbsRect, rotation: FABS,
                              center: *const AbsVec, flags: fgFlag,
                              data: *const fgDrawAuxData);
}
extern "C" {
    pub fn fgAssetSizeDefault(asset: fgAsset, uv: *const CRect,
                              dim: *mut AbsVec, flags: fgFlag);
}
extern "C" {
    pub fn fgDrawLinesDefault(p: *const AbsVec, n: usize,
                              color: ::std::os::raw::c_uint,
                              translate: *const AbsVec, scale: *const AbsVec,
                              rotation: FABS, center: *const AbsVec,
                              data: *const fgDrawAuxData);
}
extern "C" {
    pub fn fgCreateDefault(type_: *const ::std::os::raw::c_char,
                           parent: *mut fgElement, next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort) -> *mut fgElement;
}
extern "C" {
    pub fn fgMessageMapDefault(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn fgUserDataMapDefault(self_: *mut fgElement,
                                pairs: *mut __VECTOR__KeyValue);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_KEY_VALUE {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_KEY_VALUE() {
    assert_eq!(::std::mem::size_of::<_FG_KEY_VALUE>() , 16usize);
    assert_eq!(::std::mem::align_of::<_FG_KEY_VALUE>() , 8usize);
}
impl Clone for _FG_KEY_VALUE {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn fgUserDataMapDefaultProcess(self_: *mut fgElement,
                                       pair: *mut _FG_KEY_VALUE);
}
extern "C" {
    pub fn fgUserDataMapCallbacks(self_: *mut fgElement,
                                  pairs: *mut __VECTOR__KeyValue);
}
extern "C" {
    pub fn fgUserDataMapCallbacksProcess(self_: *mut fgElement,
                                         pair: *mut _FG_KEY_VALUE);
}
extern "C" {
    pub fn fgPushClipRectDefault(clip: *const AbsRect,
                                 data: *const fgDrawAuxData);
}
extern "C" {
    pub fn fgPeekClipRectDefault(data: *const fgDrawAuxData) -> AbsRect;
}
extern "C" {
    pub fn fgPopClipRectDefault(data: *const fgDrawAuxData);
}
extern "C" {
    pub fn fgDragStartDefault(type_: ::std::os::raw::c_char,
                              data: *mut ::std::os::raw::c_void,
                              draw: *mut fgElement);
}
extern "C" {
    pub fn fgSetCursorDefault(type_: ::std::os::raw::c_uint,
                              custom: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn fgClipboardCopyDefault(type_: ::std::os::raw::c_uint,
                                  data: *const ::std::os::raw::c_void,
                                  length: usize);
}
extern "C" {
    pub fn fgClipboardExistsDefault(type_: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgClipboardPasteDefault(type_: ::std::os::raw::c_uint,
                                   length: *mut usize)
     -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgClipboardFreeDefault(mem: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn fgDirtyElementDefault(elem: *mut fgElement);
}
extern "C" {
    pub fn fgBehaviorHookDefault(self_: *mut fgElement, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgBehaviorHookListener(self_: *mut fgElement, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgProcessMessagesDefault() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgLoadExtensionDefault(extname: *const ::std::os::raw::c_char,
                                  fg: *mut ::std::os::raw::c_void, sz: usize)
     -> usize;
}
extern "C" {
    pub fn fgTerminateDefault();
}
extern "C" {
    pub fn fgLoadBackend(dll: *const ::std::os::raw::c_char) -> *mut _FG_ROOT;
}
extern "C" {
    pub fn fgUnloadBackend();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgRadioGroup_t {
    pub _address: u8,
}
impl Clone for __kh_fgRadioGroup_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgFunctionMap_t {
    pub _address: u8,
}
impl Clone for __kh_fgFunctionMap_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgIDMap_t {
    pub _address: u8,
}
impl Clone for __kh_fgIDMap_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgCursorMap_t {
    pub _address: u8,
}
impl Clone for __kh_fgCursorMap_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgIDHash_t {
    pub _address: u8,
}
impl Clone for __kh_fgIDHash_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MONITOR {
    pub element: fgElement,
    pub coverage: AbsRect,
    pub dpi: fgIntVec,
    pub mnext: *mut _FG_MONITOR,
    pub mprev: *mut _FG_MONITOR,
}
#[test]
fn bindgen_test_layout__FG_MONITOR() {
    assert_eq!(::std::mem::size_of::<_FG_MONITOR>() , 360usize);
    assert_eq!(::std::mem::align_of::<_FG_MONITOR>() , 8usize);
}
impl Clone for _FG_MONITOR {
    fn clone(&self) -> Self { *self }
}
pub type fgInitializer =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut fgElement,
                                               arg2: *mut fgElement,
                                               arg3: *mut fgElement,
                                               arg4:
                                                   *const ::std::os::raw::c_char,
                                               arg5: fgFlag,
                                               arg6: *const fgTransform,
                                               arg7:
                                                   ::std::os::raw::c_ushort)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEFER_ACTION {
    pub next: *mut _FG_DEFER_ACTION,
    pub prev: *mut _FG_DEFER_ACTION,
    pub action: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_char>,
    pub arg: *mut ::std::os::raw::c_void,
    pub time: f64,
}
#[test]
fn bindgen_test_layout__FG_DEFER_ACTION() {
    assert_eq!(::std::mem::size_of::<_FG_DEFER_ACTION>() , 40usize);
    assert_eq!(::std::mem::align_of::<_FG_DEFER_ACTION>() , 8usize);
}
impl Clone for _FG_DEFER_ACTION {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_DEFER_ACTION as fgDeferAction;
pub use self::_FG_ROOT as fgRoot;
extern "C" {
    pub fn fgSingleton() -> *mut fgRoot;
}
extern "C" {
    pub fn fgLoadExtension(extname: *const ::std::os::raw::c_char,
                           fg: *mut ::std::os::raw::c_void, sz: usize)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgRoot_Init(self_: *mut fgRoot, area: *const AbsRect,
                       dpi: *const fgIntVec, backend: *const fgBackend);
}
extern "C" {
    pub fn fgRoot_Destroy(self_: *mut fgRoot);
}
extern "C" {
    pub fn fgRoot_Message(self_: *mut fgRoot, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgRoot_Inject(self_: *mut fgRoot, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgRoot_Update(self_: *mut fgRoot, delta: f64);
}
extern "C" {
    pub fn fgRoot_CheckMouseMove(self_: *mut fgRoot);
}
extern "C" {
    pub fn fgRoot_AllocAction(action:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)
                                                            ->
                                                                ::std::os::raw::c_char>,
                              arg: *mut ::std::os::raw::c_void, time: f64)
     -> *mut fgDeferAction;
}
extern "C" {
    pub fn fgRoot_DeallocAction(self_: *mut fgRoot,
                                action: *mut fgDeferAction);
}
extern "C" {
    pub fn fgRoot_AddAction(self_: *mut fgRoot, action: *mut fgDeferAction);
}
extern "C" {
    pub fn fgRoot_RemoveAction(self_: *mut fgRoot,
                               action: *mut fgDeferAction);
}
extern "C" {
    pub fn fgRoot_ModifyAction(self_: *mut fgRoot,
                               action: *mut fgDeferAction);
}
extern "C" {
    pub fn fgRoot_GetMonitor(self_: *const fgRoot, rect: *const AbsRect)
     -> *mut _FG_MONITOR;
}
extern "C" {
    pub fn fgRoot_GetID(self_: *mut fgRoot, id: *const ::std::os::raw::c_char)
     -> *mut fgElement;
}
extern "C" {
    pub fn fgRoot_AddID(self_: *mut fgRoot, id: *const ::std::os::raw::c_char,
                        element: *mut fgElement);
}
extern "C" {
    pub fn fgRoot_RemoveID(self_: *mut fgRoot, element: *mut fgElement)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgStandardInject(self_: *mut fgElement, msg: *const FG_Msg,
                            area: *const AbsRect) -> usize;
}
extern "C" {
    pub fn fgOrderedInject(self_: *mut fgElement, msg: *const FG_Msg,
                           area: *const AbsRect, skip: *mut fgElement,
                           fn_:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut fgElement,
                                                                          arg2:
                                                                              *const FG_Msg)
                                                         -> *mut _FG_ELEMENT>)
     -> usize;
}
extern "C" {
    pub fn fgStandardDraw(self_: *mut fgElement, area: *const AbsRect,
                          aux: *const fgDrawAuxData,
                          culled: ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgOrderedDraw(self_: *mut fgElement, area: *const AbsRect,
                         aux: *const fgDrawAuxData,
                         culled: ::std::os::raw::c_char, skip: *mut fgElement,
                         fn_:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut fgElement,
                                                                        arg2:
                                                                            *const AbsRect,
                                                                        arg3:
                                                                            *const AbsRect)
                                                       -> *mut _FG_ELEMENT>,
                         draw:
                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                            *mut fgElement,
                                                                        arg2:
                                                                            *const AbsRect,
                                                                        arg3:
                                                                            *const fgDrawAuxData)>);
}
extern "C" {
    pub fn fgDrawSkin(self_: *mut fgElement, skin: *const _FG_SKIN,
                      area: *const AbsRect, aux: *const fgDrawAuxData,
                      culled: ::std::os::raw::c_char,
                      foreground: ::std::os::raw::c_char,
                      clipping: ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgCreate(type_: *const ::std::os::raw::c_char,
                    parent: *mut fgElement, next: *mut fgElement,
                    name: *const ::std::os::raw::c_char, flags: fgFlag,
                    transform: *const fgTransform,
                    units: ::std::os::raw::c_ushort) -> *mut fgElement;
}
extern "C" {
    pub fn fgRegisterCursor(cursor: ::std::os::raw::c_int,
                            data: *const ::std::os::raw::c_void, sz: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgRegisterFunction(name: *const ::std::os::raw::c_char,
                              fn_: fgListener) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgRegisterControl(name: *const ::std::os::raw::c_char,
                             fn_: fgInitializer, sz: usize);
}
extern "C" {
    pub fn fgIterateControls(p: *mut ::std::os::raw::c_void,
                             fn_:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void,
                                                                            arg2:
                                                                                *const ::std::os::raw::c_char)>);
}
extern "C" {
    pub fn fgGetTypeSize(type_: *const ::std::os::raw::c_char) -> usize;
}
pub const FGCURVE_FLAGS_FGCURVE_CURVEMASK: FGCURVE_FLAGS =
    FGCURVE_FLAGS::FGCURVE_BSPLINE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGCURVE_FLAGS {
    FGCURVE_LINE = 0,
    FGCURVE_QUADRATIC = 512,
    FGCURVE_CUBIC = 1024,
    FGCURVE_BSPLINE = 1536,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__Point {
    pub p: *mut AbsVec,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__Point() {
    assert_eq!(::std::mem::size_of::<__VECTOR__Point>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__Point>() , 8usize);
}
impl Clone for __VECTOR__Point {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__Point as fgVectorPoint;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_18 {
    pub element: fgElement,
    pub color: fgColor,
    pub points: fgVectorPoint,
    pub cache: fgVectorPoint,
    pub factor: f32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_18() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_18>() , 384usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_18>() , 8usize);
}
impl Clone for _bindgen_ty_18 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_18 as fgCurve;
extern "C" {
    pub fn fgCurve_Create(points: *const AbsVec, npoints: usize,
                          color: ::std::os::raw::c_uint,
                          parent: *mut fgElement, next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort) -> *mut fgElement;
}
extern "C" {
    pub fn fgCurve_Init(self_: *mut fgCurve, parent: *mut fgElement,
                        next: *mut fgElement,
                        name: *const ::std::os::raw::c_char, flags: fgFlag,
                        transform: *const fgTransform,
                        units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgCurve_Destroy(self_: *mut fgCurve);
}
extern "C" {
    pub fn fgCurve_Message(self_: *mut fgCurve, msg: *const FG_Msg) -> usize;
}
pub const FGRESOURCE_FLAGS_FGRESOURCE_SHAPEMASK: FGRESOURCE_FLAGS =
    FGRESOURCE_FLAGS::FGRESOURCE_TRIANGLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGRESOURCE_FLAGS {
    FGRESOURCE_UVTILE = 512,
    FGRESOURCE_RECT = 1024,
    FGRESOURCE_CIRCLE = 2048,
    FGRESOURCE_TRIANGLE = 3072,
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_19 {
    pub element: fgElement,
    pub uv: CRect,
    pub asset: fgAsset,
    pub outline: FABS,
    pub color: fgColor,
    pub edge: fgColor,
}
#[test]
fn bindgen_test_layout__bindgen_ty_19() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_19>() , 376usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_19>() , 8usize);
}
impl Clone for _bindgen_ty_19 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_19 as fgResource;
extern "C" {
    pub fn fgResource_Create(asset: fgAsset, uv: *const CRect,
                             color: ::std::os::raw::c_uint,
                             parent: *mut fgElement, next: *mut fgElement,
                             name: *const ::std::os::raw::c_char,
                             flags: fgFlag, transform: *const fgTransform,
                             units: ::std::os::raw::c_ushort)
     -> *mut fgElement;
}
extern "C" {
    pub fn fgResource_Init(self_: *mut fgResource, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgResource_Destroy(self_: *mut fgResource);
}
extern "C" {
    pub fn fgResource_Message(self_: *mut fgResource, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgCreateAssetFile(flags: fgFlag,
                             file: *const ::std::os::raw::c_char) -> fgAsset;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGTEXT_FLAGS {
    FGTEXT_CHARWRAP = 16384,
    FGTEXT_WORDWRAP = 32768,
    FGTEXT_ELLIPSES = 65536,
    FGTEXT_RTL = 131072,
    FGTEXT_RIGHTALIGN = 262144,
    FGTEXT_CENTER = 524288,
    FGTEXT_SUBPIXEL = 1048576,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__UTF8 {
    pub p: *mut ::std::os::raw::c_char,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__UTF8() {
    assert_eq!(::std::mem::size_of::<__VECTOR__UTF8>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__UTF8>() , 8usize);
}
impl Clone for __VECTOR__UTF8 {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__UTF8 as fgVectorUTF8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__UTF16 {
    pub p: *mut u16,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__UTF16() {
    assert_eq!(::std::mem::size_of::<__VECTOR__UTF16>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__UTF16>() , 8usize);
}
impl Clone for __VECTOR__UTF16 {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__UTF16 as fgVectorUTF16;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__UTF32 {
    pub p: *mut ::std::os::raw::c_int,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__UTF32() {
    assert_eq!(::std::mem::size_of::<__VECTOR__UTF32>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__UTF32>() , 8usize);
}
impl Clone for __VECTOR__UTF32 {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__UTF32 as fgVectorUTF32;
pub use self::_FG_FONT_DESC as fgFontDesc;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_TEXT {
    pub element: fgElement,
    pub text32: fgVectorUTF32,
    pub text16: fgVectorUTF16,
    pub text8: fgVectorUTF8,
    pub font: fgFont,
    pub layout: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: f32,
    pub letterspacing: f32,
}
#[test]
fn bindgen_test_layout__FG_TEXT() {
    assert_eq!(::std::mem::size_of::<_FG_TEXT>() , 424usize);
    assert_eq!(::std::mem::align_of::<_FG_TEXT>() , 8usize);
}
impl Clone for _FG_TEXT {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_TEXT as fgText;
extern "C" {
    pub fn fgText_Create(text: *mut ::std::os::raw::c_char, font: fgFont,
                         color: ::std::os::raw::c_uint,
                         parent: *mut fgElement, next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform,
                         units: ::std::os::raw::c_ushort) -> *mut fgElement;
}
extern "C" {
    pub fn fgText_Init(self_: *mut fgText, parent: *mut fgElement,
                       next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform,
                       units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgText_Destroy(self_: *mut fgText);
}
extern "C" {
    pub fn fgText_Message(self_: *mut fgText, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgText_Recalc(self_: *mut fgText);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGBUTTON_FLAGS { FGBUTTON_NOFOCUS = 1024, }
#[repr(C)]
#[derive(Copy)]
pub struct _FG_BUTTON {
    pub control: fgControl,
    pub text: fgText,
}
#[test]
fn bindgen_test_layout__FG_BUTTON() {
    assert_eq!(::std::mem::size_of::<_FG_BUTTON>() , 784usize);
    assert_eq!(::std::mem::align_of::<_FG_BUTTON>() , 8usize);
}
impl Clone for _FG_BUTTON {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_BUTTON as fgButton;
extern "C" {
    pub fn fgButton_Init(self_: *mut fgButton, parent: *mut fgElement,
                         next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform,
                         units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgButton_Destroy(self_: *mut fgButton);
}
extern "C" {
    pub fn fgButton_Message(self_: *mut fgButton, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGSCROLLBAR_FLAGS {
    FGSCROLLBAR_HIDEH = 1024,
    FGSCROLLBAR_HIDEV = 2048,
    FGSCROLLBAR_SHOWH = 4096,
    FGSCROLLBAR_SHOWV = 8192,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGSCROLLBAR_ACTIONS {
    FGSCROLLBAR_CHANGE = 1,
    FGSCROLLBAR_BAR = 2,
    FGSCROLLBAR_BARINIT = 3,
    FGSCROLLBAR_PAGE = 4,
    FGSCROLLBAR_BUTTON = 5,
    FGSCROLLBAR_BARCACHE = 6,
    FGSCROLLBAR_SCROLLTO = 7,
    FGSCROLLBAR_SCROLLTOABS = 8,
    FGSCROLLBAR_NUM = 9,
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_SCROLLBAR_INNER {
    pub button: fgButton,
    pub lastmouse: AbsVec,
}
#[test]
fn bindgen_test_layout__FG_SCROLLBAR_INNER() {
    assert_eq!(::std::mem::size_of::<_FG_SCROLLBAR_INNER>() , 792usize);
    assert_eq!(::std::mem::align_of::<_FG_SCROLLBAR_INNER>() , 8usize);
}
impl Clone for _FG_SCROLLBAR_INNER {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_SCROLLBAR {
    pub control: fgControl,
    pub btn: [fgButton; 4usize],
    pub bar: [_FG_SCROLLBAR_INNER; 2usize],
    pub bg: [fgElement; 3usize],
    pub realpadding: AbsRect,
    pub barcache: AbsVec,
    pub realsize: AbsVec,
    pub lastpadding: AbsVec,
}
#[test]
fn bindgen_test_layout__FG_SCROLLBAR() {
    assert_eq!(::std::mem::size_of::<_FG_SCROLLBAR>() , 6080usize);
    assert_eq!(::std::mem::align_of::<_FG_SCROLLBAR>() , 8usize);
}
impl Clone for _FG_SCROLLBAR {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_SCROLLBAR as fgScrollbar;
extern "C" {
    pub fn fgScrollbar_Init(self_: *mut fgScrollbar, parent: *mut fgElement,
                            next: *mut fgElement,
                            name: *const ::std::os::raw::c_char,
                            flags: fgFlag, transform: *const fgTransform,
                            units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgScrollbar_Destroy(self_: *mut fgScrollbar);
}
extern "C" {
    pub fn fgScrollbar_Message(self_: *mut fgScrollbar, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGBOX_FLAGS {
    FGBOX_IGNOREMARGINEDGEX = 16384,
    FGBOX_IGNOREMARGINEDGEY = 32768,
    FGBOX_TILEX = 65536,
    FGBOX_TILEY = 131072,
    FGBOX_DISTRIBUTEX = 262144,
    FGBOX_DISTRIBUTEY = 524288,
    FGBOX_TILE = 196608,
    FGBOX_DISTRIBUTE = 786432,
    FGBOX_IGNOREMARGINEDGE = 49152,
    FGBOX_LAYOUTMASK = 1032192,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_BOX_ORDERED_ELEMENTS_ {
    pub isordered: ::std::os::raw::c_char,
    pub ordered: fgVectorElement,
    pub fixedsize: AbsVec,
}
#[test]
fn bindgen_test_layout__FG_BOX_ORDERED_ELEMENTS_() {
    assert_eq!(::std::mem::size_of::<_FG_BOX_ORDERED_ELEMENTS_>() , 40usize);
    assert_eq!(::std::mem::align_of::<_FG_BOX_ORDERED_ELEMENTS_>() , 8usize);
}
impl Clone for _FG_BOX_ORDERED_ELEMENTS_ {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_BOX_ {
    pub scroll: fgScrollbar,
    pub order: _FG_BOX_ORDERED_ELEMENTS_,
    pub fndraw: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut fgElement,
                                                           arg2:
                                                               *const AbsRect,
                                                           arg3:
                                                               *const fgDrawAuxData)>,
}
#[test]
fn bindgen_test_layout__FG_BOX_() {
    assert_eq!(::std::mem::size_of::<_FG_BOX_>() , 6128usize);
    assert_eq!(::std::mem::align_of::<_FG_BOX_>() , 8usize);
}
impl Clone for _FG_BOX_ {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_BOX_ as fgBox;
extern "C" {
    pub fn fgBox_Init(self_: *mut fgBox, parent: *mut fgElement,
                      next: *mut fgElement,
                      name: *const ::std::os::raw::c_char, flags: fgFlag,
                      transform: *const fgTransform,
                      units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgBox_Destroy(self_: *mut fgBox);
}
extern "C" {
    pub fn fgBox_Message(self_: *mut fgBox, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgBoxOrderedElement_Destroy(self_: *mut _FG_BOX_ORDERED_ELEMENTS_);
}
extern "C" {
    pub fn fgBoxOrderedElement_Message(self_: *mut _FG_BOX_ORDERED_ELEMENTS_,
                                       msg: *const FG_Msg,
                                       element: *mut fgElement,
                                       callback: fgMessage) -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_20 {
    pub control: fgControl,
    pub box_: fgBox,
    pub selected: *mut fgElement,
    pub hover: fgColor,
    pub select: fgColor,
    pub dropflag: ::std::os::raw::c_char,
    pub mouse: fgMouseState,
}
#[test]
fn bindgen_test_layout__bindgen_ty_20() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_20>() , 6520usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_20>() , 8usize);
}
impl Clone for _bindgen_ty_20 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_20 as fgDropdown;
extern "C" {
    pub fn fgDropdown_Init(self_: *mut fgDropdown, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgDropdown_Destroy(self_: *mut fgDropdown);
}
extern "C" {
    pub fn fgDropdown_Message(self_: *mut fgDropdown, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGLIST_FLAGS {
    FGLIST_SELECT = 1048576,
    FGLIST_MULTISELECT = 3145728,
    FGLIST_DRAGGABLE = 4194304,
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_21 {
    pub box_: fgBox,
    pub select: fgColor,
    pub hover: fgColor,
    pub drag: fgColor,
    pub selected: fgVectorElement,
    pub mouse: fgMouseState,
    pub splitter: FABS,
    pub split: *mut fgElement,
    pub splitedge: FABS,
    pub splitmouse: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_21() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_21>() , 6200usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_21>() , 8usize);
}
impl Clone for _bindgen_ty_21 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_21 as fgList;
extern "C" {
    pub fn fgList_Init(self_: *mut fgList, parent: *mut fgElement,
                       next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform,
                       units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgList_Destroy(self_: *mut fgList);
}
extern "C" {
    pub fn fgList_Message(self_: *mut fgList, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgListItem_Init(self_: *mut fgControl, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgListItem_Message(self_: *mut fgControl, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGTEXTBOX_FLAGS {
    FGTEXTBOX_ACTION = 2097152,
    FGTEXTBOX_SINGLELINE = 4194304,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGTEXTBOX_ACTIONS {
    FGTEXTBOX_SELECTALL = 9,
    FGTEXTBOX_CUT = 10,
    FGTEXTBOX_COPY = 11,
    FGTEXTBOX_PASTE = 12,
    FGTEXTBOX_GOTOSTART = 13,
    FGTEXTBOX_GOTOEND = 14,
    FGTEXTBOX_GOTOLINESTART = 15,
    FGTEXTBOX_GOTOLINEEND = 16,
    FGTEXTBOX_TOGGLEINSERT = 17,
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_22 {
    pub scroll: fgScrollbar,
    pub validation: *mut ::std::os::raw::c_char,
    pub formatting: *mut ::std::os::raw::c_char,
    pub mask: ::std::os::raw::c_int,
    pub text8: fgVectorUTF8,
    pub text16: fgVectorUTF16,
    pub text32: fgVectorUTF32,
    pub placeholder8: fgVectorUTF8,
    pub placeholder16: fgVectorUTF16,
    pub placeholder32: fgVectorUTF32,
    pub placecolor: fgColor,
    pub cursorcolor: fgColor,
    pub selector: fgColor,
    pub start: usize,
    pub startpos: AbsVec,
    pub end: usize,
    pub endpos: AbsVec,
    pub lastx: f32,
    pub areacache: AbsRect,
    pub inserting: ::std::os::raw::c_char,
    pub font: *mut ::std::os::raw::c_void,
    pub layout: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: f32,
    pub letterspacing: f32,
    pub lastclick: f64,
}
#[test]
fn bindgen_test_layout__bindgen_ty_22() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_22>() , 6360usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_22>() , 8usize);
}
impl Clone for _bindgen_ty_22 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_22 as fgTextbox;
extern "C" {
    pub fn fgTextbox_Init(self_: *mut fgTextbox, parent: *mut fgElement,
                          next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgTextbox_Destroy(self_: *mut fgTextbox);
}
extern "C" {
    pub fn fgTextbox_Message(self_: *mut fgTextbox, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGGRID_FLAGS { FGGRID_AUTOEDIT = 8388608, }
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGGRID_ACTIONS { FGGRID_RESIZECOLUMN = 9, }
#[repr(C)]
#[derive(Copy)]
pub struct _FG_GRID_ROW {
    pub element: fgElement,
    pub order: _FG_BOX_ORDERED_ELEMENTS_,
}
#[test]
fn bindgen_test_layout__FG_GRID_ROW() {
    assert_eq!(::std::mem::size_of::<_FG_GRID_ROW>() , 360usize);
    assert_eq!(::std::mem::align_of::<_FG_GRID_ROW>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW10InsertItemEP11_FG_ELEMENTy"]
    pub fn _FG_GRID_ROW_InsertItem(this: *mut _FG_GRID_ROW,
                                   item: *mut fgElement, column: usize);
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW10InsertItemEPKcy"]
    pub fn _FG_GRID_ROW_InsertItem1(this: *mut _FG_GRID_ROW,
                                    item: *const ::std::os::raw::c_char,
                                    column: usize);
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW7SetItemEP11_FG_ELEMENTy"]
    pub fn _FG_GRID_ROW_SetItem(this: *mut _FG_GRID_ROW, item: *mut fgElement,
                                column: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW7SetItemEPKcy"]
    pub fn _FG_GRID_ROW_SetItem1(this: *mut _FG_GRID_ROW,
                                 item: *const ::std::os::raw::c_char,
                                 column: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW10RemoveItemEy"]
    pub fn _FG_GRID_ROW_RemoveItem(this: *mut _FG_GRID_ROW, column: usize)
     -> bool;
}
extern "C" {
    #[link_name = "_ZN12_FG_GRID_ROW7GetItemEy"]
    pub fn _FG_GRID_ROW_GetItem(this: *mut _FG_GRID_ROW, column: usize)
     -> *mut fgElement;
}
impl Clone for _FG_GRID_ROW {
    fn clone(&self) -> Self { *self }
}
impl _FG_GRID_ROW {
    #[inline]
    pub unsafe fn InsertItem(&mut self, item: *mut fgElement, column: usize) {
        _FG_GRID_ROW_InsertItem(&mut *self, item, column)
    }
    #[inline]
    pub unsafe fn InsertItem1(&mut self, item: *const ::std::os::raw::c_char,
                              column: usize) {
        _FG_GRID_ROW_InsertItem1(&mut *self, item, column)
    }
    #[inline]
    pub unsafe fn SetItem(&mut self, item: *mut fgElement, column: usize)
     -> bool {
        _FG_GRID_ROW_SetItem(&mut *self, item, column)
    }
    #[inline]
    pub unsafe fn SetItem1(&mut self, item: *const ::std::os::raw::c_char,
                           column: usize) -> bool {
        _FG_GRID_ROW_SetItem1(&mut *self, item, column)
    }
    #[inline]
    pub unsafe fn RemoveItem(&mut self, column: usize) -> bool {
        _FG_GRID_ROW_RemoveItem(&mut *self, column)
    }
    #[inline]
    pub unsafe fn GetItem(&mut self, column: usize) -> *mut fgElement {
        _FG_GRID_ROW_GetItem(&mut *self, column)
    }
}
pub use self::_FG_GRID_ROW as fgGridRow;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_GRID {
    pub list: fgList,
    pub header: fgList,
    pub editbox: fgTextbox,
    pub rowedgecolor: fgColor,
    pub columnedgecolor: fgColor,
    pub rowevencolor: fgColor,
}
#[test]
fn bindgen_test_layout__FG_GRID() {
    assert_eq!(::std::mem::size_of::<_FG_GRID>() , 18776usize);
    assert_eq!(::std::mem::align_of::<_FG_GRID>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID12InsertColumnEPKcy"]
    pub fn _FG_GRID_InsertColumn(this: *mut _FG_GRID,
                                 name: *const ::std::os::raw::c_char,
                                 column: usize) -> *mut fgElement;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID7SetItemEP11_FG_ELEMENTyy"]
    pub fn _FG_GRID_SetItem(this: *mut _FG_GRID, item: *mut fgElement,
                            column: usize, row: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID7SetItemEPKcyy"]
    pub fn _FG_GRID_SetItem1(this: *mut _FG_GRID,
                             item: *const ::std::os::raw::c_char,
                             column: usize, row: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID9InsertRowEy"]
    pub fn _FG_GRID_InsertRow(this: *mut _FG_GRID, row: usize)
     -> *mut fgGridRow;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID12RemoveColumnEy"]
    pub fn _FG_GRID_RemoveColumn(this: *mut _FG_GRID, column: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID9RemoveRowEy"]
    pub fn _FG_GRID_RemoveRow(this: *mut _FG_GRID, row: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID10RemoveItemEyy"]
    pub fn _FG_GRID_RemoveItem(this: *mut _FG_GRID, column: usize, row: usize)
     -> bool;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID7GetItemEyy"]
    pub fn _FG_GRID_GetItem(this: *mut _FG_GRID, column: usize, row: usize)
     -> *mut fgElement;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID6GetRowEy"]
    pub fn _FG_GRID_GetRow(this: *mut _FG_GRID, row: usize) -> *mut fgGridRow;
}
extern "C" {
    #[link_name = "_ZN8_FG_GRID9GetColumnEy"]
    pub fn _FG_GRID_GetColumn(this: *mut _FG_GRID, column: usize)
     -> *mut fgElement;
}
impl Clone for _FG_GRID {
    fn clone(&self) -> Self { *self }
}
impl _FG_GRID {
    #[inline]
    pub unsafe fn InsertColumn(&mut self, name: *const ::std::os::raw::c_char,
                               column: usize) -> *mut fgElement {
        _FG_GRID_InsertColumn(&mut *self, name, column)
    }
    #[inline]
    pub unsafe fn SetItem(&mut self, item: *mut fgElement, column: usize,
                          row: usize) -> bool {
        _FG_GRID_SetItem(&mut *self, item, column, row)
    }
    #[inline]
    pub unsafe fn SetItem1(&mut self, item: *const ::std::os::raw::c_char,
                           column: usize, row: usize) -> bool {
        _FG_GRID_SetItem1(&mut *self, item, column, row)
    }
    #[inline]
    pub unsafe fn InsertRow(&mut self, row: usize) -> *mut fgGridRow {
        _FG_GRID_InsertRow(&mut *self, row)
    }
    #[inline]
    pub unsafe fn RemoveColumn(&mut self, column: usize) -> bool {
        _FG_GRID_RemoveColumn(&mut *self, column)
    }
    #[inline]
    pub unsafe fn RemoveRow(&mut self, row: usize) -> bool {
        _FG_GRID_RemoveRow(&mut *self, row)
    }
    #[inline]
    pub unsafe fn RemoveItem(&mut self, column: usize, row: usize) -> bool {
        _FG_GRID_RemoveItem(&mut *self, column, row)
    }
    #[inline]
    pub unsafe fn GetItem(&mut self, column: usize, row: usize)
     -> *mut fgElement {
        _FG_GRID_GetItem(&mut *self, column, row)
    }
    #[inline]
    pub unsafe fn GetRow(&mut self, row: usize) -> *mut fgGridRow {
        _FG_GRID_GetRow(&mut *self, row)
    }
    #[inline]
    pub unsafe fn GetColumn(&mut self, column: usize) -> *mut fgElement {
        _FG_GRID_GetColumn(&mut *self, column)
    }
}
pub use self::_FG_GRID as fgGrid;
extern "C" {
    pub fn fgGrid_Init(self_: *mut fgGrid, parent: *mut fgElement,
                       next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform,
                       units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgGrid_Destroy(self_: *mut fgGrid);
}
extern "C" {
    pub fn fgGrid_Message(self_: *mut fgGrid, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgGridRow_Init(self_: *mut fgGridRow, parent: *mut fgElement,
                          next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgGridRow_Message(self_: *mut fgGridRow, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgGridRow_Destroy(self_: *mut fgGridRow);
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_STYLE_MSG {
    pub msg: FG_Msg,
    pub next: *mut _FG_STYLE_MSG,
    pub sz: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__FG_STYLE_MSG() {
    assert_eq!(::std::mem::size_of::<_FG_STYLE_MSG>() , 40usize);
    assert_eq!(::std::mem::align_of::<_FG_STYLE_MSG>() , 8usize);
}
impl Clone for _FG_STYLE_MSG {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_STYLE_MSG as fgStyleMsg;
pub use self::_FG_STYLE as fgStyle;
extern "C" {
    pub fn fgStyle_Init(self_: *mut fgStyle);
}
extern "C" {
    pub fn fgStyle_Destroy(self_: *mut fgStyle);
}
extern "C" {
    pub fn fgStyle_GetName(name: *const ::std::os::raw::c_char,
                           flag: ::std::os::raw::c_char) -> FG_UINT;
}
extern "C" {
    pub fn fgStyle_AddStyleMsg(self_: *mut fgStyle, msg: *const FG_Msg,
                               arg1: *const ::std::os::raw::c_void,
                               arg1size: ::std::os::raw::c_uint,
                               arg2: *const ::std::os::raw::c_void,
                               arg2size: ::std::os::raw::c_uint)
     -> *mut fgStyleMsg;
}
extern "C" {
    pub fn fgStyle_CloneStyleMsg(self_: *const fgStyleMsg) -> *mut fgStyleMsg;
}
extern "C" {
    pub fn fgStyle_RemoveStyleMsg(self_: *mut fgStyle, msg: *mut fgStyleMsg);
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_SKIN_ELEMENT {
    pub type_: *const ::std::os::raw::c_char,
    pub transform: fgTransform,
    pub units: ::std::os::raw::c_short,
    pub flags: fgFlag,
    pub style: fgStyle,
    pub order: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__FG_SKIN_ELEMENT() {
    assert_eq!(::std::mem::size_of::<_FG_SKIN_ELEMENT>() , 88usize);
    assert_eq!(::std::mem::align_of::<_FG_SKIN_ELEMENT>() , 8usize);
}
impl Clone for _FG_SKIN_ELEMENT {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_SKIN_ELEMENT as fgSkinElement;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_SKIN_LAYOUT {
    pub layout: fgSkinElement,
    pub tree: fgSkinTree,
    pub sz: ::std::os::raw::c_uint,
    pub instance: *mut fgElement,
}
#[test]
fn bindgen_test_layout__FG_SKIN_LAYOUT() {
    assert_eq!(::std::mem::size_of::<_FG_SKIN_LAYOUT>() , 136usize);
    assert_eq!(::std::mem::align_of::<_FG_SKIN_LAYOUT>() , 8usize);
}
impl Clone for _FG_SKIN_LAYOUT {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__SkinLayout {
    pub p: *mut _FG_SKIN_LAYOUT,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__SkinLayout() {
    assert_eq!(::std::mem::size_of::<__VECTOR__SkinLayout>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__SkinLayout>() , 8usize);
}
impl Clone for __VECTOR__SkinLayout {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__SkinLayout as fgVectorSkinLayout;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_SKIN_TREE {
    pub children: fgVectorSkinLayout,
    pub styles: *mut _FG_SKIN_TREE___kh_fgStyleInt_t,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_SKIN_TREE___kh_fgStyleInt_t {
    pub _address: u8,
}
impl Clone for _FG_SKIN_TREE___kh_fgStyleInt_t {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_SKIN_TREE() {
    assert_eq!(::std::mem::size_of::<_FG_SKIN_TREE>() , 32usize);
    assert_eq!(::std::mem::align_of::<_FG_SKIN_TREE>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_TREE8AddChildEPKcjPK11fgTransformsi"]
    pub fn _FG_SKIN_TREE_AddChild(this: *mut _FG_SKIN_TREE,
                                  type_: *const ::std::os::raw::c_char,
                                  flags: fgFlag,
                                  transform: *const fgTransform,
                                  units: ::std::os::raw::c_short,
                                  order: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_TREE11RemoveChildEj"]
    pub fn _FG_SKIN_TREE_RemoveChild(this: *mut _FG_SKIN_TREE, child: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK13_FG_SKIN_TREE8GetChildEj"]
    pub fn _FG_SKIN_TREE_GetChild(this: *const _FG_SKIN_TREE, child: FG_UINT)
     -> *mut _FG_SKIN_LAYOUT;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_TREE8AddStyleEPKc"]
    pub fn _FG_SKIN_TREE_AddStyle(this: *mut _FG_SKIN_TREE,
                                  name: *const ::std::os::raw::c_char)
     -> FG_UINT;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_TREE11RemoveStyleEj"]
    pub fn _FG_SKIN_TREE_RemoveStyle(this: *mut _FG_SKIN_TREE, style: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK13_FG_SKIN_TREE8GetStyleEj"]
    pub fn _FG_SKIN_TREE_GetStyle(this: *const _FG_SKIN_TREE, style: FG_UINT)
     -> *mut fgStyle;
}
impl Clone for _FG_SKIN_TREE {
    fn clone(&self) -> Self { *self }
}
impl _FG_SKIN_TREE {
    #[inline]
    pub unsafe fn AddChild(&mut self, type_: *const ::std::os::raw::c_char,
                           flags: fgFlag, transform: *const fgTransform,
                           units: ::std::os::raw::c_short,
                           order: ::std::os::raw::c_int) -> usize {
        _FG_SKIN_TREE_AddChild(&mut *self, type_, flags, transform, units,
                               order)
    }
    #[inline]
    pub unsafe fn RemoveChild(&mut self, child: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_SKIN_TREE_RemoveChild(&mut *self, child)
    }
    #[inline]
    pub unsafe fn GetChild(&self, child: FG_UINT) -> *mut _FG_SKIN_LAYOUT {
        _FG_SKIN_TREE_GetChild(&*self, child)
    }
    #[inline]
    pub unsafe fn AddStyle(&mut self, name: *const ::std::os::raw::c_char)
     -> FG_UINT {
        _FG_SKIN_TREE_AddStyle(&mut *self, name)
    }
    #[inline]
    pub unsafe fn RemoveStyle(&mut self, style: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_SKIN_TREE_RemoveStyle(&mut *self, style)
    }
    #[inline]
    pub unsafe fn GetStyle(&self, style: FG_UINT) -> *mut fgStyle {
        _FG_SKIN_TREE_GetStyle(&*self, style)
    }
}
pub use self::_FG_SKIN_TREE as fgSkinTree;
pub use self::_FG_SKIN_LAYOUT as fgSkinLayout;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgSkins_t {
    pub _address: u8,
}
impl Clone for __kh_fgSkins_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __kh_fgStyles_t {
    pub _address: u8,
}
impl Clone for __kh_fgStyles_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_SKIN_BASE {
    pub resources: fgVector,
    pub fonts: fgVector,
    pub skinmap: *mut __kh_fgSkins_t,
    pub parent: *mut _FG_SKIN_BASE,
}
#[test]
fn bindgen_test_layout__FG_SKIN_BASE() {
    assert_eq!(::std::mem::size_of::<_FG_SKIN_BASE>() , 64usize);
    assert_eq!(::std::mem::align_of::<_FG_SKIN_BASE>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE7AddSkinEPKc"]
    pub fn _FG_SKIN_BASE_AddSkin(this: *mut _FG_SKIN_BASE,
                                 name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE10RemoveSkinEPKc"]
    pub fn _FG_SKIN_BASE_RemoveSkin(this: *mut _FG_SKIN_BASE,
                                    name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK13_FG_SKIN_BASE7GetSkinEPKc"]
    pub fn _FG_SKIN_BASE_GetSkin(this: *const _FG_SKIN_BASE,
                                 name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE8AddAssetEPv"]
    pub fn _FG_SKIN_BASE_AddAsset(this: *mut _FG_SKIN_BASE,
                                  resource: *mut ::std::os::raw::c_void)
     -> usize;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE11RemoveAssetEj"]
    pub fn _FG_SKIN_BASE_RemoveAsset(this: *mut _FG_SKIN_BASE,
                                     resource: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK13_FG_SKIN_BASE8GetAssetEj"]
    pub fn _FG_SKIN_BASE_GetAsset(this: *const _FG_SKIN_BASE,
                                  resource: FG_UINT)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE7AddFontEPv"]
    pub fn _FG_SKIN_BASE_AddFont(this: *mut _FG_SKIN_BASE,
                                 font: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE10RemoveFontEj"]
    pub fn _FG_SKIN_BASE_RemoveFont(this: *mut _FG_SKIN_BASE, font: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK13_FG_SKIN_BASE7GetFontEj"]
    pub fn _FG_SKIN_BASE_GetFont(this: *const _FG_SKIN_BASE, font: FG_UINT)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE14LoadFileUBJSONEPKc"]
    pub fn _FG_SKIN_BASE_LoadFileUBJSON(this: *mut _FG_SKIN_BASE,
                                        file: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE10LoadUBJSONEPKvj"]
    pub fn _FG_SKIN_BASE_LoadUBJSON(this: *mut _FG_SKIN_BASE,
                                    data: *const ::std::os::raw::c_void,
                                    length: FG_UINT) -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE11LoadFileXMLEPKc"]
    pub fn _FG_SKIN_BASE_LoadFileXML(this: *mut _FG_SKIN_BASE,
                                     file: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN;
}
extern "C" {
    #[link_name = "_ZN13_FG_SKIN_BASE7LoadXMLEPKcj"]
    pub fn _FG_SKIN_BASE_LoadXML(this: *mut _FG_SKIN_BASE,
                                 data: *const ::std::os::raw::c_char,
                                 length: FG_UINT) -> *mut _FG_SKIN;
}
impl Clone for _FG_SKIN_BASE {
    fn clone(&self) -> Self { *self }
}
impl _FG_SKIN_BASE {
    #[inline]
    pub unsafe fn AddSkin(&mut self, name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN {
        _FG_SKIN_BASE_AddSkin(&mut *self, name)
    }
    #[inline]
    pub unsafe fn RemoveSkin(&mut self, name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char {
        _FG_SKIN_BASE_RemoveSkin(&mut *self, name)
    }
    #[inline]
    pub unsafe fn GetSkin(&self, name: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN {
        _FG_SKIN_BASE_GetSkin(&*self, name)
    }
    #[inline]
    pub unsafe fn AddAsset(&mut self, resource: *mut ::std::os::raw::c_void)
     -> usize {
        _FG_SKIN_BASE_AddAsset(&mut *self, resource)
    }
    #[inline]
    pub unsafe fn RemoveAsset(&mut self, resource: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_SKIN_BASE_RemoveAsset(&mut *self, resource)
    }
    #[inline]
    pub unsafe fn GetAsset(&self, resource: FG_UINT)
     -> *mut ::std::os::raw::c_void {
        _FG_SKIN_BASE_GetAsset(&*self, resource)
    }
    #[inline]
    pub unsafe fn AddFont(&mut self, font: *mut ::std::os::raw::c_void)
     -> usize {
        _FG_SKIN_BASE_AddFont(&mut *self, font)
    }
    #[inline]
    pub unsafe fn RemoveFont(&mut self, font: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_SKIN_BASE_RemoveFont(&mut *self, font)
    }
    #[inline]
    pub unsafe fn GetFont(&self, font: FG_UINT)
     -> *mut ::std::os::raw::c_void {
        _FG_SKIN_BASE_GetFont(&*self, font)
    }
    #[inline]
    pub unsafe fn LoadFileUBJSON(&mut self,
                                 file: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN {
        _FG_SKIN_BASE_LoadFileUBJSON(&mut *self, file)
    }
    #[inline]
    pub unsafe fn LoadUBJSON(&mut self, data: *const ::std::os::raw::c_void,
                             length: FG_UINT) -> *mut _FG_SKIN {
        _FG_SKIN_BASE_LoadUBJSON(&mut *self, data, length)
    }
    #[inline]
    pub unsafe fn LoadFileXML(&mut self, file: *const ::std::os::raw::c_char)
     -> *mut _FG_SKIN {
        _FG_SKIN_BASE_LoadFileXML(&mut *self, file)
    }
    #[inline]
    pub unsafe fn LoadXML(&mut self, data: *const ::std::os::raw::c_char,
                          length: FG_UINT) -> *mut _FG_SKIN {
        _FG_SKIN_BASE_LoadXML(&mut *self, data, length)
    }
}
pub use self::_FG_SKIN_BASE as fgSkinBase;
pub use self::_FG_SKIN as fgSkin;
extern "C" {
    pub fn fgSkinElement_Init(self_: *mut fgSkinElement,
                              type_: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fgSkinElement_Destroy(self_: *mut fgSkinElement);
}
extern "C" {
    pub fn fgSkinTree_Init(self_: *mut fgSkinTree);
}
extern "C" {
    pub fn fgSkinTree_Destroy(self_: *mut fgSkinTree);
}
extern "C" {
    pub fn fgSkinTree_AddChild(self_: *mut fgSkinTree,
                               type_: *const ::std::os::raw::c_char,
                               flags: fgFlag, transform: *const fgTransform,
                               units: ::std::os::raw::c_short,
                               order: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn fgSkinTree_RemoveChild(self_: *mut fgSkinTree, child: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgSkinTree_GetChild(self_: *const fgSkinTree, child: FG_UINT)
     -> *mut fgSkinLayout;
}
extern "C" {
    pub fn fgSkinTree_AddStyle(self_: *mut fgSkinTree,
                               name: *const ::std::os::raw::c_char)
     -> FG_UINT;
}
extern "C" {
    pub fn fgSkinTree_RemoveStyle(self_: *mut fgSkinTree, style: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgSkinTree_GetStyle(self_: *const fgSkinTree, style: FG_UINT)
     -> *mut fgStyle;
}
extern "C" {
    pub fn fgSkinLayout_Init(self_: *mut fgSkinLayout,
                             type_: *const ::std::os::raw::c_char,
                             flags: fgFlag, transform: *const fgTransform,
                             units: ::std::os::raw::c_short,
                             order: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fgSkinLayout_Destroy(self_: *mut fgSkinLayout);
}
extern "C" {
    pub fn fgSkin_Init(self_: *mut fgSkin);
}
extern "C" {
    pub fn fgSkin_Destroy(self_: *mut fgSkin);
}
extern "C" {
    pub fn fgSkin_GetSkin(self_: *const fgSkin,
                          name: *const ::std::os::raw::c_char) -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_Destroy(self_: *mut fgSkinBase);
}
extern "C" {
    pub fn fgSkinBase_AddSkin(self_: *mut fgSkinBase,
                              name: *const ::std::os::raw::c_char)
     -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_RemoveSkin(self_: *mut fgSkinBase,
                                 name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgSkinBase_GetSkin(self_: *const fgSkinBase,
                              name: *const ::std::os::raw::c_char)
     -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_AddAsset(self_: *mut fgSkinBase,
                               asset: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn fgSkinBase_RemoveAsset(self_: *mut fgSkinBase, asset: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgSkinBase_GetAsset(self_: *const fgSkinBase, asset: FG_UINT)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgSkinBase_AddFont(self_: *mut fgSkinBase,
                              font: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn fgSkinBase_RemoveFont(self_: *mut fgSkinBase, font: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgSkinBase_GetFont(self_: *const fgSkinBase, font: FG_UINT)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn fgSkinBase_GetFlagsFromString(s: *const ::std::os::raw::c_char,
                                         remove: *mut fgFlag) -> fgFlag;
}
extern "C" {
    pub fn fgSkinBase_LoadFileUBJSON(self_: *mut fgSkinBase,
                                     file: *const ::std::os::raw::c_char)
     -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_LoadUBJSON(self_: *mut fgSkinBase,
                                 data: *const ::std::os::raw::c_void,
                                 length: FG_UINT) -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_LoadFileXML(self_: *mut fgSkinBase,
                                  file: *const ::std::os::raw::c_char)
     -> *mut fgSkin;
}
extern "C" {
    pub fn fgSkinBase_LoadXML(self_: *mut fgSkinBase,
                              data: *const ::std::os::raw::c_char,
                              length: FG_UINT) -> *mut fgSkin;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_CLASS_LAYOUT {
    pub layout: fgSkinElement,
    pub name: *const ::std::os::raw::c_char,
    pub id: *const ::std::os::raw::c_char,
    pub children: fgVectorClassLayout,
    pub userdata: fgVectorKeyValue,
}
#[test]
fn bindgen_test_layout__FG_CLASS_LAYOUT() {
    assert_eq!(::std::mem::size_of::<_FG_CLASS_LAYOUT>() , 152usize);
    assert_eq!(::std::mem::align_of::<_FG_CLASS_LAYOUT>() , 8usize);
}
extern "C" {
    #[link_name = "_ZN16_FG_CLASS_LAYOUT13AddUserStringEPKcS1_"]
    pub fn _FG_CLASS_LAYOUT_AddUserString(this: *mut _FG_CLASS_LAYOUT,
                                          key: *const ::std::os::raw::c_char,
                                          value:
                                              *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_ZN16_FG_CLASS_LAYOUT8AddChildEPKcS1_jPK11fgTransformsi"]
    pub fn _FG_CLASS_LAYOUT_AddChild(this: *mut _FG_CLASS_LAYOUT,
                                     type_: *const ::std::os::raw::c_char,
                                     name: *const ::std::os::raw::c_char,
                                     flags: fgFlag,
                                     transform: *const fgTransform,
                                     units: ::std::os::raw::c_short,
                                     order: ::std::os::raw::c_int) -> FG_UINT;
}
extern "C" {
    #[link_name = "_ZN16_FG_CLASS_LAYOUT11RemoveChildEj"]
    pub fn _FG_CLASS_LAYOUT_RemoveChild(this: *mut _FG_CLASS_LAYOUT,
                                        child: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "_ZNK16_FG_CLASS_LAYOUT8GetChildEj"]
    pub fn _FG_CLASS_LAYOUT_GetChild(this: *const _FG_CLASS_LAYOUT,
                                     child: FG_UINT) -> *mut _FG_CLASS_LAYOUT;
}
impl Clone for _FG_CLASS_LAYOUT {
    fn clone(&self) -> Self { *self }
}
impl _FG_CLASS_LAYOUT {
    #[inline]
    pub unsafe fn AddUserString(&mut self, key: *const ::std::os::raw::c_char,
                                value: *const ::std::os::raw::c_char) {
        _FG_CLASS_LAYOUT_AddUserString(&mut *self, key, value)
    }
    #[inline]
    pub unsafe fn AddChild(&mut self, type_: *const ::std::os::raw::c_char,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_short,
                           order: ::std::os::raw::c_int) -> FG_UINT {
        _FG_CLASS_LAYOUT_AddChild(&mut *self, type_, name, flags, transform,
                                  units, order)
    }
    #[inline]
    pub unsafe fn RemoveChild(&mut self, child: FG_UINT)
     -> ::std::os::raw::c_char {
        _FG_CLASS_LAYOUT_RemoveChild(&mut *self, child)
    }
    #[inline]
    pub unsafe fn GetChild(&self, child: FG_UINT) -> *mut _FG_CLASS_LAYOUT {
        _FG_CLASS_LAYOUT_GetChild(&*self, child)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __VECTOR__ClassLayout {
    pub p: *mut _FG_CLASS_LAYOUT,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout___VECTOR__ClassLayout() {
    assert_eq!(::std::mem::size_of::<__VECTOR__ClassLayout>() , 24usize);
    assert_eq!(::std::mem::align_of::<__VECTOR__ClassLayout>() , 8usize);
}
impl Clone for __VECTOR__ClassLayout {
    fn clone(&self) -> Self { *self }
}
pub use self::__VECTOR__ClassLayout as fgVectorClassLayout;
pub use self::__VECTOR__KeyValue as fgVectorKeyValue;
pub use self::_FG_CLASS_LAYOUT as fgClassLayout;
pub use self::_FG_LAYOUT as fgLayout;
extern "C" {
    pub fn fgLayout_Init(self_: *mut fgLayout);
}
extern "C" {
    pub fn fgLayout_Destroy(self_: *mut fgLayout);
}
extern "C" {
    pub fn fgLayout_AddLayout(self_: *mut fgLayout,
                              type_: *const ::std::os::raw::c_char,
                              name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int) -> FG_UINT;
}
extern "C" {
    pub fn fgLayout_RemoveLayout(self_: *mut fgLayout, layout: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgLayout_GetLayout(self_: *const fgLayout, layout: FG_UINT)
     -> *mut fgClassLayout;
}
extern "C" {
    pub fn fgLayout_LoadFileUBJSON(self_: *mut fgLayout,
                                   file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgLayout_LoadUBJSON(self_: *mut fgLayout,
                               data: *const ::std::os::raw::c_char,
                               length: FG_UINT);
}
extern "C" {
    pub fn fgLayout_SaveFileUBJSON(self_: *mut fgLayout,
                                   file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgLayout_LoadFileXML(self_: *mut fgLayout,
                                file: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgLayout_LoadXML(self_: *mut fgLayout,
                            data: *const ::std::os::raw::c_char,
                            length: FG_UINT) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgLayout_SaveFileXML(self_: *mut fgLayout,
                                file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgLayout_SaveElementXML(root: *mut fgElement,
                                   file: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgClassLayout_Init(self_: *mut fgClassLayout,
                              type_: *const ::std::os::raw::c_char,
                              name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_short,
                              order: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fgClassLayout_Destroy(self_: *mut fgClassLayout);
}
extern "C" {
    pub fn fgClassLayout_AddUserString(self_: *mut fgClassLayout,
                                       key: *const ::std::os::raw::c_char,
                                       value: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fgClassLayout_AddChild(self_: *mut fgClassLayout,
                                  type_: *const ::std::os::raw::c_char,
                                  name: *const ::std::os::raw::c_char,
                                  flags: fgFlag,
                                  transform: *const fgTransform,
                                  units: ::std::os::raw::c_short,
                                  order: ::std::os::raw::c_int) -> FG_UINT;
}
extern "C" {
    pub fn fgClassLayout_RemoveChild(self_: *mut fgClassLayout,
                                     child: FG_UINT)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgClassLayout_GetChild(self_: *const fgClassLayout, child: FG_UINT)
     -> *mut fgClassLayout;
}
extern "C" {
    pub fn fgDefaultLayout(self_: *mut fgElement, msg: *const FG_Msg,
                           dim: *mut AbsVec) -> usize;
}
extern "C" {
    pub fn fgDistributeLayout(self_: *mut fgElement, msg: *const FG_Msg,
                              flags: fgFlag, dim: *mut AbsVec) -> usize;
}
extern "C" {
    pub fn fgTileLayout(self_: *mut fgElement, msg: *const FG_Msg,
                        flags: fgFlag, area: *mut AbsVec) -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_MENUITEM {
    pub element: fgElement,
    pub text: fgText,
    pub submenu: *mut _FG_MENU,
}
#[test]
fn bindgen_test_layout__FG_MENUITEM() {
    assert_eq!(::std::mem::size_of::<_FG_MENUITEM>() , 752usize);
    assert_eq!(::std::mem::align_of::<_FG_MENUITEM>() , 8usize);
}
impl Clone for _FG_MENUITEM {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_MENUITEM as fgMenuItem;
pub use self::_FG_MENU as fgMenu;
extern "C" {
    pub fn fgMenu_Init(self_: *mut fgMenu, parent: *mut fgElement,
                       next: *mut fgElement,
                       name: *const ::std::os::raw::c_char, flags: fgFlag,
                       transform: *const fgTransform,
                       units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgMenu_Destroy(self_: *mut fgMenu);
}
extern "C" {
    pub fn fgMenu_Message(self_: *mut fgMenu, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgSubmenu_Init(self_: *mut fgMenu, parent: *mut fgElement,
                          next: *mut fgElement,
                          name: *const ::std::os::raw::c_char, flags: fgFlag,
                          transform: *const fgTransform,
                          units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgSubmenu_Message(self_: *mut fgMenu, msg: *const FG_Msg) -> usize;
}
extern "C" {
    pub fn fgMenuItem_Init(self_: *mut fgMenuItem, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgMenuItem_Message(self_: *mut fgMenuItem, msg: *const FG_Msg)
     -> usize;
}
pub use self::_FG_MONITOR as fgMonitor;
extern "C" {
    pub fn fgMonitor_Init(self_: *mut fgMonitor, flags: fgFlag,
                          parent: *mut _FG_ROOT, prev: *mut fgMonitor,
                          coverage: *const AbsRect, dpi: *const fgIntVec);
}
extern "C" {
    pub fn fgMonitor_Destroy(self_: *mut fgMonitor);
}
extern "C" {
    pub fn fgMonitor_Message(self_: *mut fgMonitor, msg: *const FG_Msg)
     -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_PROGRESSBAR {
    pub control: fgControl,
    pub text: fgText,
    pub bar: fgElement,
    pub value: FREL,
}
#[test]
fn bindgen_test_layout__FG_PROGRESSBAR() {
    assert_eq!(::std::mem::size_of::<_FG_PROGRESSBAR>() , 1112usize);
    assert_eq!(::std::mem::align_of::<_FG_PROGRESSBAR>() , 8usize);
}
impl Clone for _FG_PROGRESSBAR {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_PROGRESSBAR as fgProgressbar;
extern "C" {
    pub fn fgProgressbar_Init(self_: *mut fgProgressbar,
                              parent: *mut fgElement, next: *mut fgElement,
                              name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgProgressbar_Destroy(self_: *mut fgProgressbar);
}
extern "C" {
    pub fn fgProgressbar_Message(self_: *mut fgProgressbar,
                                 msg: *const FG_Msg) -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_CHECKBOX {
    pub control: fgControl,
    pub text: fgText,
    pub checked: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_CHECKBOX() {
    assert_eq!(::std::mem::size_of::<_FG_CHECKBOX>() , 792usize);
    assert_eq!(::std::mem::align_of::<_FG_CHECKBOX>() , 8usize);
}
impl Clone for _FG_CHECKBOX {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_CHECKBOX as fgCheckbox;
extern "C" {
    pub fn fgCheckbox_Init(self_: *mut fgCheckbox, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgCheckbox_Destroy(self_: *mut fgCheckbox);
}
extern "C" {
    pub fn fgCheckbox_Message(self_: *mut fgCheckbox, msg: *const FG_Msg)
     -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_RADIOBUTTON {
    pub window: fgCheckbox,
    pub radionext: *mut _FG_RADIOBUTTON,
    pub radioprev: *mut _FG_RADIOBUTTON,
}
#[test]
fn bindgen_test_layout__FG_RADIOBUTTON() {
    assert_eq!(::std::mem::size_of::<_FG_RADIOBUTTON>() , 808usize);
    assert_eq!(::std::mem::align_of::<_FG_RADIOBUTTON>() , 8usize);
}
impl Clone for _FG_RADIOBUTTON {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_RADIOBUTTON as fgRadiobutton;
extern "C" {
    pub fn fgRadiobutton_Init(self_: *mut fgRadiobutton,
                              parent: *mut fgElement, next: *mut fgElement,
                              name: *const ::std::os::raw::c_char,
                              flags: fgFlag, transform: *const fgTransform,
                              units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgRadiobutton_Destroy(self_: *mut fgRadiobutton);
}
extern "C" {
    pub fn fgRadiobutton_Message(self_: *mut fgRadiobutton,
                                 msg: *const FG_Msg) -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_SLIDER {
    pub control: fgControl,
    pub slider: fgElement,
    pub range: usize,
    pub value: usize,
}
#[test]
fn bindgen_test_layout__FG_SLIDER() {
    assert_eq!(::std::mem::size_of::<_FG_SLIDER>() , 696usize);
    assert_eq!(::std::mem::align_of::<_FG_SLIDER>() , 8usize);
}
impl Clone for _FG_SLIDER {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_SLIDER as fgSlider;
extern "C" {
    pub fn fgSlider_Init(self_: *mut fgSlider, parent: *mut fgElement,
                         next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform,
                         units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgSlider_Destroy(self_: *mut fgSlider);
}
extern "C" {
    pub fn fgSlider_Message(self_: *mut fgSlider, msg: *const FG_Msg)
     -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_23 {
    pub control: fgControl,
    pub header: fgBox,
    pub selected: *mut fgElement,
}
#[test]
fn bindgen_test_layout__bindgen_ty_23() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_23>() , 6496usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_23>() , 8usize);
}
impl Clone for _bindgen_ty_23 {
    fn clone(&self) -> Self { *self }
}
pub use self::_bindgen_ty_23 as fgTabcontrol;
extern "C" {
    pub fn fgTabcontrol_Init(self_: *mut fgTabcontrol, parent: *mut fgElement,
                             next: *mut fgElement,
                             name: *const ::std::os::raw::c_char,
                             flags: fgFlag, transform: *const fgTransform,
                             units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgTabcontrol_Destroy(self_: *mut fgTabcontrol);
}
extern "C" {
    pub fn fgTabcontrol_Message(self_: *mut fgTabcontrol, msg: *const FG_Msg)
     -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_TREEITEM {
    pub control: fgControl,
    pub arrow: fgElement,
    pub count: usize,
}
#[test]
fn bindgen_test_layout__FG_TREEITEM() {
    assert_eq!(::std::mem::size_of::<_FG_TREEITEM>() , 688usize);
    assert_eq!(::std::mem::align_of::<_FG_TREEITEM>() , 8usize);
}
impl Clone for _FG_TREEITEM {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_TREEITEM as fgTreeItem;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_TREEVIEW {
    pub scrollbar: fgScrollbar,
}
#[test]
fn bindgen_test_layout__FG_TREEVIEW() {
    assert_eq!(::std::mem::size_of::<_FG_TREEVIEW>() , 6080usize);
    assert_eq!(::std::mem::align_of::<_FG_TREEVIEW>() , 8usize);
}
impl Clone for _FG_TREEVIEW {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_TREEVIEW as fgTreeview;
extern "C" {
    pub fn fgTreeview_Init(self_: *mut fgTreeview, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgTreeview_Destroy(self_: *mut fgTreeview);
}
extern "C" {
    pub fn fgTreeview_Message(self_: *mut fgTreeview, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgTreeItem_Init(self_: *mut fgTreeItem, parent: *mut fgElement,
                           next: *mut fgElement,
                           name: *const ::std::os::raw::c_char, flags: fgFlag,
                           transform: *const fgTransform,
                           units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgTreeItem_Message(self_: *mut fgTreeItem, msg: *const FG_Msg)
     -> usize;
}
extern "C" {
    pub fn fgTreeItem_Destroy(self_: *mut fgTreeItem);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGWINDOW_FLAGS {
    FGWINDOW_MINIMIZABLE = 1024,
    FGWINDOW_MAXIMIZABLE = 2048,
    FGWINDOW_RESIZABLE = 4096,
    FGWINDOW_NOTITLEBAR = 8192,
    FGWINDOW_NOBORDER = 16384,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGWINDOW_ACTIONS {
    FGWINDOW_CLOSE = 0,
    FGWINDOW_MAXIMIZE = 1,
    FGWINDOW_RESTORE = 2,
    FGWINDOW_MINIMIZE = 3,
    FGWINDOW_UNMINIMIZE = 4,
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_WINDOW {
    pub control: fgControl,
    pub caption: fgText,
    pub controls: [fgButton; 3usize],
    pub prevrect: CRect,
    pub offset: AbsVec,
    pub dragged: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_WINDOW() {
    assert_eq!(::std::mem::size_of::<_FG_WINDOW>() , 3184usize);
    assert_eq!(::std::mem::align_of::<_FG_WINDOW>() , 8usize);
}
impl Clone for _FG_WINDOW {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_WINDOW as fgWindow;
extern "C" {
    pub fn fgWindow_Init(self_: *mut fgWindow, parent: *mut fgElement,
                         next: *mut fgElement,
                         name: *const ::std::os::raw::c_char, flags: fgFlag,
                         transform: *const fgTransform,
                         units: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn fgWindow_Destroy(self_: *mut fgWindow);
}
extern "C" {
    pub fn fgWindow_Message(self_: *mut fgWindow, msg: *const FG_Msg)
     -> usize;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FGDEBUG_FLAGS { FGDEBUG_CLEARONHIDE = 512, }
#[repr(C)]
#[derive(Copy)]
pub union _FG_DEBUG_MESSAGE_STORAGE {
    pub p: *mut ::std::os::raw::c_void,
    pub f: f32,
    pub u: usize,
    pub i: isize,
    pub transform: fgTransform,
    pub crect: CRect,
    pub rect: AbsRect,
    pub cvec: CVec,
    pub vec: AbsVec,
    pub __bindgen_anon_1: _FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1,
    pub message: *mut FG_Msg,
    pub s: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1 {
    pub element: *mut fgElement,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1>()
               , 16usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1>()
               , 8usize);
}
impl Clone for _FG_DEBUG_MESSAGE_STORAGE__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE_STORAGE() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE_STORAGE>() , 56usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE_STORAGE>() , 8usize);
}
impl Clone for _FG_DEBUG_MESSAGE_STORAGE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_DEBUG_MESSAGE {
    pub __bindgen_anon_1: _FG_DEBUG_MESSAGE__bindgen_ty_1,
    pub type_: ::std::os::raw::c_ushort,
    pub subtype: ::std::os::raw::c_ushort,
    pub time: ::std::os::raw::c_ulonglong,
    pub __bindgen_anon_2: _FG_DEBUG_MESSAGE__bindgen_ty_2,
    pub depth: usize,
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_DEBUG_MESSAGE__bindgen_ty_1 {
    pub __bindgen_anon_1: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1,
    pub mouse: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2,
    pub keys: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3,
    pub __bindgen_anon_2: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4,
    pub __bindgen_anon_3: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1 {
    pub arg1: _FG_DEBUG_MESSAGE_STORAGE,
    pub arg2: _FG_DEBUG_MESSAGE_STORAGE,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1>()
               , 112usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1>()
               , 8usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2 {
    pub x: f32,
    pub y: f32,
    pub __bindgen_anon_1: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub __bindgen_anon_1: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
    pub touchindex: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub button: ::std::os::raw::c_uchar,
    pub allbtn: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>()
               , 2usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>()
               , 1usize);
}
impl Clone for
 _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    pub scrolldelta: ::std::os::raw::c_short,
    pub scrollhdelta: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>()
               , 2usize);
}
impl Clone for
 _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
               , 2usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2>()
               , 12usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2>()
               , 4usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3 {
    pub keychar: ::std::os::raw::c_int,
    pub keycode: ::std::os::raw::c_uchar,
    pub sigkeys: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3>()
               , 4usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4 {
    pub joyvalue: f32,
    pub joyaxis: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4>()
               , 4usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5 {
    pub joydown: ::std::os::raw::c_char,
    pub joybutton: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5>()
               , 4usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5>()
               , 2usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1__bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1>() ,
               112usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union _FG_DEBUG_MESSAGE__bindgen_ty_2 {
    pub value: usize,
    pub valuef: f32,
    pub valuep: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE__bindgen_ty_2>() ,
               8usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE__bindgen_ty_2>() ,
               8usize);
}
impl Clone for _FG_DEBUG_MESSAGE__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG_MESSAGE() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG_MESSAGE>() , 144usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG_MESSAGE>() , 8usize);
}
impl Clone for _FG_DEBUG_MESSAGE {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_DEBUG_MESSAGE as fgDebugMessage;
#[repr(C)]
#[derive(Copy)]
pub struct _FG_DEBUG {
    pub element: fgElement,
    pub elements: fgTreeview,
    pub messages: fgTreeview,
    pub properties: fgGrid,
    pub contents: fgText,
    pub context: fgMenu,
    pub behaviorhook: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _FG_ELEMENT,
                                                                 msg:
                                                                     *const FG_Msg)
                                                ->
                                                    ::std::os::raw::c_ulonglong>,
    pub messagelog: _FG_DEBUG___VECTOR__DebugMessage,
    pub messagestrings: _FG_DEBUG___VECTOR__strings,
    pub depth: usize,
    pub depthelement: *mut fgElement,
    pub hover: *mut fgElement,
    pub ignore: ::std::os::raw::c_int,
    pub font: *mut ::std::os::raw::c_void,
    pub color: fgColor,
    pub lineheight: f32,
    pub letterspacing: f32,
    pub oldpadding: AbsRect,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG___VECTOR__DebugMessage {
    pub p: *mut fgDebugMessage,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout__FG_DEBUG___VECTOR__DebugMessage() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG___VECTOR__DebugMessage>() ,
               24usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG___VECTOR__DebugMessage>() ,
               8usize);
}
impl Clone for _FG_DEBUG___VECTOR__DebugMessage {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FG_DEBUG___VECTOR__strings {
    pub p: *mut *mut ::std::os::raw::c_char,
    pub s: usize,
    pub l: usize,
}
#[test]
fn bindgen_test_layout__FG_DEBUG___VECTOR__strings() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG___VECTOR__strings>() ,
               24usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG___VECTOR__strings>() ,
               8usize);
}
impl Clone for _FG_DEBUG___VECTOR__strings {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__FG_DEBUG() {
    assert_eq!(::std::mem::size_of::<_FG_DEBUG>() , 38264usize);
    assert_eq!(::std::mem::align_of::<_FG_DEBUG>() , 8usize);
}
impl Clone for _FG_DEBUG {
    fn clone(&self) -> Self { *self }
}
pub use self::_FG_DEBUG as fgDebug;
extern "C" {
    #[link_name =
          "_Z12fgDebug_InitP9_FG_DEBUGP11_FG_ELEMENTS2_PKcjPK11fgTransformt"]
    pub fn fgDebug_Init(self_: *mut fgDebug, parent: *mut fgElement,
                        next: *mut fgElement,
                        name: *const ::std::os::raw::c_char, flags: fgFlag,
                        transform: *const fgTransform,
                        units: ::std::os::raw::c_ushort);
}
extern "C" {
    #[link_name = "_Z15fgDebug_DestroyP9_FG_DEBUG"]
    pub fn fgDebug_Destroy(self_: *mut fgDebug);
}
extern "C" {
    #[link_name = "_Z15fgDebug_MessageP9_FG_DEBUGPK7_FG_MSG"]
    pub fn fgDebug_Message(self_: *mut fgDebug, msg: *const FG_Msg) -> usize;
}
extern "C" {
    #[link_name = "_Z16fgDebug_ClearLogP9_FG_DEBUG"]
    pub fn fgDebug_ClearLog(self_: *mut fgDebug);
}
extern "C" {
    #[link_name = "_Z12fgDebug_Showffc"]
    pub fn fgDebug_Show(left: f32, right: f32,
                        overlay: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_Z12fgDebug_Hidev"]
    pub fn fgDebug_Hide();
}
extern "C" {
    #[link_name = "_Z11fgDebug_Getv"]
    pub fn fgDebug_Get() -> *mut fgDebug;
}
extern "C" {
    #[link_name = "_Z18fgDebug_LogMessageP9_FG_DEBUGPK7_FG_MSGyy"]
    pub fn fgDebug_LogMessage(self_: *mut fgDebug, msg: *const FG_Msg,
                              time: ::std::os::raw::c_ulonglong, depth: usize)
     -> usize;
}
extern "C" {
    #[link_name = "_Z20fgDebug_WriteMessagePcyP17_FG_DEBUG_MESSAGE"]
    pub fn fgDebug_WriteMessage(buf: *mut ::std::os::raw::c_char,
                                bufsize: usize, msg: *mut fgDebugMessage)
     -> isize;
}
extern "C" {
    #[link_name = "_Z20fgDebug_DumpMessagesPKc"]
    pub fn fgDebug_DumpMessages(file: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "_Z17fgDebug_BuildTreeP11_FG_ELEMENT"]
    pub fn fgDebug_BuildTree(treeview: *mut fgElement);
}
extern "C" {
    #[link_name = "_Z20fgRoot_BehaviorDebugP11_FG_ELEMENTPK7_FG_MSG"]
    pub fn fgRoot_BehaviorDebug(self_: *mut fgElement, msg: *const FG_Msg)
     -> usize;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
