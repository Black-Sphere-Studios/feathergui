//THIS FILE AUTOGENERATED
#ifndef BACKEND_H
#define BACKEND_H

#include <stdint.h> // for integers
#include <stdbool.h> // for bool

enum FG_Cursor {
  FG_Cursor_NONE = 0,
  FG_Cursor_RESIZEWE = 7,
  FG_Cursor_RESIZEALL = 10,
  FG_Cursor_RESIZENS = 6,
  FG_Cursor_CUSTOM = 14,
  FG_Cursor_IBEAM = 2,
  FG_Cursor_ARROW = 1,
  FG_Cursor_DRAG = 13,
  FG_Cursor_RESIZENESW = 9,
  FG_Cursor_NO = 11,
  FG_Cursor_RESIZENWSE = 8,
  FG_Cursor_HELP = 12,
  FG_Cursor_WAIT = 4,
  FG_Cursor_HAND = 5,
  FG_Cursor_CROSS = 3
};
typedef struct FG_Data__ FG_Data;
struct FG_Data__ {
  void * data;
};
typedef struct FG_Backend__ FG_Backend;
typedef void (* FG_anon_1)(FG_Backend *);
enum FG_Features {
  FG_Features_CIRCLE_ALPHA = 2048,
  FG_Features_RECT_BLUR = 64,
  FG_Features_CIRCLE_ARCS = 256,
  FG_Features_LINES_ALPHA = 65536,
  FG_Features_RECT_CORNERS = 16,
  FG_Features_CIRCLE_BORDER = 512,
  FG_Features_LAYER_TRANSFORM = 524288,
  FG_Features_TEXT_ANTIALIAS = 1,
  FG_Features_TEXT_BLUR = 4,
  FG_Features_TRIANGLE_BLUR = 16384,
  FG_Features_TRIANGLE_ALPHA = 32768,
  FG_Features_RECT_BORDER = 32,
  FG_Features_CURVE_STROKE = 131072,
  FG_Features_IMMEDIATE_MODE = 33554432,
  FG_Features_RECT_ALPHA = 128,
  FG_Features_TEXT_ALPHA = 8,
  FG_Features_BACKGROUND_OPACITY = 16777216,
  FG_Features_TRIANGLE_BORDER = 8192,
  FG_Features_SHADER_HLSL2 = 8388608,
  FG_Features_CIRCLE_BLUR = 1024,
  FG_Features_SHADER_GLSL4 = 4194304,
  FG_Features_TRIANGLE_CORNERS = 4096,
  FG_Features_SHADER_GLSL2 = 2097152,
  FG_Features_LAYER_OPACITY = 1048576,
  FG_Features_CURVE_FILL = 262144,
  FG_Features_TEXT_SUBPIXEL = 2
};
typedef struct FG_Vec__ FG_Vec;
struct FG_Vec__ {
  float x;
  float y;
};
typedef struct FG_Asset__ FG_Asset;
typedef struct FG_Veci__ FG_Veci;
struct FG_Veci__ {
  int x;
  int y;
};
enum FG_Formats {
  FG_Formats_JPG = 2,
  FG_Formats_MKV = 14,
  FG_Formats_GIF = 5,
  FG_Formats_DDS = 9,
  FG_Formats_SVG = 11,
  FG_Formats_MP4 = 13,
  FG_Formats_WIC = 10,
  FG_Formats_BMP = 1,
  FG_Formats_AVI = 12,
  FG_Formats_ICO = 4,
  FG_Formats_GRADIENT = 0,
  FG_Formats_PNG = 3,
  FG_Formats_TIFF = 6,
  FG_Formats_WEBP = 8,
  FG_Formats_TGA = 7,
  FG_Formats_WEBM = 15
};
struct FG_Asset__ {
  FG_Data data;
  FG_Veci size;
  FG_Vec dpi;
  FG_Formats format;
};
typedef FG_Asset * (* FG_anon_2)(FG_Backend *, int8_t *, uint32_t, FG_Formats);
enum FG_Clipboard {
  FG_Clipboard_NONE = 0,
  FG_Clipboard_ALL = 7,
  FG_Clipboard_CUSTOM = 6,
  FG_Clipboard_WAVE = 2,
  FG_Clipboard_BITMAP = 3,
  FG_Clipboard_ELEMENT = 5,
  FG_Clipboard_FILE = 4,
  FG_Clipboard_TEXT = 1
};
typedef int32_t (* FG_anon_3)(FG_Backend *, FG_Clipboard);
typedef struct FG_Display__ FG_Display;
struct FG_Display__ {
  FG_Veci size;
  FG_Veci offset;
  FG_Vec dpi;
  float scale;
  uint64_t handle;
  bool primary;
};
typedef int32_t (* FG_anon_4)(FG_Backend *, uint32_t, FG_Display *);
typedef struct FG_Rect__ FG_Rect;
struct FG_Rect__ {
  union {
    struct
    {
      float left;
      float top;
      float right;
      float bottom;
    };

    struct
    {
      FG_Vec topleft;
      FG_Vec bottomright;
    };

    float ltrb[4];
  };
};
typedef int32_t (* FG_anon_5)(FG_Backend *, void *, FG_Rect);
typedef int32_t (* FG_anon_6)(FG_Backend *);
typedef void * (* FG_anon_7)(FG_Backend *, void *, uint64_t, FG_Rect *, int8_t *, uint64_t);
typedef struct FG_Color__ FG_Color;
struct FG_Color__ {
  uint32_t v;
};
typedef int32_t (* FG_anon_8)(FG_Backend *, void *, FG_Rect *, FG_Rect *, FG_Color, float, FG_Color, float, FG_Asset *);
typedef struct FG_Font__ FG_Font;
struct FG_Font__ {
  FG_Data data;
  FG_Vec dpi;
  float baseline;
  float lineheight;
  uint32_t pt;
};
enum FG_AntiAliasing {
  FG_AntiAliasing_NO_AA = 0,
  FG_AntiAliasing_LCD_V = 3,
  FG_AntiAliasing_AA = 1,
  FG_AntiAliasing_LCD = 2
};
typedef int32_t (* FG_anon_9)(FG_Backend *, void *, FG_Font *, void *, FG_Rect *, FG_Color, float, float, float, FG_AntiAliasing);
typedef int32_t (* FG_anon_10)(FG_Backend *, FG_Clipboard, int8_t *, uint32_t);
typedef FG_Vec (* FG_anon_11)(FG_Backend *, FG_Font *, void *, FG_Rect *, float, float, uint32_t, FG_Vec);
typedef int32_t (* FG_anon_12)(FG_Backend *, uint64_t, FG_Display *);
typedef void * (* FG_anon_13)(FG_Backend *);
typedef int32_t (* FG_anon_14)(FG_Backend *, void *, FG_Display *);
typedef int32_t (* FG_anon_15)(FG_Backend *, void *, FG_Asset *, FG_Rect *, FG_Rect *, FG_Color, float);
typedef uint32_t (* FG_anon_16)(FG_Backend *, FG_Clipboard, void *, uint32_t);
typedef int32_t (* FG_anon_17)(FG_Backend *, void *, void *, uint64_t, FG_Rect *, int8_t *, uint64_t);
typedef int32_t (* FG_anon_18)(FG_Backend *, void *, FG_Vec *, uint32_t, FG_Color, float, FG_Color);
typedef int32_t (* FG_anon_19)(FG_Backend *, FG_Font *);
typedef int32_t (* FG_anon_20)(FG_Backend *, void *, FG_Rect, float *, float);
typedef int32_t (* FG_anon_21)(FG_Backend *, void *);
typedef int32_t (* FG_anon_22)(FG_Backend *, void *, FG_Cursor);
typedef FG_Font * (* FG_anon_23)(FG_Backend *, int8_t *, uint16_t, bool, uint32_t, FG_Vec);
typedef void * (* FG_anon_24)(FG_Backend *, FG_Font *, int8_t *, FG_Rect *, float, float, void *, FG_Vec);
typedef uint32_t (* FG_anon_25)(FG_Backend *, FG_Font *, void *, FG_Rect *, float, float, FG_Vec, FG_Vec *, FG_Vec);
typedef int32_t (* FG_anon_26)(FG_Backend *, void *, uint64_t);
typedef int32_t (* FG_anon_27)(FG_Backend *, void *, FG_Vec *, uint32_t, FG_Color);
typedef int32_t (* FG_anon_28)(FG_Backend *, FG_Asset *);
typedef bool (* FG_anon_29)(FG_Backend *, FG_Clipboard);
struct FG_Backend__ {
  FG_anon_1 destroy;
  FG_Features features;
  uint32_t formats;
  FG_Vec dpi;
  float scale;
  uint64_t cursorblink;
  uint64_t tooltipdelay;
  FG_anon_2 createAsset;
  FG_anon_3 clearClipboard;
  FG_anon_4 getDisplayIndex;
  FG_anon_5 pushClip;
  FG_anon_6 processMessages;
  FG_anon_5 dirtyRect;
  FG_anon_7 createWindow;
  FG_anon_8 drawTriangle;
  FG_anon_9 drawFont;
  FG_anon_10 putClipboard;
  FG_anon_11 fontPos;
  FG_anon_8 drawRect;
  FG_anon_12 getDisplay;
  FG_anon_13 getSyncObject;
  FG_anon_14 getDisplayWindow;
  FG_anon_15 drawAsset;
  FG_anon_16 getClipboard;
  FG_anon_17 setWindow;
  FG_anon_18 drawCurve;
  FG_anon_19 destroyFont;
  FG_anon_20 pushLayer;
  FG_anon_21 popClip;
  FG_anon_22 setCursor;
  FG_anon_23 createFont;
  FG_anon_24 fontLayout;
  FG_anon_21 popLayer;
  FG_anon_25 fontIndex;
  FG_anon_21 destroyWindow;
  FG_anon_8 drawCircle;
  FG_anon_26 requestAnimationFrame;
  FG_anon_27 drawLines;
  FG_anon_28 destroyAsset;
  FG_anon_29 checkClipboard;
};
typedef FG_Backend * (* FG_Log)(void *, int32_t, int8_t *, ...);
typedef struct FG_Vec3D__ FG_Vec3D;
struct FG_Vec3D__ {
  float x;
  float y;
  float z;
};
typedef struct FG_Color16__ FG_Color16;
struct FG_Color16__ {
  uint64_t v;
};
typedef struct FG_URect__ FG_URect;
struct FG_URect__ {
  FG_Rect abs;
  FG_Rect rel;
};
typedef void (* FG_Delegate)(void *);
typedef struct FG_UVec__ FG_UVec;
struct FG_UVec__ {
  FG_Vec abs;
  FG_Vec rel;
};
typedef struct FG_anon_30__ FG_anon_30;
struct FG_anon_30__ {
  union {
  uint64_t construct;
  int32_t destroy;
  int32_t dragDrop;
  int32_t draw;
  int32_t gotFocus;
  int32_t joyAxis;
  int32_t joyButtonDown;
  int32_t joyButtonUp;
  int32_t keyChar;
  int32_t keyDown;
  int32_t keyUp;
  int32_t lostFocus;
  int32_t mouseDblClick;
  int32_t mouseDown;
  int32_t mouseMove;
  int32_t mouseOff;
  int32_t mouseOn;
  int32_t mouseScroll;
  int32_t mouseUp;
  int32_t touchBegin;
  int32_t touchEnd;
  int32_t touchMove;
};;
};
typedef struct FG_anon_31__ FG_anon_31;
enum FG_anon_32 {
  FG_anon_32_DESTROY = 1,
  FG_anon_32_TOUCHEND = 20,
  FG_anon_32_KEYCHAR = 8,
  FG_anon_32_KEYDOWN = 9,
  FG_anon_32_MOUSEDBLCLICK = 12,
  FG_anon_32_GOTFOCUS = 4,
  FG_anon_32_JOYBUTTONDOWN = 6,
  FG_anon_32_MOUSEON = 16,
  FG_anon_32_DRAW = 3,
  FG_anon_32_MOUSEUP = 18,
  FG_anon_32_TOUCHBEGIN = 19,
  FG_anon_32_JOYBUTTONUP = 7,
  FG_anon_32_MOUSEDOWN = 13,
  FG_anon_32_MOUSESCROLL = 17,
  FG_anon_32_JOYAXIS = 5,
  FG_anon_32_LOSTFOCUS = 11,
  FG_anon_32_DRAGDROP = 2,
  FG_anon_32_TOUCHMOVE = 21,
  FG_anon_32_MOUSEOFF = 15,
  FG_anon_32_CONSTRUCT = 0,
  FG_anon_32_MOUSEMOVE = 14,
  FG_anon_32_KEYUP = 10
};
typedef struct FG_anon_33__ FG_anon_33;
typedef struct FG_anon_34__ FG_anon_34;
struct FG_anon_34__ {
  ;
};
struct FG_anon_33__ {
  FG_anon_34 * self;
  void * target;
};
typedef struct FG_anon_35__ FG_anon_35;
struct FG_anon_35__ {
  FG_anon_34 * self;
};
typedef struct FG_anon_36__ FG_anon_36;
struct FG_anon_36__ {
  FG_anon_34 * self;
};
typedef struct FG_anon_37__ FG_anon_37;
struct FG_anon_37__ {
  FG_anon_34 * self;
  void * data;
  FG_Rect area;
};
typedef struct FG_anon_38__ FG_anon_38;
struct FG_anon_38__ {
  FG_anon_34 * self;
};
typedef struct FG_anon_39__ FG_anon_39;
struct FG_anon_39__ {
  FG_anon_34 * self;
  float value;
  uint16_t axis;
};
typedef struct FG_anon_40__ FG_anon_40;
struct FG_anon_40__ {
  FG_anon_34 * self;
  uint16_t button;
};
typedef struct FG_anon_41__ FG_anon_41;
struct FG_anon_41__ {
  FG_anon_34 * self;
  uint16_t button;
};
typedef struct FG_anon_42__ FG_anon_42;
struct FG_anon_42__ {
  FG_anon_34 * self;
  int32_t unicode;
  uint8_t sigkeys;
};
typedef struct FG_anon_43__ FG_anon_43;
struct FG_anon_43__ {
  FG_anon_34 * self;
  uint8_t code;
  uint8_t sigkeys;
};
typedef struct FG_anon_44__ FG_anon_44;
struct FG_anon_44__ {
  FG_anon_34 * self;
  uint8_t code;
  uint8_t sigkeys;
};
typedef struct FG_anon_45__ FG_anon_45;
struct FG_anon_45__ {
  FG_anon_34 * self;
};
typedef struct FG_anon_46__ FG_anon_46;
struct FG_anon_46__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_47__ FG_anon_47;
struct FG_anon_47__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_48__ FG_anon_48;
struct FG_anon_48__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_49__ FG_anon_49;
struct FG_anon_49__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_50__ FG_anon_50;
struct FG_anon_50__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_51__ FG_anon_51;
struct FG_anon_51__ {
  FG_anon_34 * self;
  float x;
  float y;
  int16_t delta;
  int16_t hdelta;
};
typedef struct FG_anon_52__ FG_anon_52;
struct FG_anon_52__ {
  FG_anon_34 * self;
  float x;
  float y;
  uint8_t button;
  uint8_t all;
};
typedef struct FG_anon_53__ FG_anon_53;
struct FG_anon_53__ {
  FG_anon_34 * self;
  float x;
  float y;
  int16_t index;
};
typedef struct FG_anon_54__ FG_anon_54;
struct FG_anon_54__ {
  FG_anon_34 * self;
  float x;
  float y;
  int16_t index;
};
typedef struct FG_anon_55__ FG_anon_55;
struct FG_anon_55__ {
  FG_anon_34 * self;
  float x;
  float y;
  int16_t index;
};
struct FG_anon_31__ {
  FG_anon_32 type;
  uint16_t subtype;
  union {
  FG_anon_33 construct;
  FG_anon_35 destroy;
  FG_anon_36 dragDrop;
  FG_anon_37 draw;
  FG_anon_38 gotFocus;
  FG_anon_39 joyAxis;
  FG_anon_40 joyButtonDown;
  FG_anon_41 joyButtonUp;
  FG_anon_42 keyChar;
  FG_anon_43 keyDown;
  FG_anon_44 keyUp;
  FG_anon_45 lostFocus;
  FG_anon_46 mouseDblClick;
  FG_anon_47 mouseDown;
  FG_anon_48 mouseMove;
  FG_anon_49 mouseOff;
  FG_anon_50 mouseOn;
  FG_anon_51 mouseScroll;
  FG_anon_52 mouseUp;
  FG_anon_53 touchBegin;
  FG_anon_54 touchEnd;
  FG_anon_55 touchMove;
};;
};
typedef FG_anon_30 (* FG_Behavior)(void *, void *, FG_anon_31 *);
typedef FG_Backend * (* FG_InitBackend)(void *);

#endif