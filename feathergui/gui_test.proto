package GUI;

message Coord {
  optional float abs = 1;
  optional float rel = 2;
}

message Rect {
	required Coord left = 1;
	required Coord top = 2;
	required Coord right = 3;
	required Coord bottom = 4;
}

message Element {
  required Rect area = 1;
  optional float rotation = 2; // Implementations are not required to support rotation.
  optional Coord center = 3;
}

message Window {
  required Element element = 1;
  optional uint32 id = 3;
  optional uint32 order = 4;
  optional uint32 flags = 5;
  optional Widget contextmenu = 6;
  repeated Widget children = 7;
  repeated uint32 static = 8 [packed=true]; // This is a REFERENCE to a static's id, so windows can re-use definitions
}

// Lists all possible widget types. If you build your own type, you can safely add it here thanks to protobuf versioning
message Widget {
  enum CLASSID {
    REGION = 0;
    WINDOW = 1;
    BUTTON = 2;
    CHECKBOX = 3;
    COMBOBOX = 4;
    CONTAINER = 5;
    GRID = 6;
    LIST = 7;
    MENU = 8;
    PROGRESSBAR = 9;
    SCROLLBAR = 10;
    SLIDER = 11;
    TEXTBOX = 12;
    TOOLBAR = 13;
    TOPWINDOW = 14;
    TREE = 15;
  }
  optional CLASSID classid = 1;
  optional Window window = 2;
  optional Checkbox checkbox = 3;
  optional Container container = 4;
  optional Grid grid = 5;
  optional List list = 6;
  optional Slider slider = 7;
  optional TopWindow topwindow = 8;
  optional Tree tree = 9;
}

message Data { // This defines anything that can either be a relative or absolute filepath, or embedded as bytes in the file.
  optional string file = 1;
  optional bytes data = 2;
}

message Static {
  required Element element = 1;
  optional uint32 order = 2;
  optional uint32 id = 3; // Optional ID unique to all statics for a GUI element tree. Used by windows to find Static definitions, therefore allowing them to be reused.
  optional Data data = 4;
  enum DATATYPE {
    IMAGE = 0;
    TEXT = 1;
    VECTOR = 2;
    LINE = 3;
    RECT = 4;
  }
  optional DATATYPE type = 5;
  repeated Static children = 6;
}

message Checkbox {
  required Window window = 1;
}

message Container {
  required Window window = 1;
}

message Grid {
  required Window window = 1;
}

message List {
  required Window window = 1;
}

message Slider {
  required Window window = 1;
}

message TopWindow {
  required Window window = 1;
}

message Tree {
  required Window window = 1;
}